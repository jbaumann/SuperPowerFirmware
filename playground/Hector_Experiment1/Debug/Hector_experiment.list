
Hector_experiment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f90  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004318  08004318  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004320  08004320  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000018  08004340  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08004340  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ca4  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028d8  00000000  00000000  00031cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c0  00000000  00000000  000345c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b00  00000000  00000000  00034e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d84  00000000  00000000  00036988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c78b  00000000  00000000  0004d70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c4c9  00000000  00000000  00059e97  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6360  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d28  00000000  00000000  000e63dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00009889  00000000  00000000  000e8104  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004110 	.word	0x08004110

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08004110 	.word	0x08004110

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d8:	b510      	push	{r4, lr}
 80004da:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004dc:	2400      	movs	r4, #0
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <MX_DMA_Init+0x44>)
 80004e0:	9401      	str	r4, [sp, #4]
 80004e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80004e8:	631a      	str	r2, [r3, #48]	; 0x30
 80004ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80004f0:	4622      	mov	r2, r4
 80004f2:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004f4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80004f6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004f8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80004fa:	f000 fc1b 	bl	8000d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80004fe:	200b      	movs	r0, #11
 8000500:	f000 fc5e 	bl	8000dc0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000504:	4622      	mov	r2, r4
 8000506:	4621      	mov	r1, r4
 8000508:	200c      	movs	r0, #12
 800050a:	f000 fc13 	bl	8000d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800050e:	200c      	movs	r0, #12

}
 8000510:	b002      	add	sp, #8
 8000512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000516:	f000 bc53 	b.w	8000dc0 <HAL_NVIC_EnableIRQ>
 800051a:	bf00      	nop
 800051c:	40023800 	.word	0x40023800

08000520 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000520:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	2400      	movs	r4, #0
{
 8000524:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800052a:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b23      	ldr	r3, [pc, #140]	; (80005bc <MX_GPIO_Init+0x9c>)
 8000530:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000536:	4d22      	ldr	r5, [pc, #136]	; (80005c0 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000538:	f042 0204 	orr.w	r2, r2, #4
 800053c:	631a      	str	r2, [r3, #48]	; 0x30
 800053e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000540:	f002 0204 	and.w	r2, r2, #4
 8000544:	9201      	str	r2, [sp, #4]
 8000546:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000548:	9402      	str	r4, [sp, #8]
 800054a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800054c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000550:	631a      	str	r2, [r3, #48]	; 0x30
 8000552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000554:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000558:	9202      	str	r2, [sp, #8]
 800055a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055c:	9403      	str	r4, [sp, #12]
 800055e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000560:	f042 0201 	orr.w	r2, r2, #1
 8000564:	631a      	str	r2, [r3, #48]	; 0x30
 8000566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000568:	f002 0201 	and.w	r2, r2, #1
 800056c:	9203      	str	r2, [sp, #12]
 800056e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	9404      	str	r4, [sp, #16]
 8000572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000574:	f042 0202 	orr.w	r2, r2, #2
 8000578:	631a      	str	r2, [r3, #48]	; 0x30
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	f003 0302 	and.w	r3, r3, #2
 8000580:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000582:	4622      	mov	r2, r4
 8000584:	4628      	mov	r0, r5
 8000586:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000588:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800058a:	f001 f84f 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <MX_GPIO_Init+0xa4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <MX_GPIO_Init+0xa8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000594:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = B1_Pin;
 8000596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059e:	f000 fef7 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a2:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005a6:	a905      	add	r1, sp, #20
 80005a8:	4628      	mov	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	e9cd 4407 	strd	r4, r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f000 feed 	bl	8001390 <HAL_GPIO_Init>

}
 80005b6:	b00b      	add	sp, #44	; 0x2c
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020000 	.word	0x40020000
 80005c4:	10210000 	.word	0x10210000
 80005c8:	40020800 	.word	0x40020800

080005cc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005cc:	b538      	push	{r3, r4, r5, lr}

  hi2c1.Instance = I2C1;
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MX_I2C1_Init+0x38>)
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <MX_I2C1_Init+0x3c>)
  hi2c1.Init.ClockSpeed = 400000;
 80005d2:	480e      	ldr	r0, [pc, #56]	; (800060c <MX_I2C1_Init+0x40>)
  hi2c1.Instance = I2C1;
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 40;
 80005d6:	2228      	movs	r2, #40	; 0x28
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d8:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80005dc:	2401      	movs	r4, #1
  hi2c1.Init.OwnAddress2 = 42;
 80005de:	212a      	movs	r1, #42	; 0x2a
  hi2c1.Init.ClockSpeed = 400000;
 80005e0:	6058      	str	r0, [r3, #4]
  hi2c1.Init.OwnAddress1 = 40;
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e4:	4618      	mov	r0, r3
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e6:	2200      	movs	r2, #0
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80005e8:	e9c3 5404 	strd	r5, r4, [r3, #16]
  hi2c1.Init.OwnAddress2 = 42;
 80005ec:	6199      	str	r1, [r3, #24]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ee:	609a      	str	r2, [r3, #8]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f0:	e9c3 2207 	strd	r2, r2, [r3, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f4:	f001 f834 	bl	8001660 <HAL_I2C_Init>
 80005f8:	b900      	cbnz	r0, 80005fc <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8000600:	f000 ba0e 	b.w	8000a20 <Error_Handler>
 8000604:	20000098 	.word	0x20000098
 8000608:	40005400 	.word	0x40005400
 800060c:	00061a80 	.word	0x00061a80

08000610 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8000612:	6802      	ldr	r2, [r0, #0]
 8000614:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <HAL_I2C_MspInit+0x100>)
{
 8000616:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 800061a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000620:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000624:	9407      	str	r4, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000626:	d001      	beq.n	800062c <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000628:	b009      	add	sp, #36	; 0x24
 800062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	4f39      	ldr	r7, [pc, #228]	; (8000714 <HAL_I2C_MspInit+0x104>)
 800062e:	9401      	str	r4, [sp, #4]
 8000630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000632:	f043 0302 	orr.w	r3, r3, #2
 8000636:	633b      	str	r3, [r7, #48]	; 0x30
 8000638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000640:	23c0      	movs	r3, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000644:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000646:	2212      	movs	r2, #18
 8000648:	2301      	movs	r3, #1
 800064a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000650:	2304      	movs	r3, #4
 8000652:	2503      	movs	r5, #3
 8000654:	4606      	mov	r6, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	4830      	ldr	r0, [pc, #192]	; (8000718 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000658:	e9cd 5306 	strd	r5, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f000 fe98 	bl	8001390 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000660:	9402      	str	r4, [sp, #8]
 8000662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000664:	4d2d      	ldr	r5, [pc, #180]	; (800071c <HAL_I2C_MspInit+0x10c>)
 8000666:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8000728 <HAL_I2C_MspInit+0x118>
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800066a:	606c      	str	r4, [r5, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 800066c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000670:	643b      	str	r3, [r7, #64]	; 0x40
 8000672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000674:	60ec      	str	r4, [r5, #12]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800067a:	2040      	movs	r0, #64	; 0x40
    __HAL_RCC_I2C1_CLK_ENABLE();
 800067c:	9302      	str	r3, [sp, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000682:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000684:	60a8      	str	r0, [r5, #8]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8000686:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800068a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800068e:	4628      	mov	r0, r5
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000690:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000694:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000696:	f8c5 c000 	str.w	ip, [r5]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800069a:	6129      	str	r1, [r5, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800069c:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80006a0:	f000 fbbc 	bl	8000e1c <HAL_DMA_Init>
 80006a4:	bb70      	cbnz	r0, 8000704 <HAL_I2C_MspInit+0xf4>
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80006a6:	4c1e      	ldr	r4, [pc, #120]	; (8000720 <HAL_I2C_MspInit+0x110>)
 80006a8:	4a1e      	ldr	r2, [pc, #120]	; (8000724 <HAL_I2C_MspInit+0x114>)
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80006aa:	6375      	str	r5, [r6, #52]	; 0x34
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80006ac:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 80006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80006b8:	6022      	str	r2, [r4, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80006ba:	6060      	str	r0, [r4, #4]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006c0:	6123      	str	r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80006c2:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c4:	2300      	movs	r3, #0
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80006c6:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006c8:	e9c4 1207 	strd	r1, r2, [r4, #28]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006cc:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006d0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006d4:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80006d6:	f000 fba1 	bl	8000e1c <HAL_DMA_Init>
 80006da:	b9b0      	cbnz	r0, 800070a <HAL_I2C_MspInit+0xfa>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80006e0:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80006e2:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80006e4:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80006e6:	f000 fb25 	bl	8000d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006ea:	201f      	movs	r0, #31
 80006ec:	f000 fb68 	bl	8000dc0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	4611      	mov	r1, r2
 80006f4:	2020      	movs	r0, #32
 80006f6:	f000 fb1d 	bl	8000d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80006fa:	2020      	movs	r0, #32
 80006fc:	f000 fb60 	bl	8000dc0 <HAL_NVIC_EnableIRQ>
}
 8000700:	b009      	add	sp, #36	; 0x24
 8000702:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8000704:	f000 f98c 	bl	8000a20 <Error_Handler>
 8000708:	e7cd      	b.n	80006a6 <HAL_I2C_MspInit+0x96>
      Error_Handler();
 800070a:	f000 f989 	bl	8000a20 <Error_Handler>
 800070e:	e7e5      	b.n	80006dc <HAL_I2C_MspInit+0xcc>
 8000710:	40005400 	.word	0x40005400
 8000714:	40023800 	.word	0x40023800
 8000718:	40020400 	.word	0x40020400
 800071c:	20000038 	.word	0x20000038
 8000720:	200000ec 	.word	0x200000ec
 8000724:	40026010 	.word	0x40026010
 8000728:	40026028 	.word	0x40026028

0800072c <HAL_I2C_AddrCallback>:
	return HAL_OK;
}



void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 800072c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	UNUSED(hi2c);
	switch(TransferDirection){
 8000730:	460b      	mov	r3, r1
 8000732:	b179      	cbz	r1, 8000754 <HAL_I2C_AddrCallback+0x28>
 8000734:	2901      	cmp	r1, #1
 8000736:	d10b      	bne.n	8000750 <HAL_I2C_AddrCallback+0x24>
 8000738:	4614      	mov	r4, r2
	case I2C_DIRECTION_TRANSMIT:
		addr = AddrMatchCode;
		test.addres = addr;
 800073a:	4d1f      	ldr	r5, [pc, #124]	; (80007b8 <HAL_I2C_AddrCallback+0x8c>)
		addr = AddrMatchCode;
 800073c:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <HAL_I2C_AddrCallback+0x90>)
		test.addres = addr;
 800073e:	802c      	strh	r4, [r5, #0]
		addr = AddrMatchCode;
 8000740:	8014      	strh	r4, [r2, #0]
		//HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, slaveReceiveBuffer, SLAVE_BUFFER_SIZE, I2C_FIRST_FRAME);
		HAL_I2C_Slave_Seq_Receive_DMA(&hi2c1, slaveReceiveBuffer, SLAVE_BUFFER_SIZE, I2C_FIRST_FRAME);
 8000742:	491f      	ldr	r1, [pc, #124]	; (80007c0 <HAL_I2C_AddrCallback+0x94>)
 8000744:	481f      	ldr	r0, [pc, #124]	; (80007c4 <HAL_I2C_AddrCallback+0x98>)
 8000746:	2220      	movs	r2, #32
		HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c1, slaveTransmitBuffer, sizeOfData, I2C_LAST_FRAME);
		break;
	default:
		break;
	}
}
 8000748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_I2C_Slave_Seq_Receive_DMA(&hi2c1, slaveReceiveBuffer, SLAVE_BUFFER_SIZE, I2C_FIRST_FRAME);
 800074c:	f001 b996 	b.w	8001a7c <HAL_I2C_Slave_Seq_Receive_DMA>
}
 8000750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BCD);
 8000754:	4e1c      	ldr	r6, [pc, #112]	; (80007c8 <HAL_I2C_AddrCallback+0x9c>)
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BCD);
 8000756:	4d1d      	ldr	r5, [pc, #116]	; (80007cc <HAL_I2C_AddrCallback+0xa0>)
		slaveTransmitBuffer = (uint8_t*)getRegister(slaveReceiveBuffer[0]);
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <HAL_I2C_AddrCallback+0x94>)
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BCD);
 800075a:	481d      	ldr	r0, [pc, #116]	; (80007d0 <HAL_I2C_AddrCallback+0xa4>)
		slaveTransmitBuffer = (uint8_t*)getRegister(slaveReceiveBuffer[0]);
 800075c:	781f      	ldrb	r7, [r3, #0]
 800075e:	460c      	mov	r4, r1
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BCD);
 8000760:	2201      	movs	r2, #1
 8000762:	4631      	mov	r1, r6
 8000764:	f003 f9de 	bl	8003b24 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BCD);
 8000768:	4629      	mov	r1, r5
 800076a:	2201      	movs	r2, #1
 800076c:	4818      	ldr	r0, [pc, #96]	; (80007d0 <HAL_I2C_AddrCallback+0xa4>)
 800076e:	f003 fb35 	bl	8003ddc <HAL_RTC_GetDate>
	timebuffer[0] = time.Seconds;
 8000772:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <HAL_I2C_AddrCallback+0xa8>)
 8000774:	78b1      	ldrb	r1, [r6, #2]
	timebuffer[1] = time.Minutes;
 8000776:	7873      	ldrb	r3, [r6, #1]
	timebuffer[0] = time.Seconds;
 8000778:	7011      	strb	r1, [r2, #0]
	timebuffer[1] = time.Minutes;
 800077a:	7053      	strb	r3, [r2, #1]
	timebuffer[5] = date.Month;
 800077c:	7869      	ldrb	r1, [r5, #1]
	timebuffer[4] = date.Date;
 800077e:	78a8      	ldrb	r0, [r5, #2]
	timebuffer[6] = date.Year;
 8000780:	78eb      	ldrb	r3, [r5, #3]
	timebuffer[2] = time.Hours;
 8000782:	f896 c000 	ldrb.w	ip, [r6]
	timebuffer[3] = date.WeekDay;
 8000786:	782e      	ldrb	r6, [r5, #0]
	timebuffer[5] = date.Month;
 8000788:	7151      	strb	r1, [r2, #5]
	if(reg <= 6){
 800078a:	2f06      	cmp	r7, #6
	timebuffer[2] = time.Hours;
 800078c:	f882 c002 	strb.w	ip, [r2, #2]
	timebuffer[3] = date.WeekDay;
 8000790:	70d6      	strb	r6, [r2, #3]
	timebuffer[4] = date.Date;
 8000792:	7110      	strb	r0, [r2, #4]
	timebuffer[6] = date.Year;
 8000794:	7193      	strb	r3, [r2, #6]
	  ptr = &timebuffer[(uint8_t)reg];
 8000796:	bf98      	it	ls
 8000798:	19d1      	addls	r1, r2, r7
		slaveTransmitBuffer = (uint8_t*)getRegister(slaveReceiveBuffer[0]);
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <HAL_I2C_AddrCallback+0xac>)
		sizeOfData = 8;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_I2C_AddrCallback+0xb0>)
		HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c1, slaveTransmitBuffer, sizeOfData, I2C_LAST_FRAME);
 800079e:	4809      	ldr	r0, [pc, #36]	; (80007c4 <HAL_I2C_AddrCallback+0x98>)
	char* ptr = NULL;
 80007a0:	bf88      	it	hi
 80007a2:	4621      	movhi	r1, r4
		slaveTransmitBuffer = (uint8_t*)getRegister(slaveReceiveBuffer[0]);
 80007a4:	6011      	str	r1, [r2, #0]
		sizeOfData = 8;
 80007a6:	2208      	movs	r2, #8
 80007a8:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c1, slaveTransmitBuffer, sizeOfData, I2C_LAST_FRAME);
 80007aa:	881a      	ldrh	r2, [r3, #0]
}
 80007ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_I2C_Slave_Seq_Transmit_DMA(&hi2c1, slaveTransmitBuffer, sizeOfData, I2C_LAST_FRAME);
 80007b0:	2320      	movs	r3, #32
 80007b2:	f001 b89b 	b.w	80018ec <HAL_I2C_Slave_Seq_Transmit_DMA>
 80007b6:	bf00      	nop
 80007b8:	20000154 	.word	0x20000154
 80007bc:	20000034 	.word	0x20000034
 80007c0:	20000178 	.word	0x20000178
 80007c4:	20000098 	.word	0x20000098
 80007c8:	20000198 	.word	0x20000198
 80007cc:	200001ac 	.word	0x200001ac
 80007d0:	200001b0 	.word	0x200001b0
 80007d4:	20000000 	.word	0x20000000
 80007d8:	2000014c 	.word	0x2000014c
 80007dc:	20000150 	.word	0x20000150

080007e0 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	4604      	mov	r4, r0
 80007e4:	b091      	sub	sp, #68	; 0x44
	HAL_I2C_EnableListen_IT(&hi2c1); // Restart
 80007e6:	4855      	ldr	r0, [pc, #340]	; (800093c <HAL_I2C_ListenCpltCallback+0x15c>)
		test.cmd_size = (uint8_t)(SLAVE_BUFFER_SIZE - hi2c->XferCount);
 80007e8:	4d55      	ldr	r5, [pc, #340]	; (8000940 <HAL_I2C_ListenCpltCallback+0x160>)
	HAL_I2C_EnableListen_IT(&hi2c1); // Restart
 80007ea:	f001 fa15 	bl	8001c18 <HAL_I2C_EnableListen_IT>
		test.cmd_size = (uint8_t)(SLAVE_BUFFER_SIZE - hi2c->XferCount);
 80007ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f1c3 0620 	rsb	r6, r3, #32
		if(test.cmd_size > 0 && test.cmd_size < SLAVE_BUFFER_SIZE){
 80007f6:	f1c3 031f 	rsb	r3, r3, #31
 80007fa:	b2dc      	uxtb	r4, r3
		test.cmd_size = (uint8_t)(SLAVE_BUFFER_SIZE - hi2c->XferCount);
 80007fc:	b2f6      	uxtb	r6, r6
		if(test.cmd_size > 0 && test.cmd_size < SLAVE_BUFFER_SIZE){
 80007fe:	2c1e      	cmp	r4, #30
		test.cmd_size = (uint8_t)(SLAVE_BUFFER_SIZE - hi2c->XferCount);
 8000800:	70ae      	strb	r6, [r5, #2]
		if(test.cmd_size > 0 && test.cmd_size < SLAVE_BUFFER_SIZE){
 8000802:	d901      	bls.n	8000808 <HAL_I2C_ListenCpltCallback+0x28>
			memcpy(test.data, slaveReceiveBuffer, test.cmd_size);
			ds3231_cmd_decode(test);
			memset(slaveReceiveBuffer, 0, SLAVE_BUFFER_SIZE);
		}

}
 8000804:	b011      	add	sp, #68	; 0x44
 8000806:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memcpy(test.data, slaveReceiveBuffer, test.cmd_size);
 8000808:	4632      	mov	r2, r6
 800080a:	494e      	ldr	r1, [pc, #312]	; (8000944 <HAL_I2C_ListenCpltCallback+0x164>)
 800080c:	1ce8      	adds	r0, r5, #3
 800080e:	f003 fc6b 	bl	80040e8 <memcpy>
 8000812:	f105 0e20 	add.w	lr, r5, #32
 8000816:	f10d 0c1c 	add.w	ip, sp, #28
 800081a:	6828      	ldr	r0, [r5, #0]
 800081c:	6869      	ldr	r1, [r5, #4]
 800081e:	68aa      	ldr	r2, [r5, #8]
 8000820:	68eb      	ldr	r3, [r5, #12]
 8000822:	4667      	mov	r7, ip
 8000824:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000826:	3510      	adds	r5, #16
 8000828:	4575      	cmp	r5, lr
 800082a:	46bc      	mov	ip, r7
 800082c:	d1f5      	bne.n	800081a <HAL_I2C_ListenCpltCallback+0x3a>
 800082e:	6828      	ldr	r0, [r5, #0]
 8000830:	6038      	str	r0, [r7, #0]
	switch (msg.data[0]) {
 8000832:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8000836:	2b06      	cmp	r3, #6
 8000838:	d80d      	bhi.n	8000856 <HAL_I2C_ListenCpltCallback+0x76>
 800083a:	e8df f003 	tbb	[pc, r3]
 800083e:	486d      	.short	0x486d
 8000840:	1e2b3965 	.word	0x1e2b3965
 8000844:	04          	.byte	0x04
 8000845:	00          	.byte	0x00
 8000846:	2301      	movs	r3, #1
		if(size-- > 0){
 8000848:	b12e      	cbz	r6, 8000856 <HAL_I2C_ListenCpltCallback+0x76>
			date.Year= msg.data[i];
 800084a:	aa10      	add	r2, sp, #64	; 0x40
 800084c:	4413      	add	r3, r2
 800084e:	f813 3c21 	ldrb.w	r3, [r3, #-33]
 8000852:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD);
 8000856:	a902      	add	r1, sp, #8
 8000858:	2201      	movs	r2, #1
 800085a:	483b      	ldr	r0, [pc, #236]	; (8000948 <HAL_I2C_ListenCpltCallback+0x168>)
 800085c:	f003 f804 	bl	8003868 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BCD);
 8000860:	a901      	add	r1, sp, #4
 8000862:	2201      	movs	r2, #1
 8000864:	4838      	ldr	r0, [pc, #224]	; (8000948 <HAL_I2C_ListenCpltCallback+0x168>)
 8000866:	f003 f99d 	bl	8003ba4 <HAL_RTC_SetDate>
			memset(slaveReceiveBuffer, 0, SLAVE_BUFFER_SIZE);
 800086a:	4836      	ldr	r0, [pc, #216]	; (8000944 <HAL_I2C_ListenCpltCallback+0x164>)
 800086c:	2220      	movs	r2, #32
 800086e:	2100      	movs	r1, #0
}
 8000870:	b011      	add	sp, #68	; 0x44
 8000872:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			memset(slaveReceiveBuffer, 0, SLAVE_BUFFER_SIZE);
 8000876:	f003 bc42 	b.w	80040fe <memset>
	switch (msg.data[0]) {
 800087a:	2302      	movs	r3, #2
 800087c:	2201      	movs	r2, #1
		if(size-- > 0){
 800087e:	2e00      	cmp	r6, #0
 8000880:	d0e9      	beq.n	8000856 <HAL_I2C_ListenCpltCallback+0x76>
			date.Month= msg.data[i];
 8000882:	a910      	add	r1, sp, #64	; 0x40
 8000884:	440a      	add	r2, r1
		if(size-- > 0){
 8000886:	3e01      	subs	r6, #1
			date.Month= msg.data[i];
 8000888:	f812 2c21 	ldrb.w	r2, [r2, #-33]
 800088c:	f88d 2005 	strb.w	r2, [sp, #5]
		if(size-- > 0){
 8000890:	b2f6      	uxtb	r6, r6
 8000892:	e7d9      	b.n	8000848 <HAL_I2C_ListenCpltCallback+0x68>
	switch (msg.data[0]) {
 8000894:	2303      	movs	r3, #3
 8000896:	2202      	movs	r2, #2
 8000898:	2101      	movs	r1, #1
		if(size-- > 0){
 800089a:	2e00      	cmp	r6, #0
 800089c:	d0db      	beq.n	8000856 <HAL_I2C_ListenCpltCallback+0x76>
			date.Date= msg.data[i];
 800089e:	a810      	add	r0, sp, #64	; 0x40
 80008a0:	4401      	add	r1, r0
		if(size-- > 0){
 80008a2:	3e01      	subs	r6, #1
			date.Date= msg.data[i];
 80008a4:	f811 1c21 	ldrb.w	r1, [r1, #-33]
 80008a8:	f88d 1006 	strb.w	r1, [sp, #6]
		if(size-- > 0){
 80008ac:	b2f6      	uxtb	r6, r6
 80008ae:	e7e6      	b.n	800087e <HAL_I2C_ListenCpltCallback+0x9e>
	switch (msg.data[0]) {
 80008b0:	2304      	movs	r3, #4
 80008b2:	2203      	movs	r2, #3
 80008b4:	2102      	movs	r1, #2
 80008b6:	2001      	movs	r0, #1
		if(size-- > 0){
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d0cc      	beq.n	8000856 <HAL_I2C_ListenCpltCallback+0x76>
			date.WeekDay = msg.data[i];
 80008bc:	ac10      	add	r4, sp, #64	; 0x40
 80008be:	4420      	add	r0, r4
		if(size-- > 0){
 80008c0:	3e01      	subs	r6, #1
			date.WeekDay = msg.data[i];
 80008c2:	f810 0c21 	ldrb.w	r0, [r0, #-33]
 80008c6:	f88d 0004 	strb.w	r0, [sp, #4]
		if(size-- > 0){
 80008ca:	b2f6      	uxtb	r6, r6
 80008cc:	e7e5      	b.n	800089a <HAL_I2C_ListenCpltCallback+0xba>
	switch (msg.data[0]) {
 80008ce:	2306      	movs	r3, #6
 80008d0:	2205      	movs	r2, #5
 80008d2:	2104      	movs	r1, #4
 80008d4:	2003      	movs	r0, #3
 80008d6:	2402      	movs	r4, #2
 80008d8:	2501      	movs	r5, #1
		if(size-- > 0){
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d0bb      	beq.n	8000856 <HAL_I2C_ListenCpltCallback+0x76>
			time.Minutes = msg.data[i];
 80008de:	af10      	add	r7, sp, #64	; 0x40
 80008e0:	443d      	add	r5, r7
		if(size-- > 0){
 80008e2:	3e01      	subs	r6, #1
			time.Minutes = msg.data[i];
 80008e4:	f815 5c21 	ldrb.w	r5, [r5, #-33]
 80008e8:	f88d 5009 	strb.w	r5, [sp, #9]
		if(size-- > 0){
 80008ec:	b2f6      	uxtb	r6, r6
		if(size-- > 0){
 80008ee:	2e00      	cmp	r6, #0
 80008f0:	d0b1      	beq.n	8000856 <HAL_I2C_ListenCpltCallback+0x76>
			time.Hours = msg.data[i];
 80008f2:	ad10      	add	r5, sp, #64	; 0x40
 80008f4:	442c      	add	r4, r5
		if(size-- > 0){
 80008f6:	3e01      	subs	r6, #1
			time.Hours = msg.data[i];
 80008f8:	f814 4c21 	ldrb.w	r4, [r4, #-33]
 80008fc:	f88d 4008 	strb.w	r4, [sp, #8]
		if(size-- > 0){
 8000900:	b2f6      	uxtb	r6, r6
		if(size-- > 0){
 8000902:	2e00      	cmp	r6, #0
 8000904:	d1da      	bne.n	80008bc <HAL_I2C_ListenCpltCallback+0xdc>
 8000906:	e7a6      	b.n	8000856 <HAL_I2C_ListenCpltCallback+0x76>
	switch (msg.data[0]) {
 8000908:	2305      	movs	r3, #5
 800090a:	2204      	movs	r2, #4
 800090c:	2103      	movs	r1, #3
 800090e:	2002      	movs	r0, #2
 8000910:	2401      	movs	r4, #1
		if(size-- > 0){
 8000912:	2e00      	cmp	r6, #0
 8000914:	d1ed      	bne.n	80008f2 <HAL_I2C_ListenCpltCallback+0x112>
 8000916:	e79e      	b.n	8000856 <HAL_I2C_ListenCpltCallback+0x76>
		if(size-- > 0){
 8000918:	2e00      	cmp	r6, #0
 800091a:	d09c      	beq.n	8000856 <HAL_I2C_ListenCpltCallback+0x76>
			time.SecondFraction = 0;
 800091c:	2200      	movs	r2, #0
			time.Seconds = msg.data[i];
 800091e:	f89d 3020 	ldrb.w	r3, [sp, #32]
			time.SecondFraction = 0;
 8000922:	9204      	str	r2, [sp, #16]
			time.Seconds = msg.data[i];
 8000924:	4626      	mov	r6, r4
 8000926:	f88d 300a 	strb.w	r3, [sp, #10]
 800092a:	2206      	movs	r2, #6
 800092c:	2307      	movs	r3, #7
 800092e:	2105      	movs	r1, #5
 8000930:	2004      	movs	r0, #4
 8000932:	2403      	movs	r4, #3
 8000934:	2502      	movs	r5, #2
		if(size-- > 0){
 8000936:	2e00      	cmp	r6, #0
 8000938:	d1d1      	bne.n	80008de <HAL_I2C_ListenCpltCallback+0xfe>
 800093a:	e78c      	b.n	8000856 <HAL_I2C_ListenCpltCallback+0x76>
 800093c:	20000098 	.word	0x20000098
 8000940:	20000154 	.word	0x20000154
 8000944:	20000178 	.word	0x20000178
 8000948:	200001b0 	.word	0x200001b0

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	2400      	movs	r4, #0
{
 8000950:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000956:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800095a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8000962:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4a21      	ldr	r2, [pc, #132]	; (80009ec <SystemClock_Config+0xa0>)
 8000968:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096a:	9403      	str	r4, [sp, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800096c:	9408      	str	r4, [sp, #32]
 800096e:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000970:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000978:	6411      	str	r1, [r2, #64]	; 0x40
 800097a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800097c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000980:	9201      	str	r2, [sp, #4]
 8000982:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000984:	9402      	str	r4, [sp, #8]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000990:	9415      	str	r4, [sp, #84]	; 0x54
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000992:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000996:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800099c:	210a      	movs	r1, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800099e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009a0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a2:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a4:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009a6:	910e      	str	r1, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009aa:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80009ae:	2264      	movs	r2, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009b0:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b2:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b4:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLN = 100;
 80009b6:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b8:	e9cd 5318 	strd	r5, r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f002 f9b2 	bl	8002d24 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009c6:	2103      	movs	r1, #3
 80009c8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009cc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ce:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d4:	f002 fc4e 	bl	8003274 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009d8:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009dc:	a808      	add	r0, sp, #32
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009de:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009e0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e2:	f002 fd6f 	bl	80034c4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80009e6:	b01b      	add	sp, #108	; 0x6c
 80009e8:	bd30      	pop	{r4, r5, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40007000 	.word	0x40007000

080009f4 <main>:
{
 80009f4:	b508      	push	{r3, lr}
  HAL_Init();
 80009f6:	f000 f955 	bl	8000ca4 <HAL_Init>
  SystemClock_Config();
 80009fa:	f7ff ffa7 	bl	800094c <SystemClock_Config>
  MX_GPIO_Init();
 80009fe:	f7ff fd8f 	bl	8000520 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a02:	f7ff fd69 	bl	80004d8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a06:	f7ff fde1 	bl	80005cc <MX_I2C1_Init>
  MX_RTC_Init();
 8000a0a:	f000 f80d 	bl	8000a28 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000a0e:	f000 f8a9 	bl	8000b64 <MX_USART2_UART_Init>
	HAL_I2C_EnableListen_IT(&hi2c1);
 8000a12:	4802      	ldr	r0, [pc, #8]	; (8000a1c <main+0x28>)
 8000a14:	f001 f900 	bl	8001c18 <HAL_I2C_EnableListen_IT>
 8000a18:	e7fe      	b.n	8000a18 <main+0x24>
 8000a1a:	bf00      	nop
 8000a1c:	20000098 	.word	0x20000098

08000a20 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	 /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <assert_failed>:
	 /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	 UNUSED(file);
	 UNUSED(line);
  /* USER CODE END 6 */
}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a28:	b510      	push	{r4, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <MX_RTC_Init+0x70>)
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_RTC_Init+0x74>)
 8000a2e:	6013      	str	r3, [r2, #0]
{
 8000a30:	b086      	sub	sp, #24
  RTC_TimeTypeDef sTime = {0};
 8000a32:	2300      	movs	r3, #0
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8000a34:	247f      	movs	r4, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
 8000a36:	21ff      	movs	r1, #255	; 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a38:	4610      	mov	r0, r2
  hrtc.Init.SynchPrediv = 255;
 8000a3a:	e9c2 4102 	strd	r4, r1, [r2, #8]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a3e:	6053      	str	r3, [r2, #4]
  RTC_DateTypeDef sDate = {0};
 8000a40:	e9cd 3300 	strd	r3, r3, [sp]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a44:	e9c2 3304 	strd	r3, r3, [r2, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a48:	6193      	str	r3, [r2, #24]
  RTC_TimeTypeDef sTime = {0};
 8000a4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000a4e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a52:	f002 fe53 	bl	80036fc <HAL_RTC_Init>
 8000a56:	b9e0      	cbnz	r0, 8000a92 <MX_RTC_Init+0x6a>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a58:	2300      	movs	r3, #0
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a5a:	a901      	add	r1, sp, #4
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <MX_RTC_Init+0x70>)
  sTime.Hours = 0x0;
 8000a60:	f8ad 3004 	strh.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8000a64:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a68:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a6c:	f002 fefc 	bl	8003868 <HAL_RTC_SetTime>
 8000a70:	b960      	cbnz	r0, 8000a8c <MX_RTC_Init+0x64>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a72:	a906      	add	r1, sp, #24
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_RTC_Init+0x78>)
 8000a76:	f841 3d18 	str.w	r3, [r1, #-24]!
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_RTC_Init+0x70>)
 8000a7e:	f003 f891 	bl	8003ba4 <HAL_RTC_SetDate>
 8000a82:	b108      	cbz	r0, 8000a88 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000a84:	f7ff ffcc 	bl	8000a20 <Error_Handler>
  }

}
 8000a88:	b006      	add	sp, #24
 8000a8a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a8c:	f7ff ffc8 	bl	8000a20 <Error_Handler>
 8000a90:	e7ef      	b.n	8000a72 <MX_RTC_Init+0x4a>
    Error_Handler();
 8000a92:	f7ff ffc5 	bl	8000a20 <Error_Handler>
 8000a96:	e7df      	b.n	8000a58 <MX_RTC_Init+0x30>
 8000a98:	200001b0 	.word	0x200001b0
 8000a9c:	40002800 	.word	0x40002800
 8000aa0:	00010101 	.word	0x00010101

08000aa4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8000aa4:	6802      	ldr	r2, [r0, #0]
 8000aa6:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_RTC_MspInit+0x10>)
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d102      	bne.n	8000ab2 <HAL_RTC_MspInit+0xe>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000aac:	4b02      	ldr	r3, [pc, #8]	; (8000ab8 <HAL_RTC_MspInit+0x14>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000ab2:	4770      	bx	lr
 8000ab4:	40002800 	.word	0x40002800
 8000ab8:	42470e3c 	.word	0x42470e3c

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_MspInit+0x34>)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	9100      	str	r1, [sp, #0]
 8000ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000aca:	645a      	str	r2, [r3, #68]	; 0x44
 8000acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ace:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ad2:	9200      	str	r2, [sp, #0]
 8000ad4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	9101      	str	r1, [sp, #4]
 8000ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ada:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ade:	641a      	str	r2, [r3, #64]	; 0x40
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	b002      	add	sp, #8
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	e7fe      	b.n	8000af8 <HardFault_Handler>
 8000afa:	bf00      	nop

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler>
 8000afe:	bf00      	nop

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	e7fe      	b.n	8000b00 <BusFault_Handler>
 8000b02:	bf00      	nop

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler>
 8000b06:	bf00      	nop

08000b08 <SVC_Handler>:
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <DebugMon_Handler>:
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <PendSV_Handler>:
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 b8e0 	b.w	8000cd8 <HAL_IncTick>

08000b18 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000b18:	4801      	ldr	r0, [pc, #4]	; (8000b20 <DMA1_Stream0_IRQHandler+0x8>)
 8000b1a:	f000 bb5d 	b.w	80011d8 <HAL_DMA_IRQHandler>
 8000b1e:	bf00      	nop
 8000b20:	200000ec 	.word	0x200000ec

08000b24 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000b24:	4801      	ldr	r0, [pc, #4]	; (8000b2c <DMA1_Stream1_IRQHandler+0x8>)
 8000b26:	f000 bb57 	b.w	80011d8 <HAL_DMA_IRQHandler>
 8000b2a:	bf00      	nop
 8000b2c:	20000038 	.word	0x20000038

08000b30 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b30:	4801      	ldr	r0, [pc, #4]	; (8000b38 <I2C1_EV_IRQHandler+0x8>)
 8000b32:	f001 ba1d 	b.w	8001f70 <HAL_I2C_EV_IRQHandler>
 8000b36:	bf00      	nop
 8000b38:	20000098 	.word	0x20000098

08000b3c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b3c:	4801      	ldr	r0, [pc, #4]	; (8000b44 <I2C1_ER_IRQHandler+0x8>)
 8000b3e:	f001 bf7d 	b.w	8002a3c <HAL_I2C_ER_IRQHandler>
 8000b42:	bf00      	nop
 8000b44:	20000098 	.word	0x20000098

08000b48 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SystemInit+0x18>)
 8000b4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b52:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b5a:	6099      	str	r1, [r3, #8]
#endif
}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART2_UART_Init+0x30>)
 8000b66:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <MX_USART2_UART_Init+0x34>)
{
 8000b68:	b510      	push	{r4, lr}
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6a:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 8000b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b6e:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	2200      	movs	r2, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b74:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 8000b76:	605c      	str	r4, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b7a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b84:	f003 f964 	bl	8003e50 <HAL_UART_Init>
 8000b88:	b900      	cbnz	r0, 8000b8c <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 8000b8a:	bd10      	pop	{r4, pc}
 8000b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000b90:	f7ff bf46 	b.w	8000a20 <Error_Handler>
 8000b94:	200001d0 	.word	0x200001d0
 8000b98:	40004400 	.word	0x40004400

08000b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b9c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8000b9e:	6801      	ldr	r1, [r0, #0]
 8000ba0:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <HAL_UART_MspInit+0x64>)
{
 8000ba2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART2)
 8000ba6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000bac:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000bb0:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000bb2:	d001      	beq.n	8000bb8 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bb4:	b008      	add	sp, #32
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb8:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	4810      	ldr	r0, [pc, #64]	; (8000c04 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8000bc6:	6411      	str	r1, [r2, #64]	; 0x40
 8000bc8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000bca:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8000bce:	9101      	str	r1, [sp, #4]
 8000bd0:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bea:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f000 fbca 	bl	8001390 <HAL_GPIO_Init>
}
 8000bfc:	b008      	add	sp, #32
 8000bfe:	bd70      	pop	{r4, r5, r6, pc}
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40020000 	.word	0x40020000

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c0e:	e003      	b.n	8000c18 <LoopCopyDataInit>

08000c10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c16:	3104      	adds	r1, #4

08000c18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c18:	480b      	ldr	r0, [pc, #44]	; (8000c48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c20:	d3f6      	bcc.n	8000c10 <CopyDataInit>
  ldr  r2, =_sbss
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c24:	e002      	b.n	8000c2c <LoopFillZerobss>

08000c26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c28:	f842 3b04 	str.w	r3, [r2], #4

08000c2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c30:	d3f9      	bcc.n	8000c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c32:	f7ff ff89 	bl	8000b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c36:	f003 fa33 	bl	80040a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fedb 	bl	80009f4 <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c44:	08004328 	.word	0x08004328
  ldr  r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c4c:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000c50:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000c54:	20000214 	.word	0x20000214

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <HAL_InitTick+0x3c>)
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_InitTick+0x40>)
 8000c62:	7812      	ldrb	r2, [r2, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
{
 8000c66:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6c:	fbb0 f0f2 	udiv	r0, r0, r2
 8000c70:	fbb3 f0f0 	udiv	r0, r3, r0
 8000c74:	f000 f8b8 	bl	8000de8 <HAL_SYSTICK_Config>
 8000c78:	b908      	cbnz	r0, 8000c7e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	2d0f      	cmp	r5, #15
 8000c7c:	d901      	bls.n	8000c82 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000c7e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c80:	bd38      	pop	{r3, r4, r5, pc}
 8000c82:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	4602      	mov	r2, r0
 8000c86:	4629      	mov	r1, r5
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 f852 	bl	8000d34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_InitTick+0x44>)
 8000c92:	4620      	mov	r0, r4
 8000c94:	601d      	str	r5, [r3, #0]
}
 8000c96:	bd38      	pop	{r3, r4, r5, pc}
 8000c98:	20000010 	.word	0x20000010
 8000c9c:	2000000c 	.word	0x2000000c
 8000ca0:	20000014 	.word	0x20000014

08000ca4 <HAL_Init>:
{
 8000ca4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_Init+0x30>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cb6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cbe:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f81b 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff ffc8 	bl	8000c5c <HAL_InitTick>
  HAL_MspInit();
 8000ccc:	f7ff fef6 	bl	8000abc <HAL_MspInit>
}
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	bd08      	pop	{r3, pc}
 8000cd4:	40023c00 	.word	0x40023c00

08000cd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000cd8:	4a03      	ldr	r2, [pc, #12]	; (8000ce8 <HAL_IncTick+0x10>)
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <HAL_IncTick+0x14>)
 8000cdc:	6811      	ldr	r1, [r2, #0]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	440b      	add	r3, r1
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000210 	.word	0x20000210
 8000cec:	20000010 	.word	0x20000010

08000cf0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cf0:	4b01      	ldr	r3, [pc, #4]	; (8000cf8 <HAL_GetTick+0x8>)
 8000cf2:	6818      	ldr	r0, [r3, #0]
}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000210 	.word	0x20000210

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000cfc:	1ec3      	subs	r3, r0, #3
 8000cfe:	2b04      	cmp	r3, #4
{
 8000d00:	b510      	push	{r4, lr}
 8000d02:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000d04:	d903      	bls.n	8000d0e <HAL_NVIC_SetPriorityGrouping+0x12>
 8000d06:	2192      	movs	r1, #146	; 0x92
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <HAL_NVIC_SetPriorityGrouping+0x30>)
 8000d0a:	f7ff fe8b 	bl	8000a24 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000d10:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000d16:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	0224      	lsls	r4, r4, #8
 8000d1a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d1e:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
 8000d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000d26:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8000d28:	60d4      	str	r4, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d2a:	bd10      	pop	{r4, pc}
 8000d2c:	08004140 	.word	0x08004140
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000d34:	2a0f      	cmp	r2, #15
{ 
 8000d36:	b570      	push	{r4, r5, r6, lr}
 8000d38:	4616      	mov	r6, r2
 8000d3a:	4605      	mov	r5, r0
 8000d3c:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000d3e:	d834      	bhi.n	8000daa <HAL_NVIC_SetPriority+0x76>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000d40:	2c0f      	cmp	r4, #15
 8000d42:	d82d      	bhi.n	8000da0 <HAL_NVIC_SetPriority+0x6c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_NVIC_SetPriority+0x80>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	f1c3 0107 	rsb	r1, r3, #7
 8000d50:	2904      	cmp	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d56:	bf28      	it	cs
 8000d58:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	2a06      	cmp	r2, #6
 8000d5c:	d917      	bls.n	8000d8e <HAL_NVIC_SetPriority+0x5a>
 8000d5e:	3b03      	subs	r3, #3
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d64:	409a      	lsls	r2, r3
 8000d66:	ea26 0602 	bic.w	r6, r6, r2

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d6e:	408a      	lsls	r2, r1
 8000d70:	ea24 0202 	bic.w	r2, r4, r2
 8000d74:	409a      	lsls	r2, r3
 8000d76:	4332      	orrs	r2, r6
 8000d78:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	db09      	blt.n	8000d94 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8000d84:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8000d88:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d8c:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	2600      	movs	r6, #0
 8000d90:	4633      	mov	r3, r6
 8000d92:	e7ea      	b.n	8000d6a <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_NVIC_SetPriority+0x84>)
 8000d96:	f005 050f 	and.w	r5, r5, #15
 8000d9a:	442b      	add	r3, r5
 8000d9c:	761a      	strb	r2, [r3, #24]
 8000d9e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000da0:	21ab      	movs	r1, #171	; 0xab
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <HAL_NVIC_SetPriority+0x88>)
 8000da4:	f7ff fe3e 	bl	8000a24 <assert_failed>
 8000da8:	e7cc      	b.n	8000d44 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000daa:	21aa      	movs	r1, #170	; 0xaa
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <HAL_NVIC_SetPriority+0x88>)
 8000dae:	f7ff fe39 	bl	8000a24 <assert_failed>
 8000db2:	e7c5      	b.n	8000d40 <HAL_NVIC_SetPriority+0xc>
 8000db4:	e000ed00 	.word	0xe000ed00
 8000db8:	e000ecfc 	.word	0xe000ecfc
 8000dbc:	08004140 	.word	0x08004140

08000dc0 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	db08      	blt.n	8000dd6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc4:	f000 011f 	and.w	r1, r0, #31
 8000dc8:	2301      	movs	r3, #1
 8000dca:	0940      	lsrs	r0, r0, #5
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_NVIC_EnableIRQ+0x20>)
 8000dce:	408b      	lsls	r3, r1
 8000dd0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000dd4:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000dd6:	21be      	movs	r1, #190	; 0xbe
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <HAL_NVIC_EnableIRQ+0x24>)
 8000dda:	f7ff be23 	b.w	8000a24 <assert_failed>
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	08004140 	.word	0x08004140

08000de8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	3801      	subs	r0, #1
 8000dea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000dee:	d20e      	bcs.n	8000e0e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	4c08      	ldr	r4, [pc, #32]	; (8000e18 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	20f0      	movs	r0, #240	; 0xf0
 8000dfa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfe:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e00:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e02:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e0c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e0e:	2001      	movs	r0, #1
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff ff66 	bl	8000cf0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	f000 80e4 	beq.w	8000ff2 <HAL_DMA_Init+0x1d6>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	4ab1      	ldr	r2, [pc, #708]	; (80010f4 <HAL_DMA_Init+0x2d8>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	4605      	mov	r5, r0
 8000e32:	d031      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e34:	3218      	adds	r2, #24
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d02e      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e3a:	3218      	adds	r2, #24
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d02b      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e40:	3218      	adds	r2, #24
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d028      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e46:	3218      	adds	r2, #24
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d025      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e4c:	3218      	adds	r2, #24
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d022      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e52:	3218      	adds	r2, #24
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d01f      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e58:	3218      	adds	r2, #24
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d01c      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e5e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d018      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e66:	3218      	adds	r2, #24
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d015      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e6c:	3218      	adds	r2, #24
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d012      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e72:	3218      	adds	r2, #24
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d00f      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e78:	3218      	adds	r2, #24
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00c      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e7e:	3218      	adds	r2, #24
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d009      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e84:	3218      	adds	r2, #24
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d006      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e8a:	3218      	adds	r2, #24
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d003      	beq.n	8000e98 <HAL_DMA_Init+0x7c>
 8000e90:	21b8      	movs	r1, #184	; 0xb8
 8000e92:	4899      	ldr	r0, [pc, #612]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 8000e94:	f7ff fdc6 	bl	8000a24 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8000e98:	6863      	ldr	r3, [r4, #4]
 8000e9a:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 8000e9e:	d006      	beq.n	8000eae <HAL_DMA_Init+0x92>
 8000ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ea4:	d003      	beq.n	8000eae <HAL_DMA_Init+0x92>
 8000ea6:	21b9      	movs	r1, #185	; 0xb9
 8000ea8:	4893      	ldr	r0, [pc, #588]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 8000eaa:	f7ff fdbb 	bl	8000a24 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8000eae:	68a3      	ldr	r3, [r4, #8]
 8000eb0:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8000eb4:	d002      	beq.n	8000ebc <HAL_DMA_Init+0xa0>
 8000eb6:	2b80      	cmp	r3, #128	; 0x80
 8000eb8:	f040 80cb 	bne.w	8001052 <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8000ebc:	68e3      	ldr	r3, [r4, #12]
 8000ebe:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8000ec2:	f040 80a2 	bne.w	800100a <HAL_DMA_Init+0x1ee>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8000ec6:	6923      	ldr	r3, [r4, #16]
 8000ec8:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8000ecc:	f040 8093 	bne.w	8000ff6 <HAL_DMA_Init+0x1da>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8000ed0:	6963      	ldr	r3, [r4, #20]
 8000ed2:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8000ed6:	d003      	beq.n	8000ee0 <HAL_DMA_Init+0xc4>
 8000ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000edc:	f040 80c3 	bne.w	8001066 <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8000ee0:	69a3      	ldr	r3, [r4, #24]
 8000ee2:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8000ee6:	d003      	beq.n	8000ef0 <HAL_DMA_Init+0xd4>
 8000ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000eec:	f040 80a7 	bne.w	800103e <HAL_DMA_Init+0x222>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8000ef0:	69e3      	ldr	r3, [r4, #28]
 8000ef2:	f033 0220 	bics.w	r2, r3, #32
 8000ef6:	d006      	beq.n	8000f06 <HAL_DMA_Init+0xea>
 8000ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000efc:	d003      	beq.n	8000f06 <HAL_DMA_Init+0xea>
 8000efe:	21bf      	movs	r1, #191	; 0xbf
 8000f00:	487d      	ldr	r0, [pc, #500]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 8000f02:	f7ff fd8f 	bl	8000a24 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8000f06:	6a23      	ldr	r3, [r4, #32]
 8000f08:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8000f0c:	d003      	beq.n	8000f16 <HAL_DMA_Init+0xfa>
 8000f0e:	21c0      	movs	r1, #192	; 0xc0
 8000f10:	4879      	ldr	r0, [pc, #484]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 8000f12:	f7ff fd87 	bl	8000a24 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8000f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d14d      	bne.n	8000fb8 <HAL_DMA_Init+0x19c>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f1c:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f1e:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f20:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000f24:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8000f26:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8000f28:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8000f2c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000f30:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f32:	e005      	b.n	8000f40 <HAL_DMA_Init+0x124>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f34:	f7ff fedc 	bl	8000cf0 <HAL_GetTick>
 8000f38:	1b40      	subs	r0, r0, r5
 8000f3a:	2805      	cmp	r0, #5
 8000f3c:	d852      	bhi.n	8000fe4 <HAL_DMA_Init+0x1c8>
 8000f3e:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	07d1      	lsls	r1, r2, #31
 8000f44:	d4f6      	bmi.n	8000f34 <HAL_DMA_Init+0x118>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f46:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f4a:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f4e:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f50:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 8000f52:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f54:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f56:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f5e:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f60:	4866      	ldr	r0, [pc, #408]	; (80010fc <HAL_DMA_Init+0x2e0>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f62:	4332      	orrs	r2, r6
 8000f64:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f66:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f68:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f6a:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f6c:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f6e:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f72:	f000 8082 	beq.w	800107a <HAL_DMA_Init+0x25e>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f78:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f7a:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f7e:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	485f      	ldr	r0, [pc, #380]	; (8001100 <HAL_DMA_Init+0x2e4>)
  hdma->Instance->FCR = tmp;
 8000f84:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f86:	3a10      	subs	r2, #16
 8000f88:	fba0 1202 	umull	r1, r2, r0, r2
 8000f8c:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f8e:	495d      	ldr	r1, [pc, #372]	; (8001104 <HAL_DMA_Init+0x2e8>)
 8000f90:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f94:	5c89      	ldrb	r1, [r1, r2]
 8000f96:	65e1      	str	r1, [r4, #92]	; 0x5c
 8000f98:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 8000f9c:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f9e:	bf88      	it	hi
 8000fa0:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fa2:	223f      	movs	r2, #63	; 0x3f
 8000fa4:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8000fa6:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa8:	2100      	movs	r1, #0
 8000faa:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8000fac:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fae:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb0:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000fb2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8000fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d130      	bne.n	800101e <HAL_DMA_Init+0x202>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8000fbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d838      	bhi.n	8001034 <HAL_DMA_Init+0x218>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8000fc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fc4:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8000fc8:	d003      	beq.n	8000fd2 <HAL_DMA_Init+0x1b6>
 8000fca:	21c7      	movs	r1, #199	; 0xc7
 8000fcc:	484a      	ldr	r0, [pc, #296]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 8000fce:	f7ff fd29 	bl	8000a24 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8000fd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fd4:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8000fd8:	d0a0      	beq.n	8000f1c <HAL_DMA_Init+0x100>
 8000fda:	21c8      	movs	r1, #200	; 0xc8
 8000fdc:	4846      	ldr	r0, [pc, #280]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 8000fde:	f7ff fd21 	bl	8000a24 <assert_failed>
 8000fe2:	e79b      	b.n	8000f1c <HAL_DMA_Init+0x100>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000fea:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000ff2:	2001      	movs	r0, #1
}
 8000ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8000ff6:	21bc      	movs	r1, #188	; 0xbc
 8000ff8:	483f      	ldr	r0, [pc, #252]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 8000ffa:	f7ff fd13 	bl	8000a24 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8000ffe:	6963      	ldr	r3, [r4, #20]
 8001000:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8001004:	f43f af6c 	beq.w	8000ee0 <HAL_DMA_Init+0xc4>
 8001008:	e766      	b.n	8000ed8 <HAL_DMA_Init+0xbc>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800100a:	21bb      	movs	r1, #187	; 0xbb
 800100c:	483a      	ldr	r0, [pc, #232]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 800100e:	f7ff fd09 	bl	8000a24 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001012:	6923      	ldr	r3, [r4, #16]
 8001014:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8001018:	f43f af5a 	beq.w	8000ed0 <HAL_DMA_Init+0xb4>
 800101c:	e7eb      	b.n	8000ff6 <HAL_DMA_Init+0x1da>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800101e:	21c1      	movs	r1, #193	; 0xc1
 8001020:	4835      	ldr	r0, [pc, #212]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 8001022:	f7ff fcff 	bl	8000a24 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001028:	2b00      	cmp	r3, #0
 800102a:	f43f af77 	beq.w	8000f1c <HAL_DMA_Init+0x100>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800102e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001030:	2b03      	cmp	r3, #3
 8001032:	d9c6      	bls.n	8000fc2 <HAL_DMA_Init+0x1a6>
 8001034:	21c6      	movs	r1, #198	; 0xc6
 8001036:	4830      	ldr	r0, [pc, #192]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 8001038:	f7ff fcf4 	bl	8000a24 <assert_failed>
 800103c:	e7c1      	b.n	8000fc2 <HAL_DMA_Init+0x1a6>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800103e:	21be      	movs	r1, #190	; 0xbe
 8001040:	482d      	ldr	r0, [pc, #180]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 8001042:	f7ff fcef 	bl	8000a24 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001046:	69e3      	ldr	r3, [r4, #28]
 8001048:	f033 0220 	bics.w	r2, r3, #32
 800104c:	f43f af5b 	beq.w	8000f06 <HAL_DMA_Init+0xea>
 8001050:	e752      	b.n	8000ef8 <HAL_DMA_Init+0xdc>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001052:	21ba      	movs	r1, #186	; 0xba
 8001054:	4828      	ldr	r0, [pc, #160]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 8001056:	f7ff fce5 	bl	8000a24 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800105a:	68e3      	ldr	r3, [r4, #12]
 800105c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8001060:	f43f af31 	beq.w	8000ec6 <HAL_DMA_Init+0xaa>
 8001064:	e7d1      	b.n	800100a <HAL_DMA_Init+0x1ee>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001066:	21bd      	movs	r1, #189	; 0xbd
 8001068:	4823      	ldr	r0, [pc, #140]	; (80010f8 <HAL_DMA_Init+0x2dc>)
 800106a:	f7ff fcdb 	bl	8000a24 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800106e:	69a3      	ldr	r3, [r4, #24]
 8001070:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8001074:	f43f af3c 	beq.w	8000ef0 <HAL_DMA_Init+0xd4>
 8001078:	e736      	b.n	8000ee8 <HAL_DMA_Init+0xcc>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800107a:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 800107e:	4301      	orrs	r1, r0
 8001080:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 8001082:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8001084:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001086:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8001088:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800108c:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001090:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001092:	2800      	cmp	r0, #0
 8001094:	f43f af74 	beq.w	8000f80 <HAL_DMA_Init+0x164>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001098:	b18e      	cbz	r6, 80010be <HAL_DMA_Init+0x2a2>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800109a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800109e:	d01a      	beq.n	80010d6 <HAL_DMA_Init+0x2ba>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80010a0:	2d02      	cmp	r5, #2
 80010a2:	d905      	bls.n	80010b0 <HAL_DMA_Init+0x294>
 80010a4:	2d03      	cmp	r5, #3
 80010a6:	f47f af6b 	bne.w	8000f80 <HAL_DMA_Init+0x164>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80010aa:	01c2      	lsls	r2, r0, #7
 80010ac:	f57f af68 	bpl.w	8000f80 <HAL_DMA_Init+0x164>
        hdma->State = HAL_DMA_STATE_READY;
 80010b0:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010b2:	2240      	movs	r2, #64	; 0x40
 80010b4:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 80010b6:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 80010b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80010bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 80010be:	2d01      	cmp	r5, #1
 80010c0:	d004      	beq.n	80010cc <HAL_DMA_Init+0x2b0>
 80010c2:	d3f2      	bcc.n	80010aa <HAL_DMA_Init+0x28e>
 80010c4:	2d02      	cmp	r5, #2
 80010c6:	f47f af5b 	bne.w	8000f80 <HAL_DMA_Init+0x164>
 80010ca:	e7ee      	b.n	80010aa <HAL_DMA_Init+0x28e>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80010cc:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80010d0:	f47f af56 	bne.w	8000f80 <HAL_DMA_Init+0x164>
 80010d4:	e7ec      	b.n	80010b0 <HAL_DMA_Init+0x294>
    switch (tmp)
 80010d6:	2d03      	cmp	r5, #3
 80010d8:	f63f af52 	bhi.w	8000f80 <HAL_DMA_Init+0x164>
 80010dc:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <HAL_DMA_Init+0x2c8>)
 80010de:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 80010e2:	bf00      	nop
 80010e4:	080010b1 	.word	0x080010b1
 80010e8:	080010ab 	.word	0x080010ab
 80010ec:	080010b1 	.word	0x080010b1
 80010f0:	080010cd 	.word	0x080010cd
 80010f4:	40026010 	.word	0x40026010
 80010f8:	0800417c 	.word	0x0800417c
 80010fc:	f010803f 	.word	0xf010803f
 8001100:	aaaaaaab 	.word	0xaaaaaaab
 8001104:	080041b4 	.word	0x080041b4

08001108 <HAL_DMA_Start_IT>:
{
 8001108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800110c:	4604      	mov	r4, r0
 800110e:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001110:	1e58      	subs	r0, r3, #1
 8001112:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001116:	4298      	cmp	r0, r3
{
 8001118:	460f      	mov	r7, r1
 800111a:	4690      	mov	r8, r2
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800111c:	6da6      	ldr	r6, [r4, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800111e:	d83a      	bhi.n	8001196 <HAL_DMA_Start_IT+0x8e>
  __HAL_LOCK(hdma);
 8001120:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001124:	2b01      	cmp	r3, #1
 8001126:	d03f      	beq.n	80011a8 <HAL_DMA_Start_IT+0xa0>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001128:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  __HAL_LOCK(hdma);
 800112c:	2201      	movs	r2, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800112e:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8001130:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001134:	d129      	bne.n	800118a <HAL_DMA_Start_IT+0x82>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001136:	6821      	ldr	r1, [r4, #0]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001138:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    hdma->State = HAL_DMA_STATE_BUSY;
 800113a:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800113c:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800113e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001142:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001144:	680b      	ldr	r3, [r1, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001146:	68a2      	ldr	r2, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114c:	600b      	str	r3, [r1, #0]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800114e:	233f      	movs	r3, #63	; 0x3f
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001150:	2a40      	cmp	r2, #64	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001152:	fa03 f300 	lsl.w	r3, r3, r0
  hdma->Instance->NDTR = DataLength;
 8001156:	604d      	str	r5, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001158:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->PAR = DstAddress;
 800115a:	bf0b      	itete	eq
 800115c:	f8c1 8008 	streq.w	r8, [r1, #8]
    hdma->Instance->PAR = SrcAddress;
 8001160:	608f      	strne	r7, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001162:	60cf      	streq	r7, [r1, #12]
    hdma->Instance->M0AR = DstAddress;
 8001164:	f8c1 800c 	strne.w	r8, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001168:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800116a:	680b      	ldr	r3, [r1, #0]
 800116c:	f043 0316 	orr.w	r3, r3, #22
 8001170:	600b      	str	r3, [r1, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001172:	b11a      	cbz	r2, 800117c <HAL_DMA_Start_IT+0x74>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001174:	680b      	ldr	r3, [r1, #0]
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 800117c:	680b      	ldr	r3, [r1, #0]
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001184:	2000      	movs	r0, #0
}
 8001186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma);	  
 800118a:	2300      	movs	r3, #0
 800118c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001190:	2002      	movs	r0, #2
}
 8001192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001196:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_DMA_Start_IT+0xa8>)
 800119c:	f7ff fc42 	bl	8000a24 <assert_failed>
  __HAL_LOCK(hdma);
 80011a0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d1bf      	bne.n	8001128 <HAL_DMA_Start_IT+0x20>
 80011a8:	2002      	movs	r0, #2
}
 80011aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011ae:	bf00      	nop
 80011b0:	0800417c 	.word	0x0800417c

080011b4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d003      	beq.n	80011c4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
 80011c2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80011c4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c6:	2305      	movs	r3, #5
 80011c8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80011cc:	6813      	ldr	r3, [r2, #0]
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80011d4:	2000      	movs	r0, #0
}
 80011d6:	4770      	bx	lr

080011d8 <HAL_DMA_IRQHandler>:
{
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011da:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80011dc:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011de:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 80011e0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011e2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80011e4:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011e6:	4965      	ldr	r1, [pc, #404]	; (800137c <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011e8:	2208      	movs	r2, #8
 80011ea:	409a      	lsls	r2, r3
 80011ec:	422a      	tst	r2, r5
{
 80011ee:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80011f0:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011f2:	d003      	beq.n	80011fc <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011f4:	6801      	ldr	r1, [r0, #0]
 80011f6:	6808      	ldr	r0, [r1, #0]
 80011f8:	0740      	lsls	r0, r0, #29
 80011fa:	d459      	bmi.n	80012b0 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011fc:	2201      	movs	r2, #1
 80011fe:	409a      	lsls	r2, r3
 8001200:	422a      	tst	r2, r5
 8001202:	d003      	beq.n	800120c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001204:	6821      	ldr	r1, [r4, #0]
 8001206:	6949      	ldr	r1, [r1, #20]
 8001208:	0608      	lsls	r0, r1, #24
 800120a:	d474      	bmi.n	80012f6 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800120c:	2204      	movs	r2, #4
 800120e:	409a      	lsls	r2, r3
 8001210:	422a      	tst	r2, r5
 8001212:	d003      	beq.n	800121c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001214:	6821      	ldr	r1, [r4, #0]
 8001216:	6809      	ldr	r1, [r1, #0]
 8001218:	0789      	lsls	r1, r1, #30
 800121a:	d466      	bmi.n	80012ea <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800121c:	2210      	movs	r2, #16
 800121e:	409a      	lsls	r2, r3
 8001220:	422a      	tst	r2, r5
 8001222:	d003      	beq.n	800122c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001224:	6821      	ldr	r1, [r4, #0]
 8001226:	6808      	ldr	r0, [r1, #0]
 8001228:	0700      	lsls	r0, r0, #28
 800122a:	d44b      	bmi.n	80012c4 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800122c:	2220      	movs	r2, #32
 800122e:	409a      	lsls	r2, r3
 8001230:	422a      	tst	r2, r5
 8001232:	d014      	beq.n	800125e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001234:	6821      	ldr	r1, [r4, #0]
 8001236:	6808      	ldr	r0, [r1, #0]
 8001238:	06c0      	lsls	r0, r0, #27
 800123a:	d510      	bpl.n	800125e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800123c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800123e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001242:	2a05      	cmp	r2, #5
 8001244:	d063      	beq.n	800130e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001246:	680b      	ldr	r3, [r1, #0]
 8001248:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800124c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800124e:	d07e      	beq.n	800134e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001250:	0319      	lsls	r1, r3, #12
 8001252:	f140 8089 	bpl.w	8001368 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001256:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001258:	b10b      	cbz	r3, 800125e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800125a:	4620      	mov	r0, r4
 800125c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800125e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001260:	b323      	cbz	r3, 80012ac <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001262:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001264:	07da      	lsls	r2, r3, #31
 8001266:	d51a      	bpl.n	800129e <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001268:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800126a:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800126c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001270:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001272:	4943      	ldr	r1, [pc, #268]	; (8001380 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 8001274:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001278:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 800127c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800127e:	0ab6      	lsrs	r6, r6, #10
 8001280:	e002      	b.n	8001288 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001282:	6813      	ldr	r3, [r2, #0]
 8001284:	07db      	lsls	r3, r3, #31
 8001286:	d504      	bpl.n	8001292 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001288:	9b01      	ldr	r3, [sp, #4]
 800128a:	3301      	adds	r3, #1
 800128c:	42b3      	cmp	r3, r6
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	d9f7      	bls.n	8001282 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8001292:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001294:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8001296:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800129a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800129e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012a0:	b123      	cbz	r3, 80012ac <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 80012a2:	4620      	mov	r0, r4
}
 80012a4:	b003      	add	sp, #12
 80012a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80012aa:	4718      	bx	r3
}
 80012ac:	b003      	add	sp, #12
 80012ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012b0:	6808      	ldr	r0, [r1, #0]
 80012b2:	f020 0004 	bic.w	r0, r0, #4
 80012b6:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012b8:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80012bc:	f042 0201 	orr.w	r2, r2, #1
 80012c0:	6562      	str	r2, [r4, #84]	; 0x54
 80012c2:	e79b      	b.n	80011fc <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012c4:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012c6:	680a      	ldr	r2, [r1, #0]
 80012c8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012cc:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012ce:	d118      	bne.n	8001302 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012d0:	05d2      	lsls	r2, r2, #23
 80012d2:	d403      	bmi.n	80012dc <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d4:	680a      	ldr	r2, [r1, #0]
 80012d6:	f022 0208 	bic.w	r2, r2, #8
 80012da:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80012dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d0a4      	beq.n	800122c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 80012e2:	4620      	mov	r0, r4
 80012e4:	4790      	blx	r2
 80012e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80012e8:	e7a0      	b.n	800122c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012ea:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80012ee:	f042 0204 	orr.w	r2, r2, #4
 80012f2:	6562      	str	r2, [r4, #84]	; 0x54
 80012f4:	e792      	b.n	800121c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012f6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80012fa:	f042 0202 	orr.w	r2, r2, #2
 80012fe:	6562      	str	r2, [r4, #84]	; 0x54
 8001300:	e784      	b.n	800120c <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001302:	0311      	lsls	r1, r2, #12
 8001304:	d5ea      	bpl.n	80012dc <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001306:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001308:	2a00      	cmp	r2, #0
 800130a:	d1ea      	bne.n	80012e2 <HAL_DMA_IRQHandler+0x10a>
 800130c:	e78e      	b.n	800122c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800130e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001310:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001312:	f022 0216 	bic.w	r2, r2, #22
 8001316:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001318:	694a      	ldr	r2, [r1, #20]
 800131a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800131e:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001320:	b338      	cbz	r0, 8001372 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001322:	680a      	ldr	r2, [r1, #0]
 8001324:	f022 0208 	bic.w	r2, r2, #8
 8001328:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132a:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800132c:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8001332:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001334:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001336:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001338:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800133c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001340:	2900      	cmp	r1, #0
 8001342:	d0b3      	beq.n	80012ac <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8001344:	4620      	mov	r0, r4
}
 8001346:	b003      	add	sp, #12
 8001348:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800134c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800134e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001352:	d180      	bne.n	8001256 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001354:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001356:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001358:	f022 0210 	bic.w	r2, r2, #16
 800135c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800135e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001362:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8001366:	e776      	b.n	8001256 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8001368:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800136a:	2b00      	cmp	r3, #0
 800136c:	f47f af75 	bne.w	800125a <HAL_DMA_IRQHandler+0x82>
 8001370:	e775      	b.n	800125e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001372:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001374:	2a00      	cmp	r2, #0
 8001376:	d1d4      	bne.n	8001322 <HAL_DMA_IRQHandler+0x14a>
 8001378:	e7d7      	b.n	800132a <HAL_DMA_IRQHandler+0x152>
 800137a:	bf00      	nop
 800137c:	2000000c 	.word	0x2000000c
 8001380:	1b4e81b5 	.word	0x1b4e81b5

08001384 <HAL_DMA_GetState>:
  return hdma->State;
 8001384:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop

0800138c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800138c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800138e:	4770      	bx	lr

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001394:	4b9b      	ldr	r3, [pc, #620]	; (8001604 <HAL_GPIO_Init+0x274>)
 8001396:	4298      	cmp	r0, r3
{
 8001398:	b083      	sub	sp, #12
 800139a:	4683      	mov	fp, r0
 800139c:	468a      	mov	sl, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800139e:	d017      	beq.n	80013d0 <HAL_GPIO_Init+0x40>
 80013a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013a4:	4298      	cmp	r0, r3
 80013a6:	d013      	beq.n	80013d0 <HAL_GPIO_Init+0x40>
 80013a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013ac:	4298      	cmp	r0, r3
 80013ae:	d00f      	beq.n	80013d0 <HAL_GPIO_Init+0x40>
 80013b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013b4:	4298      	cmp	r0, r3
 80013b6:	d00b      	beq.n	80013d0 <HAL_GPIO_Init+0x40>
 80013b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013bc:	4298      	cmp	r0, r3
 80013be:	d007      	beq.n	80013d0 <HAL_GPIO_Init+0x40>
 80013c0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80013c4:	4298      	cmp	r0, r3
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x40>
 80013c8:	21b3      	movs	r1, #179	; 0xb3
 80013ca:	488f      	ldr	r0, [pc, #572]	; (8001608 <HAL_GPIO_Init+0x278>)
 80013cc:	f7ff fb2a 	bl	8000a24 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80013d0:	f8da 3000 	ldr.w	r3, [sl]
 80013d4:	b299      	uxth	r1, r3
 80013d6:	2900      	cmp	r1, #0
 80013d8:	f000 80b5 	beq.w	8001546 <HAL_GPIO_Init+0x1b6>
 80013dc:	0c1b      	lsrs	r3, r3, #16
 80013de:	041b      	lsls	r3, r3, #16
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f040 80b0 	bne.w	8001546 <HAL_GPIO_Init+0x1b6>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80013e6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d917      	bls.n	800141e <HAL_GPIO_Init+0x8e>
 80013ee:	f1a3 0111 	sub.w	r1, r3, #17
 80013f2:	2901      	cmp	r1, #1
 80013f4:	d913      	bls.n	800141e <HAL_GPIO_Init+0x8e>
 80013f6:	4885      	ldr	r0, [pc, #532]	; (800160c <HAL_GPIO_Init+0x27c>)
 80013f8:	f423 1100 	bic.w	r1, r3, #2097152	; 0x200000
 80013fc:	4281      	cmp	r1, r0
 80013fe:	d00e      	beq.n	800141e <HAL_GPIO_Init+0x8e>
 8001400:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8001404:	4283      	cmp	r3, r0
 8001406:	d00a      	beq.n	800141e <HAL_GPIO_Init+0x8e>
 8001408:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 800140c:	4281      	cmp	r1, r0
 800140e:	d006      	beq.n	800141e <HAL_GPIO_Init+0x8e>
 8001410:	497f      	ldr	r1, [pc, #508]	; (8001610 <HAL_GPIO_Init+0x280>)
 8001412:	428b      	cmp	r3, r1
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x8e>
 8001416:	21b5      	movs	r1, #181	; 0xb5
 8001418:	487b      	ldr	r0, [pc, #492]	; (8001608 <HAL_GPIO_Init+0x278>)
 800141a:	f7ff fb03 	bl	8000a24 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800141e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001422:	2b02      	cmp	r3, #2
 8001424:	f200 80e4 	bhi.w	80015f0 <HAL_GPIO_Init+0x260>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001428:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8001628 <HAL_GPIO_Init+0x298>
{
 800142c:	f04f 0800 	mov.w	r8, #0
 8001430:	e005      	b.n	800143e <HAL_GPIO_Init+0xae>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	f108 0801 	add.w	r8, r8, #1
 8001436:	f1b8 0f10 	cmp.w	r8, #16
 800143a:	f000 8081 	beq.w	8001540 <HAL_GPIO_Init+0x1b0>
    ioposition = 0x01U << position;
 800143e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001440:	f8da 5000 	ldr.w	r5, [sl]
    ioposition = 0x01U << position;
 8001444:	fa04 f408 	lsl.w	r4, r4, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001448:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800144a:	42ac      	cmp	r4, r5
 800144c:	d1f1      	bne.n	8001432 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800144e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001452:	f022 0110 	bic.w	r1, r2, #16
 8001456:	ea4f 0748 	mov.w	r7, r8, lsl #1
 800145a:	2603      	movs	r6, #3
 800145c:	1e4b      	subs	r3, r1, #1
 800145e:	40be      	lsls	r6, r7
 8001460:	2b01      	cmp	r3, #1
 8001462:	ea6f 0606 	mvn.w	r6, r6
 8001466:	d973      	bls.n	8001550 <HAL_GPIO_Init+0x1c0>
      temp = GPIOx->PUPDR;
 8001468:	f8db 000c 	ldr.w	r0, [fp, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146c:	f8da 3008 	ldr.w	r3, [sl, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001470:	4030      	ands	r0, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001472:	40bb      	lsls	r3, r7
 8001474:	4303      	orrs	r3, r0
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001476:	2902      	cmp	r1, #2
      GPIOx->PUPDR = temp;
 8001478:	f8cb 300c 	str.w	r3, [fp, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147c:	d07f      	beq.n	800157e <HAL_GPIO_Init+0x1ee>
      temp = GPIOx->MODER;
 800147e:	f8db 1000 	ldr.w	r1, [fp]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001482:	f002 0303 	and.w	r3, r2, #3
 8001486:	40bb      	lsls	r3, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001488:	400e      	ands	r6, r1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148a:	4333      	orrs	r3, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800148c:	00d7      	lsls	r7, r2, #3
      GPIOx->MODER = temp;
 800148e:	f8cb 3000 	str.w	r3, [fp]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001492:	d5ce      	bpl.n	8001432 <HAL_GPIO_Init+0xa2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001494:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <HAL_GPIO_Init+0x284>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001496:	4c5b      	ldr	r4, [pc, #364]	; (8001604 <HAL_GPIO_Init+0x274>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001498:	2100      	movs	r1, #0
 800149a:	9101      	str	r1, [sp, #4]
 800149c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800149e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80014a2:	6459      	str	r1, [r3, #68]	; 0x44
 80014a4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80014a6:	f028 0303 	bic.w	r3, r8, #3
 80014aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014ae:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80014b2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80014b6:	9101      	str	r1, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b8:	f008 0103 	and.w	r1, r8, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014bc:	9801      	ldr	r0, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80014be:	689e      	ldr	r6, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c0:	0089      	lsls	r1, r1, #2
 80014c2:	200f      	movs	r0, #15
 80014c4:	4088      	lsls	r0, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c6:	45a3      	cmp	fp, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c8:	ea26 0000 	bic.w	r0, r6, r0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014cc:	d012      	beq.n	80014f4 <HAL_GPIO_Init+0x164>
 80014ce:	45cb      	cmp	fp, r9
 80014d0:	f000 8084 	beq.w	80015dc <HAL_GPIO_Init+0x24c>
 80014d4:	4c50      	ldr	r4, [pc, #320]	; (8001618 <HAL_GPIO_Init+0x288>)
 80014d6:	45a3      	cmp	fp, r4
 80014d8:	f000 8085 	beq.w	80015e6 <HAL_GPIO_Init+0x256>
 80014dc:	4c4f      	ldr	r4, [pc, #316]	; (800161c <HAL_GPIO_Init+0x28c>)
 80014de:	45a3      	cmp	fp, r4
 80014e0:	f000 808b 	beq.w	80015fa <HAL_GPIO_Init+0x26a>
 80014e4:	4c4e      	ldr	r4, [pc, #312]	; (8001620 <HAL_GPIO_Init+0x290>)
 80014e6:	45a3      	cmp	fp, r4
 80014e8:	bf0c      	ite	eq
 80014ea:	2404      	moveq	r4, #4
 80014ec:	2407      	movne	r4, #7
 80014ee:	fa04 f101 	lsl.w	r1, r4, r1
 80014f2:	4308      	orrs	r0, r1
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f4:	494b      	ldr	r1, [pc, #300]	; (8001624 <HAL_GPIO_Init+0x294>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f6:	6098      	str	r0, [r3, #8]
        temp = EXTI->IMR;
 80014f8:	680b      	ldr	r3, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80014fa:	484a      	ldr	r0, [pc, #296]	; (8001624 <HAL_GPIO_Init+0x294>)
        temp &= ~((uint32_t)iocurrent);
 80014fc:	43e9      	mvns	r1, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014fe:	03d6      	lsls	r6, r2, #15
          temp |= iocurrent;
 8001500:	bf4c      	ite	mi
 8001502:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8001504:	400b      	andpl	r3, r1
        EXTI->IMR = temp;
 8001506:	6003      	str	r3, [r0, #0]

        temp = EXTI->EMR;
 8001508:	6843      	ldr	r3, [r0, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800150a:	4846      	ldr	r0, [pc, #280]	; (8001624 <HAL_GPIO_Init+0x294>)
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800150c:	0394      	lsls	r4, r2, #14
          temp |= iocurrent;
 800150e:	bf4c      	ite	mi
 8001510:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8001512:	400b      	andpl	r3, r1
        EXTI->EMR = temp;
 8001514:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001516:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001518:	02d0      	lsls	r0, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800151a:	4842      	ldr	r0, [pc, #264]	; (8001624 <HAL_GPIO_Init+0x294>)
          temp |= iocurrent;
 800151c:	bf4c      	ite	mi
 800151e:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8001520:	400b      	andpl	r3, r1
        EXTI->RTSR = temp;
 8001522:	6083      	str	r3, [r0, #8]

        temp = EXTI->FTSR;
 8001524:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001526:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8001528:	bf54      	ite	pl
 800152a:	ea01 0503 	andpl.w	r5, r1, r3
        {
          temp |= iocurrent;
 800152e:	431d      	orrmi	r5, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001530:	f108 0801 	add.w	r8, r8, #1
        }
        EXTI->FTSR = temp;
 8001534:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <HAL_GPIO_Init+0x294>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	f1b8 0f10 	cmp.w	r8, #16
        EXTI->FTSR = temp;
 800153a:	60dd      	str	r5, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153c:	f47f af7f 	bne.w	800143e <HAL_GPIO_Init+0xae>
      }
    }
  }
}
 8001540:	b003      	add	sp, #12
 8001542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001546:	21b4      	movs	r1, #180	; 0xb4
 8001548:	482f      	ldr	r0, [pc, #188]	; (8001608 <HAL_GPIO_Init+0x278>)
 800154a:	f7ff fa6b 	bl	8000a24 <assert_failed>
 800154e:	e74a      	b.n	80013e6 <HAL_GPIO_Init+0x56>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001550:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d836      	bhi.n	80015c6 <HAL_GPIO_Init+0x236>
        temp = GPIOx->OSPEEDR; 
 8001558:	f8db 0008 	ldr.w	r0, [fp, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155c:	40bb      	lsls	r3, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800155e:	4030      	ands	r0, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001560:	4303      	orrs	r3, r0
        GPIOx->OSPEEDR = temp;
 8001562:	f8cb 3008 	str.w	r3, [fp, #8]
        temp = GPIOx->OTYPER;
 8001566:	f8db 0004 	ldr.w	r0, [fp, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800156a:	f3c2 1300 	ubfx	r3, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800156e:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001572:	fa03 f408 	lsl.w	r4, r3, r8
 8001576:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 8001578:	f8cb 4004 	str.w	r4, [fp, #4]
 800157c:	e774      	b.n	8001468 <HAL_GPIO_Init+0xd8>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800157e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	d919      	bls.n	80015ba <HAL_GPIO_Init+0x22a>
 8001586:	21e0      	movs	r1, #224	; 0xe0
 8001588:	481f      	ldr	r0, [pc, #124]	; (8001608 <HAL_GPIO_Init+0x278>)
 800158a:	f7ff fa4b 	bl	8000a24 <assert_failed>
 800158e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8001592:	f8da 2004 	ldr.w	r2, [sl, #4]
        temp = GPIOx->AFR[position >> 3U];
 8001596:	ea4f 00d8 	mov.w	r0, r8, lsr #3
 800159a:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800159e:	f008 0107 	and.w	r1, r8, #7
        temp = GPIOx->AFR[position >> 3U];
 80015a2:	6a04      	ldr	r4, [r0, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015a4:	0089      	lsls	r1, r1, #2
 80015a6:	f04f 0c0f 	mov.w	ip, #15
 80015aa:	fa0c fc01 	lsl.w	ip, ip, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ae:	408b      	lsls	r3, r1
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015b0:	ea24 040c 	bic.w	r4, r4, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b4:	4323      	orrs	r3, r4
        GPIOx->AFR[position >> 3U] = temp;
 80015b6:	6203      	str	r3, [r0, #32]
 80015b8:	e761      	b.n	800147e <HAL_GPIO_Init+0xee>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80015ba:	f249 71f7 	movw	r1, #38903	; 0x97f7
 80015be:	40d9      	lsrs	r1, r3
 80015c0:	07c9      	lsls	r1, r1, #31
 80015c2:	d4e8      	bmi.n	8001596 <HAL_GPIO_Init+0x206>
 80015c4:	e7df      	b.n	8001586 <HAL_GPIO_Init+0x1f6>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80015c6:	21c8      	movs	r1, #200	; 0xc8
 80015c8:	480f      	ldr	r0, [pc, #60]	; (8001608 <HAL_GPIO_Init+0x278>)
 80015ca:	f7ff fa2b 	bl	8000a24 <assert_failed>
 80015ce:	f8da 2004 	ldr.w	r2, [sl, #4]
 80015d2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80015d6:	f022 0110 	bic.w	r1, r2, #16
 80015da:	e7bd      	b.n	8001558 <HAL_GPIO_Init+0x1c8>
 80015dc:	2401      	movs	r4, #1
 80015de:	fa04 f101 	lsl.w	r1, r4, r1
 80015e2:	4308      	orrs	r0, r1
 80015e4:	e786      	b.n	80014f4 <HAL_GPIO_Init+0x164>
 80015e6:	2402      	movs	r4, #2
 80015e8:	fa04 f101 	lsl.w	r1, r4, r1
 80015ec:	4308      	orrs	r0, r1
 80015ee:	e781      	b.n	80014f4 <HAL_GPIO_Init+0x164>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80015f0:	21b6      	movs	r1, #182	; 0xb6
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <HAL_GPIO_Init+0x278>)
 80015f4:	f7ff fa16 	bl	8000a24 <assert_failed>
 80015f8:	e716      	b.n	8001428 <HAL_GPIO_Init+0x98>
 80015fa:	2403      	movs	r4, #3
 80015fc:	fa04 f101 	lsl.w	r1, r4, r1
 8001600:	4308      	orrs	r0, r1
 8001602:	e777      	b.n	80014f4 <HAL_GPIO_Init+0x164>
 8001604:	40020000 	.word	0x40020000
 8001608:	080041bc 	.word	0x080041bc
 800160c:	10110000 	.word	0x10110000
 8001610:	10220000 	.word	0x10220000
 8001614:	40023800 	.word	0x40023800
 8001618:	40020800 	.word	0x40020800
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40021000 	.word	0x40021000
 8001624:	40013c00 	.word	0x40013c00
 8001628:	40020400 	.word	0x40020400

0800162c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	4606      	mov	r6, r0
 8001630:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001632:	460c      	mov	r4, r1
 8001634:	b161      	cbz	r1, 8001650 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001636:	2d01      	cmp	r5, #1
 8001638:	d803      	bhi.n	8001642 <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800163a:	b905      	cbnz	r5, 800163e <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800163c:	0424      	lsls	r4, r4, #16
 800163e:	61b4      	str	r4, [r6, #24]
  }
}
 8001640:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001642:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <HAL_GPIO_WritePin+0x30>)
 8001648:	f7ff f9ec 	bl	8000a24 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800164c:	61b4      	str	r4, [r6, #24]
}
 800164e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001650:	f240 119f 	movw	r1, #415	; 0x19f
 8001654:	4801      	ldr	r0, [pc, #4]	; (800165c <HAL_GPIO_WritePin+0x30>)
 8001656:	f7ff f9e5 	bl	8000a24 <assert_failed>
 800165a:	e7ec      	b.n	8001636 <HAL_GPIO_WritePin+0xa>
 800165c:	080041bc 	.word	0x080041bc

08001660 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001660:	2800      	cmp	r0, #0
 8001662:	f000 811f 	beq.w	80018a4 <HAL_I2C_Init+0x244>
{
 8001666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001668:	4a98      	ldr	r2, [pc, #608]	; (80018cc <HAL_I2C_Init+0x26c>)
 800166a:	6803      	ldr	r3, [r0, #0]
 800166c:	4293      	cmp	r3, r2
 800166e:	4604      	mov	r4, r0
 8001670:	d00c      	beq.n	800168c <HAL_I2C_Init+0x2c>
 8001672:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001676:	4293      	cmp	r3, r2
 8001678:	d008      	beq.n	800168c <HAL_I2C_Init+0x2c>
 800167a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800167e:	4293      	cmp	r3, r2
 8001680:	d004      	beq.n	800168c <HAL_I2C_Init+0x2c>
 8001682:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001686:	4892      	ldr	r0, [pc, #584]	; (80018d0 <HAL_I2C_Init+0x270>)
 8001688:	f7ff f9cc 	bl	8000a24 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800168c:	6863      	ldr	r3, [r4, #4]
 800168e:	4a91      	ldr	r2, [pc, #580]	; (80018d4 <HAL_I2C_Init+0x274>)
 8001690:	3b01      	subs	r3, #1
 8001692:	4293      	cmp	r3, r2
 8001694:	f200 80e8 	bhi.w	8001868 <HAL_I2C_Init+0x208>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8001698:	68a3      	ldr	r3, [r4, #8]
 800169a:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800169e:	d004      	beq.n	80016aa <HAL_I2C_Init+0x4a>
 80016a0:	f240 11c1 	movw	r1, #449	; 0x1c1
 80016a4:	488a      	ldr	r0, [pc, #552]	; (80018d0 <HAL_I2C_Init+0x270>)
 80016a6:	f7ff f9bd 	bl	8000a24 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80016aa:	68e3      	ldr	r3, [r4, #12]
 80016ac:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016b0:	f023 0303 	bic.w	r3, r3, #3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f040 80ca 	bne.w	800184e <HAL_I2C_Init+0x1ee>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80016ba:	6923      	ldr	r3, [r4, #16]
 80016bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016c4:	d004      	beq.n	80016d0 <HAL_I2C_Init+0x70>
 80016c6:	f240 11c3 	movw	r1, #451	; 0x1c3
 80016ca:	4881      	ldr	r0, [pc, #516]	; (80018d0 <HAL_I2C_Init+0x270>)
 80016cc:	f7ff f9aa 	bl	8000a24 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80016d0:	6963      	ldr	r3, [r4, #20]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	f200 80b0 	bhi.w	8001838 <HAL_I2C_Init+0x1d8>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80016d8:	69a3      	ldr	r3, [r4, #24]
 80016da:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 80016de:	f040 80ce 	bne.w	800187e <HAL_I2C_Init+0x21e>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80016e2:	69e3      	ldr	r3, [r4, #28]
 80016e4:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 80016e8:	d004      	beq.n	80016f4 <HAL_I2C_Init+0x94>
 80016ea:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80016ee:	4878      	ldr	r0, [pc, #480]	; (80018d0 <HAL_I2C_Init+0x270>)
 80016f0:	f7ff f998 	bl	8000a24 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80016f4:	6a23      	ldr	r3, [r4, #32]
 80016f6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80016fa:	d004      	beq.n	8001706 <HAL_I2C_Init+0xa6>
 80016fc:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001700:	4873      	ldr	r0, [pc, #460]	; (80018d0 <HAL_I2C_Init+0x270>)
 8001702:	f7ff f98f 	bl	8000a24 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001706:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800170a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80c0 	beq.w	8001894 <HAL_I2C_Init+0x234>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001714:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001716:	2224      	movs	r2, #36	; 0x24
 8001718:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800172a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001732:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001734:	f001 fea6 	bl	8003484 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001738:	6861      	ldr	r1, [r4, #4]
 800173a:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <HAL_I2C_Init+0x278>)
 800173c:	4299      	cmp	r1, r3
 800173e:	d84c      	bhi.n	80017da <HAL_I2C_Init+0x17a>
 8001740:	4b66      	ldr	r3, [pc, #408]	; (80018dc <HAL_I2C_Init+0x27c>)
 8001742:	4298      	cmp	r0, r3
 8001744:	f240 80ac 	bls.w	80018a0 <HAL_I2C_Init+0x240>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001748:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_I2C_Init+0x280>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800174c:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800174e:	fba3 6300 	umull	r6, r3, r3, r0
 8001752:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001754:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001758:	431d      	orrs	r5, r3
 800175a:	6055      	str	r5, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800175c:	6a15      	ldr	r5, [r2, #32]
 800175e:	3301      	adds	r3, #1
 8001760:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001764:	432b      	orrs	r3, r5
 8001766:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001768:	69d5      	ldr	r5, [r2, #28]
 800176a:	0049      	lsls	r1, r1, #1
 800176c:	1e43      	subs	r3, r0, #1
 800176e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001772:	3301      	adds	r3, #1
 8001774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001778:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 800177c:	2b04      	cmp	r3, #4
 800177e:	bf38      	it	cc
 8001780:	2304      	movcc	r3, #4
 8001782:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8001786:	432b      	orrs	r3, r5
 8001788:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800178a:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 800178e:	6810      	ldr	r0, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001790:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001792:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8001796:	432b      	orrs	r3, r5
 8001798:	4303      	orrs	r3, r0
 800179a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800179c:	6890      	ldr	r0, [r2, #8]
 800179e:	68e5      	ldr	r5, [r4, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017a0:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017a2:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 80017a6:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80017aa:	4329      	orrs	r1, r5
 80017ac:	4301      	orrs	r1, r0
 80017ae:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017b0:	68d1      	ldr	r1, [r2, #12]
 80017b2:	69a0      	ldr	r0, [r4, #24]
 80017b4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80017b8:	4303      	orrs	r3, r0
 80017ba:	430b      	orrs	r3, r1
 80017bc:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017be:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c0:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80017c2:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80017c6:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 80017c8:	6011      	str	r1, [r2, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 80017ca:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017cc:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ce:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017d2:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80017d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017da:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <HAL_I2C_Init+0x284>)
 80017dc:	4298      	cmp	r0, r3
 80017de:	d95f      	bls.n	80018a0 <HAL_I2C_Init+0x240>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017e0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_I2C_Init+0x280>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017e4:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017e6:	4f40      	ldr	r7, [pc, #256]	; (80018e8 <HAL_I2C_Init+0x288>)
  freqrange = I2C_FREQRANGE(pclk1);
 80017e8:	fba3 5300 	umull	r5, r3, r3, r0
 80017ec:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017ee:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80017f2:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017f4:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017f8:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017fa:	fb03 f305 	mul.w	r3, r3, r5
 80017fe:	fba7 5303 	umull	r5, r3, r7, r3
 8001802:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001804:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800180c:	3301      	adds	r3, #1
 800180e:	432b      	orrs	r3, r5
 8001810:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001812:	69d5      	ldr	r5, [r2, #28]
 8001814:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8001818:	3801      	subs	r0, #1
 800181a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800181e:	2e00      	cmp	r6, #0
 8001820:	d142      	bne.n	80018a8 <HAL_I2C_Init+0x248>
 8001822:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001826:	fbb0 f0f1 	udiv	r0, r0, r1
 800182a:	3001      	adds	r0, #1
 800182c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001830:	2800      	cmp	r0, #0
 8001832:	d147      	bne.n	80018c4 <HAL_I2C_Init+0x264>
 8001834:	2301      	movs	r3, #1
 8001836:	e7a6      	b.n	8001786 <HAL_I2C_Init+0x126>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001838:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800183c:	4824      	ldr	r0, [pc, #144]	; (80018d0 <HAL_I2C_Init+0x270>)
 800183e:	f7ff f8f1 	bl	8000a24 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001842:	69a3      	ldr	r3, [r4, #24]
 8001844:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8001848:	f43f af4b 	beq.w	80016e2 <HAL_I2C_Init+0x82>
 800184c:	e017      	b.n	800187e <HAL_I2C_Init+0x21e>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800184e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001852:	481f      	ldr	r0, [pc, #124]	; (80018d0 <HAL_I2C_Init+0x270>)
 8001854:	f7ff f8e6 	bl	8000a24 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001858:	6923      	ldr	r3, [r4, #16]
 800185a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800185e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001862:	f47f af30 	bne.w	80016c6 <HAL_I2C_Init+0x66>
 8001866:	e733      	b.n	80016d0 <HAL_I2C_Init+0x70>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001868:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800186c:	4818      	ldr	r0, [pc, #96]	; (80018d0 <HAL_I2C_Init+0x270>)
 800186e:	f7ff f8d9 	bl	8000a24 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8001872:	68a3      	ldr	r3, [r4, #8]
 8001874:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8001878:	f43f af17 	beq.w	80016aa <HAL_I2C_Init+0x4a>
 800187c:	e710      	b.n	80016a0 <HAL_I2C_Init+0x40>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800187e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001882:	4813      	ldr	r0, [pc, #76]	; (80018d0 <HAL_I2C_Init+0x270>)
 8001884:	f7ff f8ce 	bl	8000a24 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001888:	69e3      	ldr	r3, [r4, #28]
 800188a:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800188e:	f43f af31 	beq.w	80016f4 <HAL_I2C_Init+0x94>
 8001892:	e72a      	b.n	80016ea <HAL_I2C_Init+0x8a>
    hi2c->Lock = HAL_UNLOCKED;
 8001894:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001898:	4620      	mov	r0, r4
 800189a:	f7fe feb9 	bl	8000610 <HAL_I2C_MspInit>
 800189e:	e739      	b.n	8001714 <HAL_I2C_Init+0xb4>
    return HAL_ERROR;
 80018a0:	2001      	movs	r0, #1
}
 80018a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80018a4:	2001      	movs	r0, #1
}
 80018a6:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80018ac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80018b0:	fbb0 f0f1 	udiv	r0, r0, r1
 80018b4:	3001      	adds	r0, #1
 80018b6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80018ba:	2800      	cmp	r0, #0
 80018bc:	d0ba      	beq.n	8001834 <HAL_I2C_Init+0x1d4>
 80018be:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 80018c2:	e760      	b.n	8001786 <HAL_I2C_Init+0x126>
 80018c4:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 80018c8:	e75d      	b.n	8001786 <HAL_I2C_Init+0x126>
 80018ca:	bf00      	nop
 80018cc:	40005400 	.word	0x40005400
 80018d0:	080041f8 	.word	0x080041f8
 80018d4:	00061a7f 	.word	0x00061a7f
 80018d8:	000186a0 	.word	0x000186a0
 80018dc:	001e847f 	.word	0x001e847f
 80018e0:	431bde83 	.word	0x431bde83
 80018e4:	003d08ff 	.word	0x003d08ff
 80018e8:	10624dd3 	.word	0x10624dd3

080018ec <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80018ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
 80018f0:	1e5d      	subs	r5, r3, #1
 80018f2:	2d1f      	cmp	r5, #31
{
 80018f4:	b084      	sub	sp, #16
 80018f6:	461e      	mov	r6, r3
 80018f8:	4604      	mov	r4, r0
 80018fa:	460f      	mov	r7, r1
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
 80018fc:	d90d      	bls.n	800191a <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 80018fe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001902:	d00e      	beq.n	8001922 <HAL_I2C_Slave_Seq_Transmit_DMA+0x36>
 8001904:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8001908:	d00b      	beq.n	8001922 <HAL_I2C_Slave_Seq_Transmit_DMA+0x36>
 800190a:	f241 0111 	movw	r1, #4113	; 0x1011
 800190e:	4856      	ldr	r0, [pc, #344]	; (8001a68 <HAL_I2C_Slave_Seq_Transmit_DMA+0x17c>)
 8001910:	9201      	str	r2, [sp, #4]
 8001912:	f7ff f887 	bl	8000a24 <assert_failed>
 8001916:	9a01      	ldr	r2, [sp, #4]
 8001918:	e003      	b.n	8001922 <HAL_I2C_Slave_Seq_Transmit_DMA+0x36>
 800191a:	4b54      	ldr	r3, [pc, #336]	; (8001a6c <HAL_I2C_Slave_Seq_Transmit_DMA+0x180>)
 800191c:	40eb      	lsrs	r3, r5
 800191e:	07d8      	lsls	r0, r3, #31
 8001920:	d5f0      	bpl.n	8001904 <HAL_I2C_Slave_Seq_Transmit_DMA+0x18>

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001922:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001926:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800192a:	2b28      	cmp	r3, #40	; 0x28
 800192c:	d14d      	bne.n	80019ca <HAL_I2C_Slave_Seq_Transmit_DMA+0xde>
  {
    if ((pData == NULL) || (Size == 0U))
 800192e:	2f00      	cmp	r7, #0
 8001930:	d04f      	beq.n	80019d2 <HAL_I2C_Slave_Seq_Transmit_DMA+0xe6>
 8001932:	2a00      	cmp	r2, #0
 8001934:	d04d      	beq.n	80019d2 <HAL_I2C_Slave_Seq_Transmit_DMA+0xe6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001936:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d045      	beq.n	80019ca <HAL_I2C_Slave_Seq_Transmit_DMA+0xde>

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	6859      	ldr	r1, [r3, #4]
    __HAL_LOCK(hi2c);
 8001942:	2001      	movs	r0, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001944:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    __HAL_LOCK(hi2c);
 8001948:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800194c:	6059      	str	r1, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800194e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001952:	292a      	cmp	r1, #42	; 0x2a
 8001954:	d057      	beq.n	8001a06 <HAL_I2C_Slave_Seq_Transmit_DMA+0x11a>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001956:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800195a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800195c:	2929      	cmp	r1, #41	; 0x29
 800195e:	d06e      	beq.n	8001a3e <HAL_I2C_Slave_Seq_Transmit_DMA+0x152>
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	07c9      	lsls	r1, r1, #31
 8001964:	d403      	bmi.n	800196e <HAL_I2C_Slave_Seq_Transmit_DMA+0x82>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001966:	6819      	ldr	r1, [r3, #0]
 8001968:	f041 0101 	orr.w	r1, r1, #1
 800196c:	6019      	str	r1, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800196e:	681d      	ldr	r5, [r3, #0]
    hi2c->XferCount   = Size;
    hi2c->XferSize    = hi2c->XferCount;
    hi2c->XferOptions = XferOptions;

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8001970:	f8df c104 	ldr.w	ip, [pc, #260]	; 8001a78 <HAL_I2C_Slave_Seq_Transmit_DMA+0x18c>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001974:	4619      	mov	r1, r3
 8001976:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 800197a:	f841 5b10 	str.w	r5, [r1], #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800197e:	2329      	movs	r3, #41	; 0x29
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001980:	2500      	movs	r5, #0
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001982:	f04f 0820 	mov.w	r8, #32
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001986:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800198a:	f884 803e 	strb.w	r8, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198e:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001990:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001992:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8001994:	62e6      	str	r6, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001996:	b29b      	uxth	r3, r3

    /* Set the DMA error callback */
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001998:	4e35      	ldr	r6, [pc, #212]	; (8001a70 <HAL_I2C_Slave_Seq_Transmit_DMA+0x184>)
    hi2c->pBuffPtr    = pData;
 800199a:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800199c:	8523      	strh	r3, [r4, #40]	; 0x28
    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmatx->XferHalfCpltCallback = NULL;
    hi2c->hdmatx->XferAbortCallback = NULL;

    /* Enable the DMA stream */
    dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800199e:	460a      	mov	r2, r1
    hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80019a0:	6405      	str	r5, [r0, #64]	; 0x40
    dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80019a2:	4639      	mov	r1, r7
    hi2c->hdmatx->XferAbortCallback = NULL;
 80019a4:	6505      	str	r5, [r0, #80]	; 0x50
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80019a6:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80019aa:	64c6      	str	r6, [r0, #76]	; 0x4c
    dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80019ac:	f7ff fbac 	bl	8001108 <HAL_DMA_Start_IT>

    if (dmaxferstatus == HAL_OK)
 80019b0:	b198      	cbz	r0, 80019da <HAL_I2C_Slave_Seq_Transmit_DMA+0xee>
      return HAL_OK;
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80019b2:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80019b6:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80019ba:	6c23      	ldr	r3, [r4, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019bc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80019c0:	f043 0310 	orr.w	r3, r3, #16
 80019c4:	6423      	str	r3, [r4, #64]	; 0x40

      return HAL_ERROR;
 80019c6:	2001      	movs	r0, #1
 80019c8:	e000      	b.n	80019cc <HAL_I2C_Slave_Seq_Transmit_DMA+0xe0>
    }
  }
  else
  {
    return HAL_BUSY;
 80019ca:	2002      	movs	r0, #2
  }
}
 80019cc:	b004      	add	sp, #16
 80019ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80019d2:	2001      	movs	r0, #1
}
 80019d4:	b004      	add	sp, #16
 80019d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019e2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e4:	9003      	str	r0, [sp, #12]
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	9203      	str	r2, [sp, #12]
 80019ea:	699a      	ldr	r2, [r3, #24]
 80019ec:	9203      	str	r2, [sp, #12]
 80019ee:	9a03      	ldr	r2, [sp, #12]
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80019f0:	685a      	ldr	r2, [r3, #4]
      __HAL_UNLOCK(hi2c);
 80019f2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80019f6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80019fa:	605a      	str	r2, [r3, #4]
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a02:	605a      	str	r2, [r3, #4]
      return HAL_OK;
 8001a04:	e7e2      	b.n	80019cc <HAL_I2C_Slave_Seq_Transmit_DMA+0xe0>
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	0509      	lsls	r1, r1, #20
 8001a0a:	d516      	bpl.n	8001a3a <HAL_I2C_Slave_Seq_Transmit_DMA+0x14e>
        if (hi2c->hdmarx != NULL)
 8001a0c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001a0e:	b1a1      	cbz	r1, 8001a3a <HAL_I2C_Slave_Seq_Transmit_DMA+0x14e>
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001a10:	6858      	ldr	r0, [r3, #4]
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a12:	4d18      	ldr	r5, [pc, #96]	; (8001a74 <HAL_I2C_Slave_Seq_Transmit_DMA+0x188>)
 8001a14:	9201      	str	r2, [sp, #4]
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001a16:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8001a1a:	6058      	str	r0, [r3, #4]
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a1c:	4608      	mov	r0, r1
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a1e:	650d      	str	r5, [r1, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a20:	f7ff fbc8 	bl	80011b4 <HAL_DMA_Abort_IT>
 8001a24:	9a01      	ldr	r2, [sp, #4]
 8001a26:	b138      	cbz	r0, 8001a38 <HAL_I2C_Slave_Seq_Transmit_DMA+0x14c>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a28:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001a2a:	9201      	str	r2, [sp, #4]
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001a2c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001a2e:	4798      	blx	r3
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001a34:	9a01      	ldr	r2, [sp, #4]
 8001a36:	e793      	b.n	8001960 <HAL_I2C_Slave_Seq_Transmit_DMA+0x74>
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001a3c:	e790      	b.n	8001960 <HAL_I2C_Slave_Seq_Transmit_DMA+0x74>
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	050d      	lsls	r5, r1, #20
 8001a42:	d58d      	bpl.n	8001960 <HAL_I2C_Slave_Seq_Transmit_DMA+0x74>
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001a44:	6859      	ldr	r1, [r3, #4]
 8001a46:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8001a4a:	6059      	str	r1, [r3, #4]
        if (hi2c->hdmatx != NULL)
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d087      	beq.n	8001960 <HAL_I2C_Slave_Seq_Transmit_DMA+0x74>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_I2C_Slave_Seq_Transmit_DMA+0x188>)
 8001a52:	6503      	str	r3, [r0, #80]	; 0x50
 8001a54:	9201      	str	r2, [sp, #4]
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001a56:	f7ff fbad 	bl	80011b4 <HAL_DMA_Abort_IT>
 8001a5a:	9a01      	ldr	r2, [sp, #4]
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d0eb      	beq.n	8001a38 <HAL_I2C_Slave_Seq_Transmit_DMA+0x14c>
 8001a60:	9201      	str	r2, [sp, #4]
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001a62:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001a64:	e7e2      	b.n	8001a2c <HAL_I2C_Slave_Seq_Transmit_DMA+0x140>
 8001a66:	bf00      	nop
 8001a68:	080041f8 	.word	0x080041f8
 8001a6c:	8000808b 	.word	0x8000808b
 8001a70:	08001d21 	.word	0x08001d21
 8001a74:	08001e79 	.word	0x08001e79
 8001a78:	08001d65 	.word	0x08001d65

08001a7c <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
 8001a80:	1e5d      	subs	r5, r3, #1
 8001a82:	2d1f      	cmp	r5, #31
{
 8001a84:	b084      	sub	sp, #16
 8001a86:	461e      	mov	r6, r3
 8001a88:	4604      	mov	r4, r0
 8001a8a:	460f      	mov	r7, r1
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
 8001a8c:	d90d      	bls.n	8001aaa <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 8001a8e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001a92:	d00e      	beq.n	8001ab2 <HAL_I2C_Slave_Seq_Receive_DMA+0x36>
 8001a94:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8001a98:	d00b      	beq.n	8001ab2 <HAL_I2C_Slave_Seq_Receive_DMA+0x36>
 8001a9a:	f241 01f0 	movw	r1, #4336	; 0x10f0
 8001a9e:	4859      	ldr	r0, [pc, #356]	; (8001c04 <HAL_I2C_Slave_Seq_Receive_DMA+0x188>)
 8001aa0:	9201      	str	r2, [sp, #4]
 8001aa2:	f7fe ffbf 	bl	8000a24 <assert_failed>
 8001aa6:	9a01      	ldr	r2, [sp, #4]
 8001aa8:	e003      	b.n	8001ab2 <HAL_I2C_Slave_Seq_Receive_DMA+0x36>
 8001aaa:	4b57      	ldr	r3, [pc, #348]	; (8001c08 <HAL_I2C_Slave_Seq_Receive_DMA+0x18c>)
 8001aac:	40eb      	lsrs	r3, r5
 8001aae:	07db      	lsls	r3, r3, #31
 8001ab0:	d5f0      	bpl.n	8001a94 <HAL_I2C_Slave_Seq_Receive_DMA+0x18>

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ab2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001ab6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001aba:	2b28      	cmp	r3, #40	; 0x28
 8001abc:	d14f      	bne.n	8001b5e <HAL_I2C_Slave_Seq_Receive_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d051      	beq.n	8001b66 <HAL_I2C_Slave_Seq_Receive_DMA+0xea>
 8001ac2:	2a00      	cmp	r2, #0
 8001ac4:	d04f      	beq.n	8001b66 <HAL_I2C_Slave_Seq_Receive_DMA+0xea>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d047      	beq.n	8001b5e <HAL_I2C_Slave_Seq_Receive_DMA+0xe2>

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001ace:	6821      	ldr	r1, [r4, #0]
 8001ad0:	684b      	ldr	r3, [r1, #4]
    __HAL_LOCK(hi2c);
 8001ad2:	2001      	movs	r0, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    __HAL_LOCK(hi2c);
 8001ad8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001adc:	604b      	str	r3, [r1, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001ade:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8001ae4:	d059      	beq.n	8001b9a <HAL_I2C_Slave_Seq_Receive_DMA+0x11e>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001ae6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001aea:	2b29      	cmp	r3, #41	; 0x29
 8001aec:	d073      	beq.n	8001bd6 <HAL_I2C_Slave_Seq_Receive_DMA+0x15a>
 8001aee:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001af2:	680b      	ldr	r3, [r1, #0]
 8001af4:	07db      	lsls	r3, r3, #31
 8001af6:	d403      	bmi.n	8001b00 <HAL_I2C_Slave_Seq_Receive_DMA+0x84>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001af8:	680b      	ldr	r3, [r1, #0]
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	600b      	str	r3, [r1, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b00:	680b      	ldr	r3, [r1, #0]
    hi2c->XferCount   = Size;
    hi2c->XferSize    = hi2c->XferCount;
    hi2c->XferOptions = XferOptions;

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8001b02:	4842      	ldr	r0, [pc, #264]	; (8001c0c <HAL_I2C_Slave_Seq_Receive_DMA+0x190>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b08:	f841 3b10 	str.w	r3, [r1], #16
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b0c:	2500      	movs	r5, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001b0e:	232a      	movs	r3, #42	; 0x2a
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001b10:	f04f 0820 	mov.w	r8, #32
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001b14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001b18:	f884 803e 	strb.w	r8, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b1c:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001b1e:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8001b22:	62e6      	str	r6, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001b24:	b29b      	uxth	r3, r3

    /* Set the DMA error callback */
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001b26:	4e3a      	ldr	r6, [pc, #232]	; (8001c10 <HAL_I2C_Slave_Seq_Receive_DMA+0x194>)
    hi2c->pBuffPtr    = pData;
 8001b28:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001b2a:	8523      	strh	r3, [r4, #40]	; 0x28
    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmarx->XferHalfCpltCallback = NULL;
    hi2c->hdmarx->XferAbortCallback = NULL;

    /* Enable the DMA stream */
    dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8001b2c:	463a      	mov	r2, r7
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8001b2e:	f8cc 003c 	str.w	r0, [ip, #60]	; 0x3c
    hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001b32:	f8cc 5040 	str.w	r5, [ip, #64]	; 0x40
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001b36:	f8cc 5050 	str.w	r5, [ip, #80]	; 0x50
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001b3a:	f8cc 604c 	str.w	r6, [ip, #76]	; 0x4c
    dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8001b3e:	4660      	mov	r0, ip
 8001b40:	f7ff fae2 	bl	8001108 <HAL_DMA_Start_IT>

    if (dmaxferstatus == HAL_OK)
 8001b44:	b198      	cbz	r0, 8001b6e <HAL_I2C_Slave_Seq_Receive_DMA+0xf2>
      return HAL_OK;
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8001b46:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001b4a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b50:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001b54:	f043 0310 	orr.w	r3, r3, #16
 8001b58:	6423      	str	r3, [r4, #64]	; 0x40

      return HAL_ERROR;
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_I2C_Slave_Seq_Receive_DMA+0xe4>
    }
  }
  else
  {
    return HAL_BUSY;
 8001b5e:	2002      	movs	r0, #2
  }
}
 8001b60:	b004      	add	sp, #16
 8001b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001b66:	2001      	movs	r0, #1
}
 8001b68:	b004      	add	sp, #16
 8001b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b76:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b78:	9003      	str	r0, [sp, #12]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	9203      	str	r2, [sp, #12]
 8001b7e:	699a      	ldr	r2, [r3, #24]
 8001b80:	9203      	str	r2, [sp, #12]
 8001b82:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001b84:	685a      	ldr	r2, [r3, #4]
      __HAL_UNLOCK(hi2c);
 8001b86:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b8e:	605a      	str	r2, [r3, #4]
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001b96:	605a      	str	r2, [r3, #4]
      return HAL_OK;
 8001b98:	e7e2      	b.n	8001b60 <HAL_I2C_Slave_Seq_Receive_DMA+0xe4>
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001b9a:	684b      	ldr	r3, [r1, #4]
 8001b9c:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
 8001ba0:	051d      	lsls	r5, r3, #20
 8001ba2:	d5a6      	bpl.n	8001af2 <HAL_I2C_Slave_Seq_Receive_DMA+0x76>
        if (hi2c->hdmarx != NULL)
 8001ba4:	f1bc 0f00 	cmp.w	ip, #0
 8001ba8:	d0a3      	beq.n	8001af2 <HAL_I2C_Slave_Seq_Receive_DMA+0x76>
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001baa:	684b      	ldr	r3, [r1, #4]
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001bac:	4d19      	ldr	r5, [pc, #100]	; (8001c14 <HAL_I2C_Slave_Seq_Receive_DMA+0x198>)
 8001bae:	9201      	str	r2, [sp, #4]
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bb4:	604b      	str	r3, [r1, #4]
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001bb6:	4660      	mov	r0, ip
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001bb8:	f8cc 5050 	str.w	r5, [ip, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001bbc:	f7ff fafa 	bl	80011b4 <HAL_DMA_Abort_IT>
 8001bc0:	9a01      	ldr	r2, [sp, #4]
 8001bc2:	b1e0      	cbz	r0, 8001bfe <HAL_I2C_Slave_Seq_Receive_DMA+0x182>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001bc4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bc6:	9201      	str	r2, [sp, #4]
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001bc8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001bca:	4798      	blx	r3
 8001bcc:	6821      	ldr	r1, [r4, #0]
 8001bce:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
 8001bd2:	9a01      	ldr	r2, [sp, #4]
 8001bd4:	e78d      	b.n	8001af2 <HAL_I2C_Slave_Seq_Receive_DMA+0x76>
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001bd6:	684b      	ldr	r3, [r1, #4]
 8001bd8:	0518      	lsls	r0, r3, #20
 8001bda:	d588      	bpl.n	8001aee <HAL_I2C_Slave_Seq_Receive_DMA+0x72>
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001bdc:	684b      	ldr	r3, [r1, #4]
        if (hi2c->hdmatx != NULL)
 8001bde:	6b60      	ldr	r0, [r4, #52]	; 0x34
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001be4:	604b      	str	r3, [r1, #4]
        if (hi2c->hdmatx != NULL)
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d081      	beq.n	8001aee <HAL_I2C_Slave_Seq_Receive_DMA+0x72>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_I2C_Slave_Seq_Receive_DMA+0x198>)
 8001bec:	6503      	str	r3, [r0, #80]	; 0x50
 8001bee:	9201      	str	r2, [sp, #4]
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001bf0:	f7ff fae0 	bl	80011b4 <HAL_DMA_Abort_IT>
 8001bf4:	9a01      	ldr	r2, [sp, #4]
 8001bf6:	b110      	cbz	r0, 8001bfe <HAL_I2C_Slave_Seq_Receive_DMA+0x182>
 8001bf8:	9201      	str	r2, [sp, #4]
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001bfa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001bfc:	e7e4      	b.n	8001bc8 <HAL_I2C_Slave_Seq_Receive_DMA+0x14c>
 8001bfe:	6821      	ldr	r1, [r4, #0]
 8001c00:	e775      	b.n	8001aee <HAL_I2C_Slave_Seq_Receive_DMA+0x72>
 8001c02:	bf00      	nop
 8001c04:	080041f8 	.word	0x080041f8
 8001c08:	8000808b 	.word	0x8000808b
 8001c0c:	08001d65 	.word	0x08001d65
 8001c10:	08001d21 	.word	0x08001d21
 8001c14:	08001e79 	.word	0x08001e79

08001c18 <HAL_I2C_EnableListen_IT>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c18:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d114      	bne.n	8001c4a <HAL_I2C_EnableListen_IT+0x32>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c20:	2228      	movs	r2, #40	; 0x28

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c22:	6803      	ldr	r3, [r0, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c24:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	07d2      	lsls	r2, r2, #31
 8001c2c:	d403      	bmi.n	8001c36 <HAL_I2C_EnableListen_IT+0x1e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c3c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001c44:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001c46:	2000      	movs	r0, #0
 8001c48:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001c4a:	2002      	movs	r0, #2
  }
}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop

08001c50 <HAL_I2C_MasterTxCpltCallback>:
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop

08001c54 <HAL_I2C_MasterRxCpltCallback>:
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop

08001c58 <HAL_I2C_SlaveTxCpltCallback>:
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop

08001c5c <HAL_I2C_SlaveRxCpltCallback>:
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop

08001c60 <HAL_I2C_MemTxCpltCallback>:
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop

08001c64 <I2C_MemoryTransmit_TXE_BTF>:
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c64:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d

  if (hi2c->EventCount == 0U)
 8001c68:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8001c6a:	b538      	push	{r3, r4, r5, lr}
 8001c6c:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8001c6e:	b959      	cbnz	r1, 8001c88 <I2C_MemoryTransmit_TXE_BTF+0x24>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001c70:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001c72:	6801      	ldr	r1, [r0, #0]
 8001c74:	2a01      	cmp	r2, #1
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c76:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001c78:	d02a      	beq.n	8001cd0 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001c7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c7e:	610a      	str	r2, [r1, #16]

      hi2c->EventCount++;
 8001c80:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001c82:	3201      	adds	r2, #1
 8001c84:	6502      	str	r2, [r0, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001c86:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 8001c88:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001c8a:	2901      	cmp	r1, #1
 8001c8c:	d026      	beq.n	8001cdc <I2C_MemoryTransmit_TXE_BTF+0x78>
  else if (hi2c->EventCount == 2U)
 8001c8e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001c90:	2902      	cmp	r1, #2
 8001c92:	d1f8      	bne.n	8001c86 <I2C_MemoryTransmit_TXE_BTF+0x22>
 8001c94:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001c96:	2a22      	cmp	r2, #34	; 0x22
 8001c98:	d02c      	beq.n	8001cf4 <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c9a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8001c9c:	b289      	uxth	r1, r1
 8001c9e:	bb29      	cbnz	r1, 8001cec <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ca0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8001ca2:	b289      	uxth	r1, r1
 8001ca4:	2900      	cmp	r1, #0
 8001ca6:	d1ee      	bne.n	8001c86 <I2C_MemoryTransmit_TXE_BTF+0x22>
 8001ca8:	2a21      	cmp	r2, #33	; 0x21
 8001caa:	d1ec      	bne.n	8001c86 <I2C_MemoryTransmit_TXE_BTF+0x22>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cac:	6802      	ldr	r2, [r0, #0]
 8001cae:	6854      	ldr	r4, [r2, #4]
 8001cb0:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8001cb4:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb6:	6814      	ldr	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	2520      	movs	r5, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cba:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8001cbe:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001cc0:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001cc2:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc6:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001cca:	f7ff ffc9 	bl	8001c60 <HAL_I2C_MemTxCpltCallback>
}
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
 8001cd0:	b2d2      	uxtb	r2, r2
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001cd2:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 8001cd4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001cd6:	3202      	adds	r2, #2
 8001cd8:	6502      	str	r2, [r0, #80]	; 0x50
}
 8001cda:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001cdc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001cde:	6801      	ldr	r1, [r0, #0]
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 8001ce4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001ce6:	3201      	adds	r2, #1
 8001ce8:	6502      	str	r2, [r0, #80]	; 0x50
}
 8001cea:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cec:	2a21      	cmp	r2, #33	; 0x21
 8001cee:	d007      	beq.n	8001d00 <I2C_MemoryTransmit_TXE_BTF+0x9c>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 8001cf2:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001cf4:	6802      	ldr	r2, [r0, #0]
 8001cf6:	6813      	ldr	r3, [r2, #0]
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	6013      	str	r3, [r2, #0]
}
 8001cfe:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d00:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001d02:	6802      	ldr	r2, [r0, #0]
 8001d04:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001d08:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8001d0a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001d0c:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001d0e:	3a01      	subs	r2, #1
 8001d10:	b292      	uxth	r2, r2
 8001d12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d14:	bd38      	pop	{r3, r4, r5, pc}
 8001d16:	bf00      	nop

08001d18 <HAL_I2C_MemRxCpltCallback>:
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop

08001d1c <HAL_I2C_ErrorCallback>:
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop

08001d20 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d20:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001d22:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8001d24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d26:	b10b      	cbz	r3, 8001d2c <I2C_DMAError+0xc>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8001d28:	2200      	movs	r2, #0
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8001d2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d2e:	b10b      	cbz	r3, 8001d34 <I2C_DMAError+0x14>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8001d30:	2200      	movs	r2, #0
 8001d32:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8001d34:	f7ff fb2a 	bl	800138c <HAL_DMA_GetError>
 8001d38:	2802      	cmp	r0, #2
 8001d3a:	d012      	beq.n	8001d62 <I2C_DMAError+0x42>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d3c:	6821      	ldr	r1, [r4, #0]
 8001d3e:	680b      	ldr	r3, [r1, #0]

    hi2c->XferCount = 0U;
 8001d40:	2200      	movs	r2, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

    hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	2020      	movs	r0, #32
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d48:	600b      	str	r3, [r1, #0]
    hi2c->XferCount = 0U;
 8001d4a:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 8001d4c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d50:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001d54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d56:	f043 0310 	orr.w	r3, r3, #16
 8001d5a:	6423      	str	r3, [r4, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f7ff ffdd 	bl	8001d1c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001d62:	bd10      	pop	{r4, pc}

08001d64 <I2C_DMAXferCplt>:
{
 8001d64:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001d66:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001d68:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d6a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d6e:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001d74:	6859      	ldr	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 8001d76:	6b65      	ldr	r5, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001d78:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d7c:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d7e:	b2c0      	uxtb	r0, r0
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001d80:	6059      	str	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 8001d82:	b10d      	cbz	r5, 8001d88 <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8001d84:	2100      	movs	r1, #0
 8001d86:	63e9      	str	r1, [r5, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8001d88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001d8a:	b109      	cbz	r1, 8001d90 <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8001d8c:	2500      	movs	r5, #0
 8001d8e:	63cd      	str	r5, [r1, #60]	; 0x3c
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8001d90:	f002 0121 	and.w	r1, r2, #33	; 0x21
 8001d94:	2921      	cmp	r1, #33	; 0x21
 8001d96:	d03e      	beq.n	8001e16 <I2C_DMAXferCplt+0xb2>
 8001d98:	f002 0122 	and.w	r1, r2, #34	; 0x22
 8001d9c:	2922      	cmp	r1, #34	; 0x22
 8001d9e:	d038      	beq.n	8001e12 <I2C_DMAXferCplt+0xae>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8001da0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001da4:	2a00      	cmp	r2, #0
 8001da6:	d033      	beq.n	8001e10 <I2C_DMAXferCplt+0xac>
    if (hi2c->XferCount == (uint16_t)1)
 8001da8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001daa:	b292      	uxth	r2, r2
 8001dac:	2a01      	cmp	r2, #1
 8001dae:	d103      	bne.n	8001db8 <I2C_DMAXferCplt+0x54>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db6:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001db8:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001dba:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001dbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001dc2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001dc4:	d006      	beq.n	8001dd4 <I2C_DMAXferCplt+0x70>
 8001dc6:	2e08      	cmp	r6, #8
 8001dc8:	d004      	beq.n	8001dd4 <I2C_DMAXferCplt+0x70>
 8001dca:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8001dce:	d001      	beq.n	8001dd4 <I2C_DMAXferCplt+0x70>
 8001dd0:	2e20      	cmp	r6, #32
 8001dd2:	d103      	bne.n	8001ddc <I2C_DMAXferCplt+0x78>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dda:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001de2:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001de4:	685a      	ldr	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8001de6:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dec:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8001dee:	8561      	strh	r1, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001df0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001df2:	bb33      	cbnz	r3, 8001e42 <I2C_DMAXferCplt+0xde>
      hi2c->State = HAL_I2C_STATE_READY;
 8001df4:	2220      	movs	r2, #32
 8001df6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dfa:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001dfe:	2a40      	cmp	r2, #64	; 0x40
 8001e00:	d018      	beq.n	8001e34 <I2C_DMAXferCplt+0xd0>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e02:	2212      	movs	r2, #18
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e08:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e0a:	6322      	str	r2, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e0c:	f7ff ff22 	bl	8001c54 <HAL_I2C_MasterRxCpltCallback>
}
 8001e10:	bd70      	pop	{r4, r5, r6, pc}
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8001e12:	2820      	cmp	r0, #32
 8001e14:	d1c4      	bne.n	8001da0 <I2C_DMAXferCplt+0x3c>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001e16:	6859      	ldr	r1, [r3, #4]
    hi2c->XferCount = 0U;
 8001e18:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001e1a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001e1e:	2a29      	cmp	r2, #41	; 0x29
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001e20:	6059      	str	r1, [r3, #4]
    hi2c->XferCount = 0U;
 8001e22:	8560      	strh	r0, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001e24:	d011      	beq.n	8001e4a <I2C_DMAXferCplt+0xe6>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001e26:	2a2a      	cmp	r2, #42	; 0x2a
 8001e28:	d019      	beq.n	8001e5e <I2C_DMAXferCplt+0xfa>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001e30:	605a      	str	r2, [r3, #4]
}
 8001e32:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001e38:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e3a:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001e3c:	f7ff ff6c 	bl	8001d18 <HAL_I2C_MemRxCpltCallback>
}
 8001e40:	bd70      	pop	{r4, r5, r6, pc}
      HAL_I2C_ErrorCallback(hi2c);
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff ff6a 	bl	8001d1c <HAL_I2C_ErrorCallback>
}
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001e4a:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e4c:	2221      	movs	r2, #33	; 0x21
 8001e4e:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e50:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001e52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e56:	f7ff feff 	bl	8001c58 <HAL_I2C_SlaveTxCpltCallback>
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	e7e5      	b.n	8001e2a <I2C_DMAXferCplt+0xc6>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001e5e:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e60:	2222      	movs	r2, #34	; 0x22
 8001e62:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e64:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001e66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e6a:	f7ff fef7 	bl	8001c5c <HAL_I2C_SlaveRxCpltCallback>
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	e7db      	b.n	8001e2a <I2C_DMAXferCplt+0xc6>
 8001e72:	bf00      	nop

08001e74 <HAL_I2C_AbortCpltCallback>:
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop

08001e78 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001e78:	b570      	push	{r4, r5, r6, lr}
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <I2C_DMAAbort+0xf0>)
 8001e7c:	4c3b      	ldr	r4, [pc, #236]	; (8001f6c <I2C_DMAAbort+0xf4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001e80:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8001e82:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	fba4 2303 	umull	r2, r3, r4, r3
  __IO uint32_t count = 0U;
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e8e:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e90:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
 8001e94:	680a      	ldr	r2, [r1, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001e9e:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ea0:	b2c0      	uxtb	r0, r0
 8001ea2:	e005      	b.n	8001eb0 <I2C_DMAAbort+0x38>
    if (count == 0U)
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
    count--;
 8001ea4:	9b01      	ldr	r3, [sp, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	9301      	str	r3, [sp, #4]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8001eaa:	6813      	ldr	r3, [r2, #0]
 8001eac:	059b      	lsls	r3, r3, #22
 8001eae:	d506      	bpl.n	8001ebe <I2C_DMAAbort+0x46>
    if (count == 0U)
 8001eb0:	9b01      	ldr	r3, [sp, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f6      	bne.n	8001ea4 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001eb8:	f043 0320 	orr.w	r3, r3, #32
 8001ebc:	640b      	str	r3, [r1, #64]	; 0x40
 8001ebe:	e9d1 430d 	ldrd	r4, r3, [r1, #52]	; 0x34

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8001ec2:	b34c      	cbz	r4, 8001f18 <I2C_DMAAbort+0xa0>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8001ec4:	2500      	movs	r5, #0
 8001ec6:	63e5      	str	r5, [r4, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8001ec8:	b1fb      	cbz	r3, 8001f0a <I2C_DMAAbort+0x92>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eca:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8001ecc:	63dd      	str	r5, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ece:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8001ed2:	6016      	str	r6, [r2, #0]

  hi2c->XferCount = 0U;
 8001ed4:	854d      	strh	r5, [r1, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001ed6:	6525      	str	r5, [r4, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001ed8:	2400      	movs	r4, #0
 8001eda:	651c      	str	r4, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8001edc:	6813      	ldr	r3, [r2, #0]
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	6013      	str	r3, [r2, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001ee4:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 8001ee8:	2b60      	cmp	r3, #96	; 0x60
 8001eea:	d02a      	beq.n	8001f42 <I2C_DMAAbort+0xca>
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001eec:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8001ef0:	2828      	cmp	r0, #40	; 0x28
 8001ef2:	d019      	beq.n	8001f28 <I2C_DMAAbort+0xb0>
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_LISTEN;
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8001ef4:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef6:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efc:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8001f00:	4608      	mov	r0, r1
 8001f02:	f7ff ff0b 	bl	8001d1c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f06:	b002      	add	sp, #8
 8001f08:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0a:	6815      	ldr	r5, [r2, #0]
 8001f0c:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8001f10:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8001f12:	854b      	strh	r3, [r1, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001f14:	6523      	str	r3, [r4, #80]	; 0x50
 8001f16:	e7e1      	b.n	8001edc <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8001f18:	b1fb      	cbz	r3, 8001f5a <I2C_DMAAbort+0xe2>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1a:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8001f1c:	63dc      	str	r4, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8001f22:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8001f24:	854c      	strh	r4, [r1, #42]	; 0x2a
 8001f26:	e7d7      	b.n	8001ed8 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001f28:	6813      	ldr	r3, [r2, #0]
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f30:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f32:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f38:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f3a:	630c      	str	r4, [r1, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001f3c:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
 8001f40:	e7de      	b.n	8001f00 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f42:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8001f44:	2220      	movs	r2, #32
 8001f46:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
    HAL_I2C_AbortCpltCallback(hi2c);
 8001f4a:	4608      	mov	r0, r1
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f4c:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001f50:	640b      	str	r3, [r1, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001f52:	f7ff ff8f 	bl	8001e74 <HAL_I2C_AbortCpltCallback>
}
 8001f56:	b002      	add	sp, #8
 8001f58:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f5a:	6814      	ldr	r4, [r2, #0]
 8001f5c:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001f60:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8001f62:	854b      	strh	r3, [r1, #42]	; 0x2a
 8001f64:	e7ba      	b.n	8001edc <I2C_DMAAbort+0x64>
 8001f66:	bf00      	nop
 8001f68:	2000000c 	.word	0x2000000c
 8001f6c:	14f8b589 	.word	0x14f8b589

08001f70 <HAL_I2C_EV_IRQHandler>:
{
 8001f70:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f72:	6803      	ldr	r3, [r0, #0]
{
 8001f74:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f76:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f78:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f7a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f7e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f82:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f84:	2a10      	cmp	r2, #16
{
 8001f86:	b08c      	sub	sp, #48	; 0x30
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f88:	d020      	beq.n	8001fcc <HAL_I2C_EV_IRQHandler+0x5c>
 8001f8a:	2a40      	cmp	r2, #64	; 0x40
 8001f8c:	d01e      	beq.n	8001fcc <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f90:	b2c9      	uxtb	r1, r1
 8001f92:	2a00      	cmp	r2, #0
 8001f94:	f000 80bb 	beq.w	800210e <HAL_I2C_EV_IRQHandler+0x19e>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f98:	695a      	ldr	r2, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8001f9a:	2600      	movs	r6, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f9c:	f3c2 0540 	ubfx	r5, r2, #1, #1
 8001fa0:	2d00      	cmp	r5, #0
 8001fa2:	d078      	beq.n	8002096 <HAL_I2C_EV_IRQHandler+0x126>
 8001fa4:	0585      	lsls	r5, r0, #22
 8001fa6:	d57b      	bpl.n	80020a0 <HAL_I2C_EV_IRQHandler+0x130>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fa8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001faa:	b102      	cbz	r2, 8001fae <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fac:	699e      	ldr	r6, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001fae:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001fb2:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001fb6:	2a28      	cmp	r2, #40	; 0x28
 8001fb8:	f000 8215 	beq.w	80023e6 <HAL_I2C_EV_IRQHandler+0x476>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fbc:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 8001fc0:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fc2:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8001fc4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8001fc8:	b00c      	add	sp, #48	; 0x30
 8001fca:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fcc:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fce:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001fd0:	f011 0f01 	tst.w	r1, #1
 8001fd4:	d139      	bne.n	800204a <HAL_I2C_EV_IRQHandler+0xda>
 8001fd6:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8001fda:	d0f5      	beq.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
 8001fdc:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8001fe0:	d0f2      	beq.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe2:	070d      	lsls	r5, r1, #28
 8001fe4:	f140 8099 	bpl.w	800211a <HAL_I2C_EV_IRQHandler+0x1aa>
 8001fe8:	0585      	lsls	r5, r0, #22
 8001fea:	f100 81ed 	bmi.w	80023c8 <HAL_I2C_EV_IRQHandler+0x458>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001fee:	0776      	lsls	r6, r6, #29
 8001ff0:	f140 8100 	bpl.w	80021f4 <HAL_I2C_EV_IRQHandler+0x284>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ff4:	685d      	ldr	r5, [r3, #4]
 8001ff6:	052d      	lsls	r5, r5, #20
 8001ff8:	d4e6      	bmi.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
 8001ffa:	f3c1 0580 	ubfx	r5, r1, #2, #1
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ffe:	0609      	lsls	r1, r1, #24
 8002000:	f140 81a1 	bpl.w	8002346 <HAL_I2C_EV_IRQHandler+0x3d6>
 8002004:	0546      	lsls	r6, r0, #21
 8002006:	f140 819e 	bpl.w	8002346 <HAL_I2C_EV_IRQHandler+0x3d6>
 800200a:	2d00      	cmp	r5, #0
 800200c:	f040 819e 	bne.w	800234c <HAL_I2C_EV_IRQHandler+0x3dc>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002010:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002014:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002016:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800201a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800201c:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800201e:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002020:	2800      	cmp	r0, #0
 8002022:	f040 8378 	bne.w	8002716 <HAL_I2C_EV_IRQHandler+0x7a6>
 8002026:	2a21      	cmp	r2, #33	; 0x21
 8002028:	f000 8428 	beq.w	800287c <HAL_I2C_EV_IRQHandler+0x90c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800202c:	2940      	cmp	r1, #64	; 0x40
 800202e:	d1cb      	bne.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002030:	2a22      	cmp	r2, #34	; 0x22
 8002032:	d1c9      	bne.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->XferCount == 0U)
 8002034:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002036:	b292      	uxth	r2, r2
 8002038:	2a00      	cmp	r2, #0
 800203a:	f000 8440 	beq.w	80028be <HAL_I2C_EV_IRQHandler+0x94e>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800203e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002042:	2a40      	cmp	r2, #64	; 0x40
 8002044:	f040 80b6 	bne.w	80021b4 <HAL_I2C_EV_IRQHandler+0x244>
 8002048:	e186      	b.n	8002358 <HAL_I2C_EV_IRQHandler+0x3e8>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800204a:	0585      	lsls	r5, r0, #22
 800204c:	d562      	bpl.n	8002114 <HAL_I2C_EV_IRQHandler+0x1a4>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800204e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002050:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8002054:	f000 81e2 	beq.w	800241c <HAL_I2C_EV_IRQHandler+0x4ac>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002058:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800205a:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800205e:	bf04      	itt	eq
 8002060:	2208      	moveq	r2, #8
 8002062:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002064:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002068:	2a40      	cmp	r2, #64	; 0x40
 800206a:	f000 81d0 	beq.w	800240e <HAL_I2C_EV_IRQHandler+0x49e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800206e:	6922      	ldr	r2, [r4, #16]
 8002070:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002074:	f000 8190 	beq.w	8002398 <HAL_I2C_EV_IRQHandler+0x428>
      if (hi2c->EventCount == 0U)
 8002078:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800207a:	2a00      	cmp	r2, #0
 800207c:	f000 81d1 	beq.w	8002422 <HAL_I2C_EV_IRQHandler+0x4b2>
      else if (hi2c->EventCount == 1U)
 8002080:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002082:	2a01      	cmp	r2, #1
 8002084:	d1a0      	bne.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002086:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002088:	11d2      	asrs	r2, r2, #7
 800208a:	f002 0206 	and.w	r2, r2, #6
 800208e:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8002092:	611a      	str	r2, [r3, #16]
 8002094:	e798      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002096:	06d6      	lsls	r6, r2, #27
 8002098:	d502      	bpl.n	80020a0 <HAL_I2C_EV_IRQHandler+0x130>
 800209a:	0586      	lsls	r6, r0, #22
 800209c:	f100 80d8 	bmi.w	8002250 <HAL_I2C_EV_IRQHandler+0x2e0>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020a0:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 80020a4:	2921      	cmp	r1, #33	; 0x21
 80020a6:	f3c2 0580 	ubfx	r5, r2, #2, #1
 80020aa:	d04e      	beq.n	800214a <HAL_I2C_EV_IRQHandler+0x1da>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020ac:	0651      	lsls	r1, r2, #25
 80020ae:	f140 808b 	bpl.w	80021c8 <HAL_I2C_EV_IRQHandler+0x258>
 80020b2:	0542      	lsls	r2, r0, #21
 80020b4:	f140 8088 	bpl.w	80021c8 <HAL_I2C_EV_IRQHandler+0x258>
 80020b8:	2d00      	cmp	r5, #0
 80020ba:	f040 8088 	bne.w	80021ce <HAL_I2C_EV_IRQHandler+0x25e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020be:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80020c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020c4:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020c6:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80020c8:	2a00      	cmp	r2, #0
 80020ca:	f43f af7d 	beq.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80020d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80020d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29b      	uxth	r3, r3
 80020dc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80020de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80020e0:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80020e2:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80020e4:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f47f af6e 	bne.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
 80020ec:	292a      	cmp	r1, #42	; 0x2a
 80020ee:	f47f af6b 	bne.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020f2:	6822      	ldr	r2, [r4, #0]
 80020f4:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80020f6:	2522      	movs	r5, #34	; 0x22
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80020fc:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020fe:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002100:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002102:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002104:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002108:	f7ff fda8 	bl	8001c5c <HAL_I2C_SlaveRxCpltCallback>
 800210c:	e75c      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800210e:	699e      	ldr	r6, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	e743      	b.n	8001f9c <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002114:	070d      	lsls	r5, r1, #28
 8002116:	f53f af6a 	bmi.w	8001fee <HAL_I2C_EV_IRQHandler+0x7e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800211a:	078d      	lsls	r5, r1, #30
 800211c:	f57f af67 	bpl.w	8001fee <HAL_I2C_EV_IRQHandler+0x7e>
 8002120:	0585      	lsls	r5, r0, #22
 8002122:	f57f af64 	bpl.w	8001fee <HAL_I2C_EV_IRQHandler+0x7e>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002126:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800212a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800212c:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800212e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002132:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002134:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002136:	f000 8209 	beq.w	800254c <HAL_I2C_EV_IRQHandler+0x5dc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213a:	2200      	movs	r2, #0
 800213c:	9209      	str	r2, [sp, #36]	; 0x24
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	9209      	str	r2, [sp, #36]	; 0x24
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	9309      	str	r3, [sp, #36]	; 0x24
 8002146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002148:	e73e      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800214a:	0612      	lsls	r2, r2, #24
 800214c:	d527      	bpl.n	800219e <HAL_I2C_EV_IRQHandler+0x22e>
 800214e:	0546      	lsls	r6, r0, #21
 8002150:	d525      	bpl.n	800219e <HAL_I2C_EV_IRQHandler+0x22e>
 8002152:	bb3d      	cbnz	r5, 80021a4 <HAL_I2C_EV_IRQHandler+0x234>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002154:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002158:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800215a:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800215c:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 800215e:	2a00      	cmp	r2, #0
 8002160:	f43f af32 	beq.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002164:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002166:	f815 2b01 	ldrb.w	r2, [r5], #1
 800216a:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 800216c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800216e:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002170:	3a01      	subs	r2, #1
 8002172:	b292      	uxth	r2, r2
 8002174:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002176:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002178:	b292      	uxth	r2, r2
 800217a:	2a00      	cmp	r2, #0
 800217c:	f47f af24 	bne.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
 8002180:	2829      	cmp	r0, #41	; 0x29
 8002182:	f47f af21 	bne.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002186:	685a      	ldr	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002188:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800218a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218e:	605a      	str	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002190:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002192:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002194:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002198:	f7ff fd5e 	bl	8001c58 <HAL_I2C_SlaveTxCpltCallback>
 800219c:	e714      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800219e:	2d00      	cmp	r5, #0
 80021a0:	f43f af12 	beq.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
 80021a4:	0580      	lsls	r0, r0, #22
 80021a6:	f57f af0f 	bpl.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 80021aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80021ac:	b292      	uxth	r2, r2
 80021ae:	2a00      	cmp	r2, #0
 80021b0:	f43f af0a 	beq.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021b6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80021ba:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 80021bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80021be:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80021c6:	e6ff      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021c8:	2d00      	cmp	r5, #0
 80021ca:	f43f aefd 	beq.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
 80021ce:	0586      	lsls	r6, r0, #22
 80021d0:	f57f aefa 	bpl.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 80021d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80021d6:	b292      	uxth	r2, r2
 80021d8:	2a00      	cmp	r2, #0
 80021da:	f43f aef5 	beq.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80021e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80021e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80021ec:	3201      	adds	r2, #1
    hi2c->XferCount--;
 80021ee:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80021f0:	6262      	str	r2, [r4, #36]	; 0x24
 80021f2:	e6e9      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	0516      	lsls	r6, r2, #20
 80021f8:	f53f aee6 	bmi.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021fc:	064d      	lsls	r5, r1, #25
 80021fe:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8002202:	f140 80af 	bpl.w	8002364 <HAL_I2C_EV_IRQHandler+0x3f4>
 8002206:	0541      	lsls	r1, r0, #21
 8002208:	f140 80ac 	bpl.w	8002364 <HAL_I2C_EV_IRQHandler+0x3f4>
 800220c:	2a00      	cmp	r2, #0
 800220e:	f040 80ac 	bne.w	800236a <HAL_I2C_EV_IRQHandler+0x3fa>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002212:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002216:	2922      	cmp	r1, #34	; 0x22
 8002218:	f47f aed6 	bne.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    tmp = hi2c->XferCount;
 800221c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800221e:	b289      	uxth	r1, r1
    if (tmp > 3U)
 8002220:	2903      	cmp	r1, #3
 8002222:	f240 82ea 	bls.w	80027fa <HAL_I2C_EV_IRQHandler+0x88a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002226:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 800222c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800222e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002230:	3b01      	subs	r3, #1
 8002232:	b29b      	uxth	r3, r3
 8002234:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8002236:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800223a:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 800223c:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 800223e:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8002240:	f47f aec2 	bne.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002244:	6822      	ldr	r2, [r4, #0]
 8002246:	6853      	ldr	r3, [r2, #4]
 8002248:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800224c:	6053      	str	r3, [r2, #4]
 800224e:	e6bb      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002250:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800225a:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800225c:	950b      	str	r5, [sp, #44]	; 0x2c
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	920b      	str	r2, [sp, #44]	; 0x2c
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002272:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002274:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002276:	b2cd      	uxtb	r5, r1
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002278:	0511      	lsls	r1, r2, #20
 800227a:	d521      	bpl.n	80022c0 <HAL_I2C_EV_IRQHandler+0x350>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800227c:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8002280:	2a22      	cmp	r2, #34	; 0x22
 8002282:	f000 813e 	beq.w	8002502 <HAL_I2C_EV_IRQHandler+0x592>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002286:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002288:	6802      	ldr	r2, [r0, #0]
 800228a:	6852      	ldr	r2, [r2, #4]
 800228c:	b292      	uxth	r2, r2
 800228e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002290:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002292:	b292      	uxth	r2, r2
 8002294:	b11a      	cbz	r2, 800229e <HAL_I2C_EV_IRQHandler+0x32e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002296:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002298:	f042 0204 	orr.w	r2, r2, #4
 800229c:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a4:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022a6:	f7ff f86d 	bl	8001384 <HAL_DMA_GetState>
 80022aa:	2801      	cmp	r0, #1
 80022ac:	d008      	beq.n	80022c0 <HAL_I2C_EV_IRQHandler+0x350>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80022ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80022b0:	4ba4      	ldr	r3, [pc, #656]	; (8002544 <HAL_I2C_EV_IRQHandler+0x5d4>)
 80022b2:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80022b4:	f7fe ff7e 	bl	80011b4 <HAL_DMA_Abort_IT>
 80022b8:	b110      	cbz	r0, 80022c0 <HAL_I2C_EV_IRQHandler+0x350>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80022bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80022be:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80022c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	b313      	cbz	r3, 800230c <HAL_I2C_EV_IRQHandler+0x39c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	0752      	lsls	r2, r2, #29
 80022cc:	d50a      	bpl.n	80022e4 <HAL_I2C_EV_IRQHandler+0x374>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80022d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80022d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80022d8:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 80022da:	3a01      	subs	r2, #1
 80022dc:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80022de:	3101      	adds	r1, #1
      hi2c->XferCount--;
 80022e0:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80022e2:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	0656      	lsls	r6, r2, #25
 80022e8:	d509      	bpl.n	80022fe <HAL_I2C_EV_IRQHandler+0x38e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80022f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80022f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80022f8:	3201      	adds	r2, #1
      hi2c->XferCount--;
 80022fa:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80022fc:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 80022fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	b11b      	cbz	r3, 800230c <HAL_I2C_EV_IRQHandler+0x39c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002304:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800230c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 8095 	bne.w	800243e <HAL_I2C_EV_IRQHandler+0x4ce>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002314:	2d2a      	cmp	r5, #42	; 0x2a
 8002316:	f000 8159 	beq.w	80025cc <HAL_I2C_EV_IRQHandler+0x65c>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800231a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800231e:	2b28      	cmp	r3, #40	; 0x28
 8002320:	f000 80dd 	beq.w	80024de <HAL_I2C_EV_IRQHandler+0x56e>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002324:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002326:	2b22      	cmp	r3, #34	; 0x22
 8002328:	d002      	beq.n	8002330 <HAL_I2C_EV_IRQHandler+0x3c0>
 800232a:	2d22      	cmp	r5, #34	; 0x22
 800232c:	f47f ae4c 	bne.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002330:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002332:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002334:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002336:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8002338:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002340:	f7ff fc8c 	bl	8001c5c <HAL_I2C_SlaveRxCpltCallback>
 8002344:	e640      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002346:	2d00      	cmp	r5, #0
 8002348:	f43f ae3e 	beq.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
 800234c:	0581      	lsls	r1, r0, #22
 800234e:	f57f ae3b 	bpl.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8002352:	2a10      	cmp	r2, #16
 8002354:	f000 8142 	beq.w	80025dc <HAL_I2C_EV_IRQHandler+0x66c>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002358:	4620      	mov	r0, r4
}
 800235a:	b00c      	add	sp, #48	; 0x30
 800235c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002360:	f7ff bc80 	b.w	8001c64 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002364:	2a00      	cmp	r2, #0
 8002366:	f43f ae2f 	beq.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
 800236a:	0586      	lsls	r6, r0, #22
 800236c:	f57f ae2c 	bpl.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002370:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8002372:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002374:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002376:	b292      	uxth	r2, r2
 8002378:	2a04      	cmp	r2, #4
 800237a:	f000 8182 	beq.w	8002682 <HAL_I2C_EV_IRQHandler+0x712>
  else if (hi2c->XferCount == 3U)
 800237e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002380:	b292      	uxth	r2, r2
 8002382:	2a03      	cmp	r2, #3
 8002384:	f000 8184 	beq.w	8002690 <HAL_I2C_EV_IRQHandler+0x720>
  else if (hi2c->XferCount == 2U)
 8002388:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800238a:	b292      	uxth	r2, r2
 800238c:	2a02      	cmp	r2, #2
 800238e:	f000 81fc 	beq.w	800278a <HAL_I2C_EV_IRQHandler+0x81a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	700b      	strb	r3, [r1, #0]
 8002396:	e725      	b.n	80021e4 <HAL_I2C_EV_IRQHandler+0x274>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002398:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800239c:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800239e:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023a0:	bf16      	itet	ne
 80023a2:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023a6:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023aa:	b2d2      	uxtbne	r2, r2
 80023ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80023ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80023b0:	2a00      	cmp	r2, #0
 80023b2:	f000 80e8 	beq.w	8002586 <HAL_I2C_EV_IRQHandler+0x616>
 80023b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023b8:	2a00      	cmp	r2, #0
 80023ba:	f000 80e4 	beq.w	8002586 <HAL_I2C_EV_IRQHandler+0x616>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	e5ff      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80023c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80023ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023cc:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80023ce:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80023d0:	2900      	cmp	r1, #0
 80023d2:	f000 8091 	beq.w	80024f8 <HAL_I2C_EV_IRQHandler+0x588>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80023d6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80023d8:	2a00      	cmp	r2, #0
 80023da:	d1f0      	bne.n	80023be <HAL_I2C_EV_IRQHandler+0x44e>
 80023dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80023de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023e0:	2a00      	cmp	r2, #0
 80023e2:	d1ec      	bne.n	80023be <HAL_I2C_EV_IRQHandler+0x44e>
 80023e4:	e5f0      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ec:	605a      	str	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80023ee:	ea6f 0196 	mvn.w	r1, r6, lsr #2
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80023f2:	0633      	lsls	r3, r6, #24
    __HAL_UNLOCK(hi2c);
 80023f4:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80023f8:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80023fc:	bf54      	ite	pl
 80023fe:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002400:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8002402:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002406:	4620      	mov	r0, r4
 8002408:	f7fe f990 	bl	800072c <HAL_I2C_AddrCallback>
 800240c:	e5dc      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->EventCount == 0U)
 800240e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002410:	b97a      	cbnz	r2, 8002432 <HAL_I2C_EV_IRQHandler+0x4c2>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002412:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002414:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002418:	611a      	str	r2, [r3, #16]
 800241a:	e5d5      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800241c:	2201      	movs	r2, #1
 800241e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002420:	e620      	b.n	8002064 <HAL_I2C_EV_IRQHandler+0xf4>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002422:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002424:	11d2      	asrs	r2, r2, #7
 8002426:	f002 0206 	and.w	r2, r2, #6
 800242a:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 800242e:	611a      	str	r2, [r3, #16]
 8002430:	e5ca      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002432:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	e5c4      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800243e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002442:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800244a:	2a10      	cmp	r2, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800244c:	b2c9      	uxtb	r1, r1
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800244e:	f000 809f 	beq.w	8002590 <HAL_I2C_EV_IRQHandler+0x620>
 8002452:	2a40      	cmp	r2, #64	; 0x40
 8002454:	f000 809c 	beq.w	8002590 <HAL_I2C_EV_IRQHandler+0x620>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002458:	f001 0228 	and.w	r2, r1, #40	; 0x28
 800245c:	2a28      	cmp	r2, #40	; 0x28
 800245e:	f000 80e3 	beq.w	8002628 <HAL_I2C_EV_IRQHandler+0x6b8>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	0510      	lsls	r0, r2, #20
 8002466:	d407      	bmi.n	8002478 <HAL_I2C_EV_IRQHandler+0x508>
 8002468:	2960      	cmp	r1, #96	; 0x60
 800246a:	d005      	beq.n	8002478 <HAL_I2C_EV_IRQHandler+0x508>
      hi2c->State = HAL_I2C_STATE_READY;
 800246c:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800246e:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002470:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002474:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8002478:	2200      	movs	r2, #0
 800247a:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002482:	f000 8091 	beq.w	80025a8 <HAL_I2C_EV_IRQHandler+0x638>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002486:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002488:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800248a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002490:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002494:	2b01      	cmp	r3, #1
 8002496:	f000 810a 	beq.w	80026ae <HAL_I2C_EV_IRQHandler+0x73e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_I2C_EV_IRQHandler+0x5d4>)
 800249c:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800249e:	f7fe fe89 	bl	80011b4 <HAL_DMA_Abort_IT>
 80024a2:	b150      	cbz	r0, 80024ba <HAL_I2C_EV_IRQHandler+0x54a>
        __HAL_I2C_DISABLE(hi2c);
 80024a4:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80024a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80024a8:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80024aa:	6d01      	ldr	r1, [r0, #80]	; 0x50
        __HAL_I2C_DISABLE(hi2c);
 80024ac:	f023 0301 	bic.w	r3, r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80024b0:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 80024b2:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80024b4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80024b8:	4788      	blx	r1
  CurrentError = hi2c->ErrorCode;
 80024ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80024bc:	0718      	lsls	r0, r3, #28
 80024be:	d004      	beq.n	80024ca <HAL_I2C_EV_IRQHandler+0x55a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024c0:	6822      	ldr	r2, [r4, #0]
 80024c2:	6853      	ldr	r3, [r2, #4]
 80024c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024c8:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 80024ca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80024ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024d0:	0751      	lsls	r1, r2, #29
  CurrentState = hi2c->State;
 80024d2:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80024d4:	f57f ad78 	bpl.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
 80024d8:	2b28      	cmp	r3, #40	; 0x28
 80024da:	f47f ad75 	bne.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <HAL_I2C_EV_IRQHandler+0x5d8>)
 80024e0:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 80024e8:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80024f2:	f7fe f975 	bl	80007e0 <HAL_I2C_ListenCpltCallback>
 80024f6:	e567      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80024f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80024fa:	2a00      	cmp	r2, #0
 80024fc:	f47f af6b 	bne.w	80023d6 <HAL_I2C_EV_IRQHandler+0x466>
 8002500:	e562      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002502:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002504:	6802      	ldr	r2, [r0, #0]
 8002506:	6852      	ldr	r2, [r2, #4]
 8002508:	b292      	uxth	r2, r2
 800250a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800250c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800250e:	b292      	uxth	r2, r2
 8002510:	b11a      	cbz	r2, 800251a <HAL_I2C_EV_IRQHandler+0x5aa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002512:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002514:	f042 0204 	orr.w	r2, r2, #4
 8002518:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002520:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002522:	f7fe ff2f 	bl	8001384 <HAL_DMA_GetState>
 8002526:	2801      	cmp	r0, #1
 8002528:	f43f aeca 	beq.w	80022c0 <HAL_I2C_EV_IRQHandler+0x350>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800252c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_I2C_EV_IRQHandler+0x5d4>)
 8002530:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002532:	f7fe fe3f 	bl	80011b4 <HAL_DMA_Abort_IT>
 8002536:	2800      	cmp	r0, #0
 8002538:	f43f aec2 	beq.w	80022c0 <HAL_I2C_EV_IRQHandler+0x350>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800253c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800253e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002540:	4798      	blx	r3
 8002542:	e6bd      	b.n	80022c0 <HAL_I2C_EV_IRQHandler+0x350>
 8002544:	08001e79 	.word	0x08001e79
 8002548:	ffff0000 	.word	0xffff0000
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800254c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800254e:	b911      	cbnz	r1, 8002556 <HAL_I2C_EV_IRQHandler+0x5e6>
 8002550:	2a40      	cmp	r2, #64	; 0x40
 8002552:	f000 80e4 	beq.w	800271e <HAL_I2C_EV_IRQHandler+0x7ae>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002556:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002558:	b922      	cbnz	r2, 8002564 <HAL_I2C_EV_IRQHandler+0x5f4>
 800255a:	6921      	ldr	r1, [r4, #16]
 800255c:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8002560:	f000 80e4 	beq.w	800272c <HAL_I2C_EV_IRQHandler+0x7bc>
      if (hi2c->XferCount == 0U)
 8002564:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002566:	b292      	uxth	r2, r2
 8002568:	2a00      	cmp	r2, #0
 800256a:	d162      	bne.n	8002632 <HAL_I2C_EV_IRQHandler+0x6c2>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256c:	9202      	str	r2, [sp, #8]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	9202      	str	r2, [sp, #8]
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	9202      	str	r2, [sp, #8]
 8002576:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	6523      	str	r3, [r4, #80]	; 0x50
 8002584:	e520      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002586:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002588:	2a00      	cmp	r2, #0
 800258a:	f47f af28 	bne.w	80023de <HAL_I2C_EV_IRQHandler+0x46e>
 800258e:	e51b      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002590:	2922      	cmp	r1, #34	; 0x22
 8002592:	f47f af61 	bne.w	8002458 <HAL_I2C_EV_IRQHandler+0x4e8>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800259c:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	0515      	lsls	r5, r2, #20
 80025a2:	f53f af69 	bmi.w	8002478 <HAL_I2C_EV_IRQHandler+0x508>
 80025a6:	e761      	b.n	800246c <HAL_I2C_EV_IRQHandler+0x4fc>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80025a8:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80025ac:	2960      	cmp	r1, #96	; 0x60
 80025ae:	f000 809c 	beq.w	80026ea <HAL_I2C_EV_IRQHandler+0x77a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	0655      	lsls	r5, r2, #25
 80025b6:	d505      	bpl.n	80025c4 <HAL_I2C_EV_IRQHandler+0x654>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80025be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025c0:	3301      	adds	r3, #1
 80025c2:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80025c4:	4620      	mov	r0, r4
 80025c6:	f7ff fba9 	bl	8001d1c <HAL_I2C_ErrorCallback>
 80025ca:	e776      	b.n	80024ba <HAL_I2C_EV_IRQHandler+0x54a>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80025cc:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 80025ce:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025d0:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80025d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025d6:	f7ff fb41 	bl	8001c5c <HAL_I2C_SlaveRxCpltCallback>
 80025da:	e69e      	b.n	800231a <HAL_I2C_EV_IRQHandler+0x3aa>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025de:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80025e2:	2a21      	cmp	r2, #33	; 0x21
 80025e4:	f47f acf0 	bne.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->XferCount != 0U)
 80025e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80025ea:	b292      	uxth	r2, r2
 80025ec:	2a00      	cmp	r2, #0
 80025ee:	f47f ade1 	bne.w	80021b4 <HAL_I2C_EV_IRQHandler+0x244>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025f2:	2908      	cmp	r1, #8
 80025f4:	d005      	beq.n	8002602 <HAL_I2C_EV_IRQHandler+0x692>
 80025f6:	2920      	cmp	r1, #32
 80025f8:	d003      	beq.n	8002602 <HAL_I2C_EV_IRQHandler+0x692>
 80025fa:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80025fe:	f040 81dc 	bne.w	80029ba <HAL_I2C_EV_IRQHandler+0xa4a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002608:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260a:	681a      	ldr	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800260c:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        hi2c->State = HAL_I2C_STATE_READY;
 8002612:	2520      	movs	r5, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002614:	601a      	str	r2, [r3, #0]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002616:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 8002618:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800261a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800261e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002622:	f7ff fb15 	bl	8001c50 <HAL_I2C_MasterTxCpltCallback>
 8002626:	e4cf      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002628:	2100      	movs	r1, #0
 800262a:	6321      	str	r1, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800262c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8002630:	e724      	b.n	800247c <HAL_I2C_EV_IRQHandler+0x50c>
      else if (hi2c->XferCount == 1U)
 8002632:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002634:	b292      	uxth	r2, r2
 8002636:	2a01      	cmp	r2, #1
 8002638:	f000 8086 	beq.w	8002748 <HAL_I2C_EV_IRQHandler+0x7d8>
      else if (hi2c->XferCount == 2U)
 800263c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800263e:	b292      	uxth	r2, r2
 8002640:	2a02      	cmp	r2, #2
 8002642:	f000 8142 	beq.w	80028ca <HAL_I2C_EV_IRQHandler+0x95a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800264c:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	0511      	lsls	r1, r2, #20
 8002652:	d50e      	bpl.n	8002672 <HAL_I2C_EV_IRQHandler+0x702>
 8002654:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8002658:	d007      	beq.n	800266a <HAL_I2C_EV_IRQHandler+0x6fa>
 800265a:	3801      	subs	r0, #1
 800265c:	281f      	cmp	r0, #31
 800265e:	d808      	bhi.n	8002672 <HAL_I2C_EV_IRQHandler+0x702>
 8002660:	4aab      	ldr	r2, [pc, #684]	; (8002910 <HAL_I2C_EV_IRQHandler+0x9a0>)
 8002662:	fa22 f000 	lsr.w	r0, r2, r0
 8002666:	07c2      	lsls	r2, r0, #31
 8002668:	d503      	bpl.n	8002672 <HAL_I2C_EV_IRQHandler+0x702>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002670:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2200      	movs	r2, #0
 8002674:	9208      	str	r2, [sp, #32]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	9208      	str	r2, [sp, #32]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	9308      	str	r3, [sp, #32]
 800267e:	9b08      	ldr	r3, [sp, #32]
 8002680:	e77e      	b.n	8002580 <HAL_I2C_EV_IRQHandler+0x610>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002688:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	700b      	strb	r3, [r1, #0]
 800268e:	e5a9      	b.n	80021e4 <HAL_I2C_EV_IRQHandler+0x274>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002690:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002692:	2804      	cmp	r0, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002698:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800269a:	f43f ae7a 	beq.w	8002392 <HAL_I2C_EV_IRQHandler+0x422>
 800269e:	2802      	cmp	r0, #2
 80026a0:	f43f ae77 	beq.w	8002392 <HAL_I2C_EV_IRQHandler+0x422>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e671      	b.n	8002392 <HAL_I2C_EV_IRQHandler+0x422>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80026ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80026b0:	4b98      	ldr	r3, [pc, #608]	; (8002914 <HAL_I2C_EV_IRQHandler+0x9a4>)
 80026b2:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80026b4:	f7fe fd7e 	bl	80011b4 <HAL_DMA_Abort_IT>
 80026b8:	2800      	cmp	r0, #0
 80026ba:	f43f aefe 	beq.w	80024ba <HAL_I2C_EV_IRQHandler+0x54a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	0652      	lsls	r2, r2, #25
 80026c4:	d506      	bpl.n	80026d4 <HAL_I2C_EV_IRQHandler+0x764>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80026cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	3201      	adds	r2, #1
 80026d2:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80026d4:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80026d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80026d8:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80026de:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80026e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
        hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80026e6:	4798      	blx	r3
 80026e8:	e6e7      	b.n	80024ba <HAL_I2C_EV_IRQHandler+0x54a>
    hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	2120      	movs	r1, #32
 80026ec:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f0:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	0656      	lsls	r6, r2, #25
 80026f6:	d506      	bpl.n	8002706 <HAL_I2C_EV_IRQHandler+0x796>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80026fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	3201      	adds	r2, #1
 8002704:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800270e:	4620      	mov	r0, r4
 8002710:	f7ff fbb0 	bl	8001e74 <HAL_I2C_AbortCpltCallback>
 8002714:	e6d1      	b.n	80024ba <HAL_I2C_EV_IRQHandler+0x54a>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002716:	2a21      	cmp	r2, #33	; 0x21
 8002718:	f43f ac8c 	beq.w	8002034 <HAL_I2C_EV_IRQHandler+0xc4>
 800271c:	e486      	b.n	800202c <HAL_I2C_EV_IRQHandler+0xbc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271e:	9100      	str	r1, [sp, #0]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	9200      	str	r2, [sp, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	9b00      	ldr	r3, [sp, #0]
 800272a:	e44d      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272c:	9201      	str	r2, [sp, #4]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	9201      	str	r2, [sp, #4]
 8002732:	699a      	ldr	r2, [r3, #24]
 8002734:	9201      	str	r2, [sp, #4]
 8002736:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800273e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002740:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002742:	3301      	adds	r3, #1
 8002744:	6523      	str	r3, [r4, #80]	; 0x50
 8002746:	e43f      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002748:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800274c:	f000 8104 	beq.w	8002958 <HAL_I2C_EV_IRQHandler+0x9e8>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002750:	2808      	cmp	r0, #8
 8002752:	f000 80f1 	beq.w	8002938 <HAL_I2C_EV_IRQHandler+0x9c8>
 8002756:	2820      	cmp	r0, #32
 8002758:	f000 80ee 	beq.w	8002938 <HAL_I2C_EV_IRQHandler+0x9c8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800275c:	2d12      	cmp	r5, #18
 800275e:	f000 80e8 	beq.w	8002932 <HAL_I2C_EV_IRQHandler+0x9c2>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002762:	2810      	cmp	r0, #16
 8002764:	d805      	bhi.n	8002772 <HAL_I2C_EV_IRQHandler+0x802>
 8002766:	4a6c      	ldr	r2, [pc, #432]	; (8002918 <HAL_I2C_EV_IRQHandler+0x9a8>)
 8002768:	fa22 f000 	lsr.w	r0, r2, r0
 800276c:	07c2      	lsls	r2, r0, #31
 800276e:	f100 811f 	bmi.w	80029b0 <HAL_I2C_EV_IRQHandler+0xa40>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2200      	movs	r2, #0
 800277c:	9205      	str	r2, [sp, #20]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	9205      	str	r2, [sp, #20]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	9305      	str	r3, [sp, #20]
 8002786:	9b05      	ldr	r3, [sp, #20]
 8002788:	e6fa      	b.n	8002580 <HAL_I2C_EV_IRQHandler+0x610>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800278a:	2801      	cmp	r0, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278c:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800278e:	d071      	beq.n	8002874 <HAL_I2C_EV_IRQHandler+0x904>
 8002790:	2810      	cmp	r0, #16
 8002792:	d06f      	beq.n	8002874 <HAL_I2C_EV_IRQHandler+0x904>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002794:	2804      	cmp	r0, #4
 8002796:	f000 80fc 	beq.w	8002992 <HAL_I2C_EV_IRQHandler+0xa22>
 800279a:	2802      	cmp	r0, #2
 800279c:	f000 80f9 	beq.w	8002992 <HAL_I2C_EV_IRQHandler+0xa22>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80027aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80027ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ae:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b6:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 80027b8:	1c51      	adds	r1, r2, #1
 80027ba:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027bc:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 80027be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027c0:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 80027c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027ca:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 80027cc:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 80027d4:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027d6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027dc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	f000 80cd 	beq.w	8002980 <HAL_I2C_EV_IRQHandler+0xa10>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e6:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027e8:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ea:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80027ee:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027f0:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80027f2:	f7ff fa2f 	bl	8001c54 <HAL_I2C_MasterRxCpltCallback>
 80027f6:	f7ff bbe7 	b.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80027fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80027fc:	2802      	cmp	r0, #2
 80027fe:	f43f abe3 	beq.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
 8002802:	2901      	cmp	r1, #1
 8002804:	f63f abe0 	bhi.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002808:	4944      	ldr	r1, [pc, #272]	; (800291c <HAL_I2C_EV_IRQHandler+0x9ac>)
  __IO uint32_t count = 0U;
 800280a:	920a      	str	r2, [sp, #40]	; 0x28
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800280c:	680a      	ldr	r2, [r1, #0]
 800280e:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002812:	fbb2 f2f1 	udiv	r2, r2, r1
 8002816:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800281a:	920a      	str	r2, [sp, #40]	; 0x28
    count--;
 800281c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800281e:	3a01      	subs	r2, #1
 8002820:	920a      	str	r2, [sp, #40]	; 0x28
    if (count == 0U)
 8002822:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002824:	2900      	cmp	r1, #0
 8002826:	f000 80ea 	beq.w	80029fe <HAL_I2C_EV_IRQHandler+0xa8e>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8002830:	d1f4      	bne.n	800281c <HAL_I2C_EV_IRQHandler+0x8ac>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002832:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002834:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002836:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800283a:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800283c:	6859      	ldr	r1, [r3, #4]
 800283e:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002842:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8002848:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800284a:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800284c:	3b01      	subs	r3, #1
 800284e:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8002850:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8002852:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002854:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002858:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 800285c:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800285e:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 8002860:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002862:	d1c1      	bne.n	80027e8 <HAL_I2C_EV_IRQHandler+0x878>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002864:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002868:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 800286a:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800286c:	f7ff fa54 	bl	8001d18 <HAL_I2C_MemRxCpltCallback>
 8002870:	f7ff bbaa 	b.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e794      	b.n	80027a6 <HAL_I2C_EV_IRQHandler+0x836>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800287c:	2d08      	cmp	r5, #8
 800287e:	d005      	beq.n	800288c <HAL_I2C_EV_IRQHandler+0x91c>
 8002880:	2d20      	cmp	r5, #32
 8002882:	d003      	beq.n	800288c <HAL_I2C_EV_IRQHandler+0x91c>
 8002884:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8002888:	f040 80a8 	bne.w	80029dc <HAL_I2C_EV_IRQHandler+0xa6c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002892:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002894:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002896:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002898:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800289e:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80028a0:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028a6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028aa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028ae:	2b40      	cmp	r3, #64	; 0x40
        HAL_I2C_MemTxCpltCallback(hi2c);
 80028b0:	4620      	mov	r0, r4
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028b2:	f000 808f 	beq.w	80029d4 <HAL_I2C_EV_IRQHandler+0xa64>
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028b6:	f7ff f9cb 	bl	8001c50 <HAL_I2C_MasterTxCpltCallback>
 80028ba:	f7ff bb85 	b.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	f7ff bb7f 	b.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80028ca:	2810      	cmp	r0, #16
 80028cc:	d928      	bls.n	8002920 <HAL_I2C_EV_IRQHandler+0x9b0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d4:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028dc:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	0515      	lsls	r5, r2, #20
 80028e2:	d50d      	bpl.n	8002900 <HAL_I2C_EV_IRQHandler+0x990>
 80028e4:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80028e8:	d006      	beq.n	80028f8 <HAL_I2C_EV_IRQHandler+0x988>
 80028ea:	3801      	subs	r0, #1
 80028ec:	281f      	cmp	r0, #31
 80028ee:	d807      	bhi.n	8002900 <HAL_I2C_EV_IRQHandler+0x990>
 80028f0:	4a07      	ldr	r2, [pc, #28]	; (8002910 <HAL_I2C_EV_IRQHandler+0x9a0>)
 80028f2:	40c2      	lsrs	r2, r0
 80028f4:	07d0      	lsls	r0, r2, #31
 80028f6:	d503      	bpl.n	8002900 <HAL_I2C_EV_IRQHandler+0x990>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028fe:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002900:	2200      	movs	r2, #0
 8002902:	9207      	str	r2, [sp, #28]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	9207      	str	r2, [sp, #28]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	9307      	str	r3, [sp, #28]
 800290c:	9b07      	ldr	r3, [sp, #28]
 800290e:	e637      	b.n	8002580 <HAL_I2C_EV_IRQHandler+0x610>
 8002910:	80008081 	.word	0x80008081
 8002914:	08001e79 	.word	0x08001e79
 8002918:	00010014 	.word	0x00010014
 800291c:	2000000c 	.word	0x2000000c
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002920:	4a45      	ldr	r2, [pc, #276]	; (8002a38 <HAL_I2C_EV_IRQHandler+0xac8>)
 8002922:	40c2      	lsrs	r2, r0
 8002924:	07d6      	lsls	r6, r2, #31
 8002926:	d5d2      	bpl.n	80028ce <HAL_I2C_EV_IRQHandler+0x95e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e7d5      	b.n	80028de <HAL_I2C_EV_IRQHandler+0x96e>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002932:	2801      	cmp	r0, #1
 8002934:	f43f af1d 	beq.w	8002772 <HAL_I2C_EV_IRQHandler+0x802>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002938:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293a:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002940:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002942:	9106      	str	r1, [sp, #24]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	9206      	str	r2, [sp, #24]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	9206      	str	r2, [sp, #24]
 800294c:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e613      	b.n	8002580 <HAL_I2C_EV_IRQHandler+0x610>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295e:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002966:	d018      	beq.n	800299a <HAL_I2C_EV_IRQHandler+0xa2a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002968:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296a:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002970:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002972:	9103      	str	r1, [sp, #12]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	9203      	str	r2, [sp, #12]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	9303      	str	r3, [sp, #12]
 800297c:	9b03      	ldr	r3, [sp, #12]
 800297e:	e5ff      	b.n	8002580 <HAL_I2C_EV_IRQHandler+0x610>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	2300      	movs	r3, #0
 8002982:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002986:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8002988:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800298a:	f7ff f9c5 	bl	8001d18 <HAL_I2C_MemRxCpltCallback>
 800298e:	f7ff bb1b 	b.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	e705      	b.n	80027a6 <HAL_I2C_EV_IRQHandler+0x836>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299a:	9204      	str	r2, [sp, #16]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	9204      	str	r2, [sp, #16]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	9204      	str	r2, [sp, #16]
 80029a4:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e5e7      	b.n	8002580 <HAL_I2C_EV_IRQHandler+0x610>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e6df      	b.n	800277a <HAL_I2C_EV_IRQHandler+0x80a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029ba:	6859      	ldr	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029bc:	2611      	movs	r6, #17
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029be:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029c4:	6059      	str	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80029c6:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029c8:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ca:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 80029d2:	e770      	b.n	80028b6 <HAL_I2C_EV_IRQHandler+0x946>
        HAL_I2C_MemTxCpltCallback(hi2c);
 80029d4:	f7ff f944 	bl	8001c60 <HAL_I2C_MemTxCpltCallback>
 80029d8:	f7ff baf6 	b.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029dc:	685a      	ldr	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029de:	2611      	movs	r6, #17
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029e8:	605a      	str	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80029ea:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029ec:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ee:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80029f6:	f7ff f92b 	bl	8001c50 <HAL_I2C_MasterTxCpltCallback>
 80029fa:	f7ff bae5 	b.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a00:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a02:	f042 0220 	orr.w	r2, r2, #32
 8002a06:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a0e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8002a14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8002a16:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8002a1c:	3201      	adds	r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8002a20:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8002a22:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 8002a28:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002a2e:	f7ff f975 	bl	8001d1c <HAL_I2C_ErrorCallback>
 8002a32:	f7ff bac9 	b.w	8001fc8 <HAL_I2C_EV_IRQHandler+0x58>
 8002a36:	bf00      	nop
 8002a38:	00010014 	.word	0x00010014

08002a3c <HAL_I2C_ER_IRQHandler>:
{
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002a3e:	6803      	ldr	r3, [r0, #0]
 8002a40:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002a42:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a44:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8002a48:	b2ce      	uxtb	r6, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a4a:	05e9      	lsls	r1, r5, #23
{
 8002a4c:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002a4e:	469c      	mov	ip, r3
 8002a50:	f3c5 2040 	ubfx	r0, r5, #9, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a54:	d57e      	bpl.n	8002b54 <HAL_I2C_ER_IRQHandler+0x118>
 8002a56:	0a11      	lsrs	r1, r2, #8
 8002a58:	07cf      	lsls	r7, r1, #31
 8002a5a:	d57b      	bpl.n	8002b54 <HAL_I2C_ER_IRQHandler+0x118>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a5c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a60:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a62:	2800      	cmp	r0, #0
 8002a64:	f040 8085 	bne.w	8002b72 <HAL_I2C_ER_IRQHandler+0x136>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a68:	0568      	lsls	r0, r5, #21
 8002a6a:	f140 80da 	bpl.w	8002c22 <HAL_I2C_ER_IRQHandler+0x1e6>
    error |= HAL_I2C_ERROR_BERR;
 8002a6e:	2701      	movs	r7, #1
    tmp2 = hi2c->XferCount;
 8002a70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8002a72:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8002a76:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002a78:	2e20      	cmp	r6, #32
    tmp2 = hi2c->XferCount;
 8002a7a:	b292      	uxth	r2, r2
    tmp3 = hi2c->State;
 8002a7c:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002a7e:	f000 80af 	beq.w	8002be0 <HAL_I2C_ER_IRQHandler+0x1a4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a86:	2e10      	cmp	r6, #16
      error |= HAL_I2C_ERROR_AF;
 8002a88:	f047 0704 	orr.w	r7, r7, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8c:	615a      	str	r2, [r3, #20]
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_ER_IRQHandler+0x58>
 8002a90:	2e40      	cmp	r6, #64	; 0x40
 8002a92:	d103      	bne.n	8002a9c <HAL_I2C_ER_IRQHandler+0x60>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9a:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a9c:	052e      	lsls	r6, r5, #20
 8002a9e:	469c      	mov	ip, r3
 8002aa0:	d505      	bpl.n	8002aae <HAL_I2C_ER_IRQHandler+0x72>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002aa2:	f46f 6300 	mvn.w	r3, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8002aa6:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002aaa:	f8cc 3014 	str.w	r3, [ip, #20]
    hi2c->ErrorCode |= error;
 8002aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ab0:	431f      	orrs	r7, r3
 8002ab2:	6427      	str	r7, [r4, #64]	; 0x40
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ab4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002ab8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002abc:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002abe:	2b10      	cmp	r3, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ac0:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ac2:	d068      	beq.n	8002b96 <HAL_I2C_ER_IRQHandler+0x15a>
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d066      	beq.n	8002b96 <HAL_I2C_ER_IRQHandler+0x15a>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ac8:	f002 0328 	and.w	r3, r2, #40	; 0x28
 8002acc:	2b28      	cmp	r3, #40	; 0x28
 8002ace:	f000 8082 	beq.w	8002bd6 <HAL_I2C_ER_IRQHandler+0x19a>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002ad2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002ad6:	051d      	lsls	r5, r3, #20
 8002ad8:	d407      	bmi.n	8002aea <HAL_I2C_ER_IRQHandler+0xae>
 8002ada:	2a60      	cmp	r2, #96	; 0x60
 8002adc:	d005      	beq.n	8002aea <HAL_I2C_ER_IRQHandler+0xae>
      hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae0:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002aee:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002af2:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002af6:	d05b      	beq.n	8002bb0 <HAL_I2C_ER_IRQHandler+0x174>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002af8:	f8dc 3004 	ldr.w	r3, [ip, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002afc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b02:	f8cc 3004 	str.w	r3, [ip, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b06:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	f000 80ab 	beq.w	8002c66 <HAL_I2C_ER_IRQHandler+0x22a>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b10:	4b82      	ldr	r3, [pc, #520]	; (8002d1c <HAL_I2C_ER_IRQHandler+0x2e0>)
 8002b12:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b14:	f7fe fb4e 	bl	80011b4 <HAL_DMA_Abort_IT>
 8002b18:	b150      	cbz	r0, 8002b30 <HAL_I2C_ER_IRQHandler+0xf4>
        __HAL_I2C_DISABLE(hi2c);
 8002b1a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002b1e:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b20:	6d01      	ldr	r1, [r0, #80]	; 0x50
        __HAL_I2C_DISABLE(hi2c);
 8002b22:	f023 0301 	bic.w	r3, r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 8002b28:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b2e:	4788      	blx	r1
  CurrentError = hi2c->ErrorCode;
 8002b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002b32:	071b      	lsls	r3, r3, #28
 8002b34:	d004      	beq.n	8002b40 <HAL_I2C_ER_IRQHandler+0x104>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b36:	6822      	ldr	r2, [r4, #0]
 8002b38:	6853      	ldr	r3, [r2, #4]
 8002b3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b3e:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8002b40:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002b44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b46:	0757      	lsls	r7, r2, #29
  CurrentState = hi2c->State;
 8002b48:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002b4a:	d502      	bpl.n	8002b52 <HAL_I2C_ER_IRQHandler+0x116>
 8002b4c:	2b28      	cmp	r3, #40	; 0x28
 8002b4e:	f000 80a8 	beq.w	8002ca2 <HAL_I2C_ER_IRQHandler+0x266>
}
 8002b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b54:	b110      	cbz	r0, 8002b5c <HAL_I2C_ER_IRQHandler+0x120>
 8002b56:	0a11      	lsrs	r1, r2, #8
 8002b58:	07cf      	lsls	r7, r1, #31
 8002b5a:	d41a      	bmi.n	8002b92 <HAL_I2C_ER_IRQHandler+0x156>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b5c:	f3c5 2780 	ubfx	r7, r5, #10, #1
 8002b60:	b11f      	cbz	r7, 8002b6a <HAL_I2C_ER_IRQHandler+0x12e>
 8002b62:	05d1      	lsls	r1, r2, #23
 8002b64:	d5f5      	bpl.n	8002b52 <HAL_I2C_ER_IRQHandler+0x116>
 8002b66:	2700      	movs	r7, #0
 8002b68:	e782      	b.n	8002a70 <HAL_I2C_ER_IRQHandler+0x34>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b6a:	0529      	lsls	r1, r5, #20
 8002b6c:	d5f1      	bpl.n	8002b52 <HAL_I2C_ER_IRQHandler+0x116>
 8002b6e:	0a11      	lsrs	r1, r2, #8
 8002b70:	e008      	b.n	8002b84 <HAL_I2C_ER_IRQHandler+0x148>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b72:	2703      	movs	r7, #3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b74:	f46f 7200 	mvn.w	r2, #512	; 0x200
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b78:	0568      	lsls	r0, r5, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b7a:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b7c:	f53f af78 	bmi.w	8002a70 <HAL_I2C_ER_IRQHandler+0x34>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b80:	052a      	lsls	r2, r5, #20
 8002b82:	d504      	bpl.n	8002b8e <HAL_I2C_ER_IRQHandler+0x152>
 8002b84:	07cb      	lsls	r3, r1, #31
 8002b86:	d48c      	bmi.n	8002aa2 <HAL_I2C_ER_IRQHandler+0x66>
  if (error != HAL_I2C_ERROR_NONE)
 8002b88:	2f00      	cmp	r7, #0
 8002b8a:	d0e2      	beq.n	8002b52 <HAL_I2C_ER_IRQHandler+0x116>
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	469c      	mov	ip, r3
 8002b90:	e78d      	b.n	8002aae <HAL_I2C_ER_IRQHandler+0x72>
 8002b92:	2702      	movs	r7, #2
 8002b94:	e7ee      	b.n	8002b74 <HAL_I2C_ER_IRQHandler+0x138>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b96:	2a22      	cmp	r2, #34	; 0x22
 8002b98:	d196      	bne.n	8002ac8 <HAL_I2C_ER_IRQHandler+0x8c>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b9a:	f8dc 3000 	ldr.w	r3, [ip]
 8002b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ba2:	f8cc 3000 	str.w	r3, [ip]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002ba6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002baa:	051e      	lsls	r6, r3, #20
 8002bac:	d49d      	bmi.n	8002aea <HAL_I2C_ER_IRQHandler+0xae>
 8002bae:	e796      	b.n	8002ade <HAL_I2C_ER_IRQHandler+0xa2>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bb0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002bb4:	2a60      	cmp	r2, #96	; 0x60
 8002bb6:	d03b      	beq.n	8002c30 <HAL_I2C_ER_IRQHandler+0x1f4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bb8:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8002bbc:	065a      	lsls	r2, r3, #25
 8002bbe:	d506      	bpl.n	8002bce <HAL_I2C_ER_IRQHandler+0x192>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bc2:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8002bc6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bca:	3301      	adds	r3, #1
 8002bcc:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff f8a4 	bl	8001d1c <HAL_I2C_ErrorCallback>
 8002bd4:	e7ac      	b.n	8002b30 <HAL_I2C_ER_IRQHandler+0xf4>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002bde:	e786      	b.n	8002aee <HAL_I2C_ER_IRQHandler+0xb2>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002be0:	b9ca      	cbnz	r2, 8002c16 <HAL_I2C_ER_IRQHandler+0x1da>
 8002be2:	f001 02f7 	and.w	r2, r1, #247	; 0xf7
 8002be6:	2a21      	cmp	r2, #33	; 0x21
 8002be8:	d003      	beq.n	8002bf2 <HAL_I2C_ER_IRQHandler+0x1b6>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002bea:	2928      	cmp	r1, #40	; 0x28
 8002bec:	d113      	bne.n	8002c16 <HAL_I2C_ER_IRQHandler+0x1da>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002bee:	2821      	cmp	r0, #33	; 0x21
 8002bf0:	d111      	bne.n	8002c16 <HAL_I2C_ER_IRQHandler+0x1da>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bf2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bf6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002bf8:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bfa:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002bfc:	d05e      	beq.n	8002cbc <HAL_I2C_ER_IRQHandler+0x280>
 8002bfe:	2920      	cmp	r1, #32
 8002c00:	d05c      	beq.n	8002cbc <HAL_I2C_ER_IRQHandler+0x280>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c02:	2a21      	cmp	r2, #33	; 0x21
 8002c04:	d073      	beq.n	8002cee <HAL_I2C_ER_IRQHandler+0x2b2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c0a:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c0c:	052d      	lsls	r5, r5, #20
 8002c0e:	d5bb      	bpl.n	8002b88 <HAL_I2C_ER_IRQHandler+0x14c>
 8002c10:	f8d4 c000 	ldr.w	ip, [r4]
 8002c14:	e745      	b.n	8002aa2 <HAL_I2C_ER_IRQHandler+0x66>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      error |= HAL_I2C_ERROR_AF;
 8002c1a:	f047 0704 	orr.w	r7, r7, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c1e:	615a      	str	r2, [r3, #20]
 8002c20:	e73c      	b.n	8002a9c <HAL_I2C_ER_IRQHandler+0x60>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c22:	052a      	lsls	r2, r5, #20
    error |= HAL_I2C_ERROR_BERR;
 8002c24:	f04f 0701 	mov.w	r7, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c28:	f53f af3b 	bmi.w	8002aa2 <HAL_I2C_ER_IRQHandler+0x66>
 8002c2c:	469c      	mov	ip, r3
 8002c2e:	e73e      	b.n	8002aae <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	2220      	movs	r2, #32
 8002c32:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c36:	6423      	str	r3, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c38:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8002c3c:	0659      	lsls	r1, r3, #25
 8002c3e:	d508      	bpl.n	8002c52 <HAL_I2C_ER_IRQHandler+0x216>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c42:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8002c46:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c4a:	f8d4 c000 	ldr.w	ip, [r4]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8002c52:	f8dc 3000 	ldr.w	r3, [ip]
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	f8cc 3000 	str.w	r3, [ip]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff f908 	bl	8001e74 <HAL_I2C_AbortCpltCallback>
 8002c64:	e764      	b.n	8002b30 <HAL_I2C_ER_IRQHandler+0xf4>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c66:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002c68:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <HAL_I2C_ER_IRQHandler+0x2e0>)
 8002c6a:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c6c:	f7fe faa2 	bl	80011b4 <HAL_DMA_Abort_IT>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	f43f af5d 	beq.w	8002b30 <HAL_I2C_ER_IRQHandler+0xf4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	0650      	lsls	r0, r2, #25
 8002c7c:	d506      	bpl.n	8002c8c <HAL_I2C_ER_IRQHandler+0x250>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8002c84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	3201      	adds	r2, #1
 8002c8a:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8002c8c:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c8e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8002c90:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8002c96:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c98:	6d03      	ldr	r3, [r0, #80]	; 0x50
        hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c9e:	4798      	blx	r3
 8002ca0:	e746      	b.n	8002b30 <HAL_I2C_ER_IRQHandler+0xf4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ca2:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <HAL_I2C_ER_IRQHandler+0x2e4>)
 8002ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ca6:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cac:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cb2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cb6:	f7fd fd93 	bl	80007e0 <HAL_I2C_ListenCpltCallback>
}
 8002cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002cbc:	2a28      	cmp	r2, #40	; 0x28
 8002cbe:	d1a0      	bne.n	8002c02 <HAL_I2C_ER_IRQHandler+0x1c6>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc0:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <HAL_I2C_ER_IRQHandler+0x2e4>)
 8002cc2:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cc4:	685a      	ldr	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd0:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	400a      	ands	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cd8:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cda:	2320      	movs	r3, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cdc:	6321      	str	r1, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cde:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ce0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ce4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ce8:	f7fd fd7a 	bl	80007e0 <HAL_I2C_ListenCpltCallback>
 8002cec:	e78e      	b.n	8002c0c <HAL_I2C_ER_IRQHandler+0x1d0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002cee:	490c      	ldr	r1, [pc, #48]	; (8002d20 <HAL_I2C_ER_IRQHandler+0x2e4>)
 8002cf0:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cf2:	2020      	movs	r0, #32
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cf4:	2100      	movs	r1, #0
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cf6:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cf8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cfc:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d00:	685a      	ldr	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d02:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d0a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0c:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	400a      	ands	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d14:	4620      	mov	r0, r4
 8002d16:	f7fe ff9f 	bl	8001c58 <HAL_I2C_SlaveTxCpltCallback>
 8002d1a:	e777      	b.n	8002c0c <HAL_I2C_ER_IRQHandler+0x1d0>
 8002d1c:	08001e79 	.word	0x08001e79
 8002d20:	ffff0000 	.word	0xffff0000

08002d24 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d24:	2800      	cmp	r0, #0
 8002d26:	f000 81d0 	beq.w	80030ca <HAL_RCC_OscConfig+0x3a6>
{
 8002d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002d2e:	6803      	ldr	r3, [r0, #0]
 8002d30:	2b0f      	cmp	r3, #15
{
 8002d32:	b082      	sub	sp, #8
 8002d34:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002d36:	f200 8137 	bhi.w	8002fa8 <HAL_RCC_OscConfig+0x284>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	07dd      	lsls	r5, r3, #31
 8002d3c:	d53a      	bpl.n	8002db4 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002d3e:	6863      	ldr	r3, [r4, #4]
 8002d40:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8002d44:	d006      	beq.n	8002d54 <HAL_RCC_OscConfig+0x30>
 8002d46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d4a:	d003      	beq.n	8002d54 <HAL_RCC_OscConfig+0x30>
 8002d4c:	21ed      	movs	r1, #237	; 0xed
 8002d4e:	48b1      	ldr	r0, [pc, #708]	; (8003014 <HAL_RCC_OscConfig+0x2f0>)
 8002d50:	f7fd fe68 	bl	8000a24 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d54:	4ab0      	ldr	r2, [pc, #704]	; (8003018 <HAL_RCC_OscConfig+0x2f4>)
 8002d56:	6893      	ldr	r3, [r2, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	f000 8173 	beq.w	8003048 <HAL_RCC_OscConfig+0x324>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d62:	6893      	ldr	r3, [r2, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	f000 8169 	beq.w	8003040 <HAL_RCC_OscConfig+0x31c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6e:	6863      	ldr	r3, [r4, #4]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	f000 8172 	beq.w	800305c <HAL_RCC_OscConfig+0x338>
 8002d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d7c:	f000 8215 	beq.w	80031aa <HAL_RCC_OscConfig+0x486>
 8002d80:	4da5      	ldr	r5, [pc, #660]	; (8003018 <HAL_RCC_OscConfig+0x2f4>)
 8002d82:	682a      	ldr	r2, [r5, #0]
 8002d84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d88:	602a      	str	r2, [r5, #0]
 8002d8a:	682a      	ldr	r2, [r5, #0]
 8002d8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d90:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 8167 	bne.w	8003066 <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fd ffaa 	bl	8000cf0 <HAL_GetTick>
 8002d9c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	e005      	b.n	8002dac <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da0:	f7fd ffa6 	bl	8000cf0 <HAL_GetTick>
 8002da4:	1b80      	subs	r0, r0, r6
 8002da6:	2864      	cmp	r0, #100	; 0x64
 8002da8:	f200 817b 	bhi.w	80030a2 <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	039b      	lsls	r3, r3, #14
 8002db0:	d4f6      	bmi.n	8002da0 <HAL_RCC_OscConfig+0x7c>
 8002db2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db4:	079f      	lsls	r7, r3, #30
 8002db6:	f100 80c8 	bmi.w	8002f4a <HAL_RCC_OscConfig+0x226>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dba:	071a      	lsls	r2, r3, #28
 8002dbc:	d518      	bpl.n	8002df0 <HAL_RCC_OscConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002dbe:	6963      	ldr	r3, [r4, #20]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	f200 811e 	bhi.w	8003002 <HAL_RCC_OscConfig+0x2de>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 810b 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dcc:	4b93      	ldr	r3, [pc, #588]	; (800301c <HAL_RCC_OscConfig+0x2f8>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	4d92      	ldr	r5, [pc, #584]	; (8003018 <HAL_RCC_OscConfig+0x2f4>)
      __HAL_RCC_LSI_ENABLE();
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002dd4:	f7fd ff8c 	bl	8000cf0 <HAL_GetTick>
 8002dd8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	e005      	b.n	8002de8 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fd ff88 	bl	8000cf0 <HAL_GetTick>
 8002de0:	1b80      	subs	r0, r0, r6
 8002de2:	2802      	cmp	r0, #2
 8002de4:	f200 815d 	bhi.w	80030a2 <HAL_RCC_OscConfig+0x37e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002dea:	079b      	lsls	r3, r3, #30
 8002dec:	d5f6      	bpl.n	8002ddc <HAL_RCC_OscConfig+0xb8>
 8002dee:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df0:	075d      	lsls	r5, r3, #29
 8002df2:	d545      	bpl.n	8002e80 <HAL_RCC_OscConfig+0x15c>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002df4:	68a3      	ldr	r3, [r4, #8]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d906      	bls.n	8002e08 <HAL_RCC_OscConfig+0xe4>
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d004      	beq.n	8002e08 <HAL_RCC_OscConfig+0xe4>
 8002dfe:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002e02:	4884      	ldr	r0, [pc, #528]	; (8003014 <HAL_RCC_OscConfig+0x2f0>)
 8002e04:	f7fd fe0e 	bl	8000a24 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e08:	4a83      	ldr	r2, [pc, #524]	; (8003018 <HAL_RCC_OscConfig+0x2f4>)
 8002e0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e0c:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002e10:	f040 815d 	bne.w	80030ce <HAL_RCC_OscConfig+0x3aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e28:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4d7d      	ldr	r5, [pc, #500]	; (8003020 <HAL_RCC_OscConfig+0x2fc>)
 8002e2c:	682a      	ldr	r2, [r5, #0]
 8002e2e:	05d0      	lsls	r0, r2, #23
 8002e30:	f140 8127 	bpl.w	8003082 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e34:	68a3      	ldr	r3, [r4, #8]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	f000 814b 	beq.w	80030d2 <HAL_RCC_OscConfig+0x3ae>
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	f000 81be 	beq.w	80031be <HAL_RCC_OscConfig+0x49a>
 8002e42:	4d75      	ldr	r5, [pc, #468]	; (8003018 <HAL_RCC_OscConfig+0x2f4>)
 8002e44:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	672a      	str	r2, [r5, #112]	; 0x70
 8002e4c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002e4e:	f022 0204 	bic.w	r2, r2, #4
 8002e52:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 8141 	bne.w	80030dc <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5a:	f7fd ff49 	bl	8000cf0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e62:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e64:	e006      	b.n	8002e74 <HAL_RCC_OscConfig+0x150>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7fd ff43 	bl	8000cf0 <HAL_GetTick>
 8002e6a:	eba0 0008 	sub.w	r0, r0, r8
 8002e6e:	42b8      	cmp	r0, r7
 8002e70:	f200 8117 	bhi.w	80030a2 <HAL_RCC_OscConfig+0x37e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002e76:	079b      	lsls	r3, r3, #30
 8002e78:	d4f5      	bmi.n	8002e66 <HAL_RCC_OscConfig+0x142>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e7a:	2e00      	cmp	r6, #0
 8002e7c:	f040 8164 	bne.w	8003148 <HAL_RCC_OscConfig+0x424>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002e80:	69a0      	ldr	r0, [r4, #24]
 8002e82:	2802      	cmp	r0, #2
 8002e84:	f200 80d2 	bhi.w	800302c <HAL_RCC_OscConfig+0x308>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d05a      	beq.n	8002f42 <HAL_RCC_OscConfig+0x21e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e8c:	4b62      	ldr	r3, [pc, #392]	; (8003018 <HAL_RCC_OscConfig+0x2f4>)
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	f002 020c 	and.w	r2, r2, #12
 8002e94:	2a08      	cmp	r2, #8
 8002e96:	f000 815d 	beq.w	8003154 <HAL_RCC_OscConfig+0x430>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e9a:	2802      	cmp	r0, #2
 8002e9c:	f040 8143 	bne.w	8003126 <HAL_RCC_OscConfig+0x402>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002ea0:	69e3      	ldr	r3, [r4, #28]
 8002ea2:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8002ea6:	d004      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x18e>
 8002ea8:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002eac:	4859      	ldr	r0, [pc, #356]	; (8003014 <HAL_RCC_OscConfig+0x2f0>)
 8002eae:	f7fd fdb9 	bl	8000a24 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002eb2:	6a23      	ldr	r3, [r4, #32]
 8002eb4:	2b3f      	cmp	r3, #63	; 0x3f
 8002eb6:	f200 8198 	bhi.w	80031ea <HAL_RCC_OscConfig+0x4c6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ebc:	3bc0      	subs	r3, #192	; 0xc0
 8002ebe:	2bf0      	cmp	r3, #240	; 0xf0
 8002ec0:	f200 818d 	bhi.w	80031de <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002ec4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ec6:	2a08      	cmp	r2, #8
 8002ec8:	f240 8168 	bls.w	800319c <HAL_RCC_OscConfig+0x478>
 8002ecc:	f240 11db 	movw	r1, #475	; 0x1db
 8002ed0:	4850      	ldr	r0, [pc, #320]	; (8003014 <HAL_RCC_OscConfig+0x2f0>)
 8002ed2:	f7fd fda7 	bl	8000a24 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002ed6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ed8:	3b02      	subs	r3, #2
 8002eda:	2b0d      	cmp	r3, #13
 8002edc:	f200 8179 	bhi.w	80031d2 <HAL_RCC_OscConfig+0x4ae>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_OscConfig+0x300>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	4d4d      	ldr	r5, [pc, #308]	; (8003018 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_PLL_DISABLE();
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ee8:	f7fd ff02 	bl	8000cf0 <HAL_GetTick>
 8002eec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	e005      	b.n	8002efc <HAL_RCC_OscConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fd fefe 	bl	8000cf0 <HAL_GetTick>
 8002ef4:	1b80      	subs	r0, r0, r6
 8002ef6:	2802      	cmp	r0, #2
 8002ef8:	f200 80d3 	bhi.w	80030a2 <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efc:	682b      	ldr	r3, [r5, #0]
 8002efe:	0199      	lsls	r1, r3, #6
 8002f00:	d4f6      	bmi.n	8002ef0 <HAL_RCC_OscConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f02:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8002f06:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8002f0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0c:	4c42      	ldr	r4, [pc, #264]	; (8003018 <HAL_RCC_OscConfig+0x2f4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f0e:	4333      	orrs	r3, r6
 8002f10:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002f14:	0852      	lsrs	r2, r2, #1
 8002f16:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002f1a:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002f1c:	4941      	ldr	r1, [pc, #260]	; (8003024 <HAL_RCC_OscConfig+0x300>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002f22:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f24:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f26:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8002f28:	f7fd fee2 	bl	8000cf0 <HAL_GetTick>
 8002f2c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2e:	e005      	b.n	8002f3c <HAL_RCC_OscConfig+0x218>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fd fede 	bl	8000cf0 <HAL_GetTick>
 8002f34:	1b40      	subs	r0, r0, r5
 8002f36:	2802      	cmp	r0, #2
 8002f38:	f200 80b3 	bhi.w	80030a2 <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	019a      	lsls	r2, r3, #6
 8002f40:	d5f6      	bpl.n	8002f30 <HAL_RCC_OscConfig+0x20c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002f42:	2000      	movs	r0, #0
}
 8002f44:	b002      	add	sp, #8
 8002f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002f4a:	68e3      	ldr	r3, [r4, #12]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d842      	bhi.n	8002fd6 <HAL_RCC_OscConfig+0x2b2>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002f50:	6923      	ldr	r3, [r4, #16]
 8002f52:	2b1f      	cmp	r3, #31
 8002f54:	f200 80b3 	bhi.w	80030be <HAL_RCC_OscConfig+0x39a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f58:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <HAL_RCC_OscConfig+0x2f4>)
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	f012 0f0c 	tst.w	r2, #12
 8002f60:	d02e      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x29c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f68:	2a08      	cmp	r2, #8
 8002f6a:	d026      	beq.n	8002fba <HAL_RCC_OscConfig+0x296>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f6c:	68e3      	ldr	r3, [r4, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80c8 	beq.w	8003104 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_HSI_ENABLE();
 8002f74:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <HAL_RCC_OscConfig+0x304>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f76:	4d28      	ldr	r5, [pc, #160]	; (8003018 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_ENABLE();
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f7c:	f7fd feb8 	bl	8000cf0 <HAL_GetTick>
 8002f80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	e005      	b.n	8002f90 <HAL_RCC_OscConfig+0x26c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f84:	f7fd feb4 	bl	8000cf0 <HAL_GetTick>
 8002f88:	1b80      	subs	r0, r0, r6
 8002f8a:	2802      	cmp	r0, #2
 8002f8c:	f200 8089 	bhi.w	80030a2 <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f90:	682b      	ldr	r3, [r5, #0]
 8002f92:	0798      	lsls	r0, r3, #30
 8002f94:	d5f6      	bpl.n	8002f84 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f96:	682b      	ldr	r3, [r5, #0]
 8002f98:	6922      	ldr	r2, [r4, #16]
 8002f9a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f9e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002fa2:	602b      	str	r3, [r5, #0]
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	e708      	b.n	8002dba <HAL_RCC_OscConfig+0x96>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002fa8:	21e8      	movs	r1, #232	; 0xe8
 8002faa:	481a      	ldr	r0, [pc, #104]	; (8003014 <HAL_RCC_OscConfig+0x2f0>)
 8002fac:	f7fd fd3a 	bl	8000a24 <assert_failed>
 8002fb0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	07dd      	lsls	r5, r3, #31
 8002fb4:	f57f aefe 	bpl.w	8002db4 <HAL_RCC_OscConfig+0x90>
 8002fb8:	e6c1      	b.n	8002d3e <HAL_RCC_OscConfig+0x1a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	025e      	lsls	r6, r3, #9
 8002fbe:	d4d5      	bmi.n	8002f6c <HAL_RCC_OscConfig+0x248>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc0:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_RCC_OscConfig+0x2f4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	079d      	lsls	r5, r3, #30
 8002fc6:	d570      	bpl.n	80030aa <HAL_RCC_OscConfig+0x386>
 8002fc8:	68e3      	ldr	r3, [r4, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d06d      	beq.n	80030aa <HAL_RCC_OscConfig+0x386>
        return HAL_ERROR;
 8002fce:	2001      	movs	r0, #1
}
 8002fd0:	b002      	add	sp, #8
 8002fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002fd6:	f240 111f 	movw	r1, #287	; 0x11f
 8002fda:	480e      	ldr	r0, [pc, #56]	; (8003014 <HAL_RCC_OscConfig+0x2f0>)
 8002fdc:	f7fd fd22 	bl	8000a24 <assert_failed>
 8002fe0:	e7b6      	b.n	8002f50 <HAL_RCC_OscConfig+0x22c>
      __HAL_RCC_LSI_DISABLE();
 8002fe2:	4a0e      	ldr	r2, [pc, #56]	; (800301c <HAL_RCC_OscConfig+0x2f8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe4:	4d0c      	ldr	r5, [pc, #48]	; (8003018 <HAL_RCC_OscConfig+0x2f4>)
      __HAL_RCC_LSI_DISABLE();
 8002fe6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002fe8:	f7fd fe82 	bl	8000cf0 <HAL_GetTick>
 8002fec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fee:	e004      	b.n	8002ffa <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff0:	f7fd fe7e 	bl	8000cf0 <HAL_GetTick>
 8002ff4:	1b80      	subs	r0, r0, r6
 8002ff6:	2802      	cmp	r0, #2
 8002ff8:	d853      	bhi.n	80030a2 <HAL_RCC_OscConfig+0x37e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002ffc:	079f      	lsls	r7, r3, #30
 8002ffe:	d4f7      	bmi.n	8002ff0 <HAL_RCC_OscConfig+0x2cc>
 8003000:	e6f5      	b.n	8002dee <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003002:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003006:	4803      	ldr	r0, [pc, #12]	; (8003014 <HAL_RCC_OscConfig+0x2f0>)
 8003008:	f7fd fd0c 	bl	8000a24 <assert_failed>
 800300c:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0e7      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x2be>
 8003012:	e6db      	b.n	8002dcc <HAL_RCC_OscConfig+0xa8>
 8003014:	08004230 	.word	0x08004230
 8003018:	40023800 	.word	0x40023800
 800301c:	42470e80 	.word	0x42470e80
 8003020:	40007000 	.word	0x40007000
 8003024:	42470060 	.word	0x42470060
 8003028:	42470000 	.word	0x42470000
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800302c:	4872      	ldr	r0, [pc, #456]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 800302e:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003032:	f7fd fcf7 	bl	8000a24 <assert_failed>
 8003036:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003038:	2800      	cmp	r0, #0
 800303a:	f47f af27 	bne.w	8002e8c <HAL_RCC_OscConfig+0x168>
 800303e:	e780      	b.n	8002f42 <HAL_RCC_OscConfig+0x21e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003040:	6853      	ldr	r3, [r2, #4]
 8003042:	0258      	lsls	r0, r3, #9
 8003044:	f57f ae93 	bpl.w	8002d6e <HAL_RCC_OscConfig+0x4a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003048:	4b6c      	ldr	r3, [pc, #432]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	0399      	lsls	r1, r3, #14
 800304e:	f57f aeb0 	bpl.w	8002db2 <HAL_RCC_OscConfig+0x8e>
 8003052:	6863      	ldr	r3, [r4, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f47f aeac 	bne.w	8002db2 <HAL_RCC_OscConfig+0x8e>
 800305a:	e7b8      	b.n	8002fce <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305c:	4a67      	ldr	r2, [pc, #412]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 800305e:	6813      	ldr	r3, [r2, #0]
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003066:	f7fd fe43 	bl	8000cf0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	4d64      	ldr	r5, [pc, #400]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 800306c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	e004      	b.n	800307a <HAL_RCC_OscConfig+0x356>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003070:	f7fd fe3e 	bl	8000cf0 <HAL_GetTick>
 8003074:	1b80      	subs	r0, r0, r6
 8003076:	2864      	cmp	r0, #100	; 0x64
 8003078:	d813      	bhi.n	80030a2 <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	682b      	ldr	r3, [r5, #0]
 800307c:	039a      	lsls	r2, r3, #14
 800307e:	d5f7      	bpl.n	8003070 <HAL_RCC_OscConfig+0x34c>
 8003080:	e697      	b.n	8002db2 <HAL_RCC_OscConfig+0x8e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003082:	682a      	ldr	r2, [r5, #0]
 8003084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003088:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800308a:	f7fd fe31 	bl	8000cf0 <HAL_GetTick>
 800308e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	05d9      	lsls	r1, r3, #23
 8003094:	f53f aece 	bmi.w	8002e34 <HAL_RCC_OscConfig+0x110>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003098:	f7fd fe2a 	bl	8000cf0 <HAL_GetTick>
 800309c:	1bc0      	subs	r0, r0, r7
 800309e:	2802      	cmp	r0, #2
 80030a0:	d9f6      	bls.n	8003090 <HAL_RCC_OscConfig+0x36c>
            return HAL_TIMEOUT;
 80030a2:	2003      	movs	r0, #3
}
 80030a4:	b002      	add	sp, #8
 80030a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030aa:	4a54      	ldr	r2, [pc, #336]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 80030ac:	6921      	ldr	r1, [r4, #16]
 80030ae:	6813      	ldr	r3, [r2, #0]
 80030b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80030b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	6823      	ldr	r3, [r4, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030bc:	e67d      	b.n	8002dba <HAL_RCC_OscConfig+0x96>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80030be:	f44f 7190 	mov.w	r1, #288	; 0x120
 80030c2:	484d      	ldr	r0, [pc, #308]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80030c4:	f7fd fcae 	bl	8000a24 <assert_failed>
 80030c8:	e746      	b.n	8002f58 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 80030ca:	2001      	movs	r0, #1
}
 80030cc:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80030ce:	2600      	movs	r6, #0
 80030d0:	e6ab      	b.n	8002e2a <HAL_RCC_OscConfig+0x106>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d2:	4a4a      	ldr	r2, [pc, #296]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 80030d4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80030dc:	f7fd fe08 	bl	8000cf0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	4d46      	ldr	r5, [pc, #280]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
      tickstart = HAL_GetTick();
 80030e2:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e8:	e005      	b.n	80030f6 <HAL_RCC_OscConfig+0x3d2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ea:	f7fd fe01 	bl	8000cf0 <HAL_GetTick>
 80030ee:	eba0 0008 	sub.w	r0, r0, r8
 80030f2:	42b8      	cmp	r0, r7
 80030f4:	d8d5      	bhi.n	80030a2 <HAL_RCC_OscConfig+0x37e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030f8:	079a      	lsls	r2, r3, #30
 80030fa:	d5f6      	bpl.n	80030ea <HAL_RCC_OscConfig+0x3c6>
    if(pwrclkchanged == SET)
 80030fc:	2e00      	cmp	r6, #0
 80030fe:	f43f aebf 	beq.w	8002e80 <HAL_RCC_OscConfig+0x15c>
 8003102:	e021      	b.n	8003148 <HAL_RCC_OscConfig+0x424>
        __HAL_RCC_HSI_DISABLE();
 8003104:	4a3e      	ldr	r2, [pc, #248]	; (8003200 <HAL_RCC_OscConfig+0x4dc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	4d3d      	ldr	r5, [pc, #244]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_HSI_DISABLE();
 8003108:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800310a:	f7fd fdf1 	bl	8000cf0 <HAL_GetTick>
 800310e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003110:	e004      	b.n	800311c <HAL_RCC_OscConfig+0x3f8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003112:	f7fd fded 	bl	8000cf0 <HAL_GetTick>
 8003116:	1b80      	subs	r0, r0, r6
 8003118:	2802      	cmp	r0, #2
 800311a:	d8c2      	bhi.n	80030a2 <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	0799      	lsls	r1, r3, #30
 8003120:	d4f7      	bmi.n	8003112 <HAL_RCC_OscConfig+0x3ee>
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	e649      	b.n	8002dba <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PLL_DISABLE();
 8003126:	4a37      	ldr	r2, [pc, #220]	; (8003204 <HAL_RCC_OscConfig+0x4e0>)
 8003128:	2100      	movs	r1, #0
 800312a:	6011      	str	r1, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312c:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 800312e:	f7fd fddf 	bl	8000cf0 <HAL_GetTick>
 8003132:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003134:	e004      	b.n	8003140 <HAL_RCC_OscConfig+0x41c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003136:	f7fd fddb 	bl	8000cf0 <HAL_GetTick>
 800313a:	1b40      	subs	r0, r0, r5
 800313c:	2802      	cmp	r0, #2
 800313e:	d8b0      	bhi.n	80030a2 <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	019b      	lsls	r3, r3, #6
 8003144:	d4f7      	bmi.n	8003136 <HAL_RCC_OscConfig+0x412>
 8003146:	e6fc      	b.n	8002f42 <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003148:	4a2c      	ldr	r2, [pc, #176]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 800314a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800314c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003150:	6413      	str	r3, [r2, #64]	; 0x40
 8003152:	e695      	b.n	8002e80 <HAL_RCC_OscConfig+0x15c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003154:	2801      	cmp	r0, #1
 8003156:	f43f af3b 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x2ac>
        pll_config = RCC->PLLCFGR;
 800315a:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315c:	69e2      	ldr	r2, [r4, #28]
 800315e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8003162:	4291      	cmp	r1, r2
 8003164:	f47f af33 	bne.w	8002fce <HAL_RCC_OscConfig+0x2aa>
 8003168:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800316a:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	4291      	cmp	r1, r2
 8003170:	f47f af2d 	bne.w	8002fce <HAL_RCC_OscConfig+0x2aa>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003174:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003178:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800317a:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800317c:	428a      	cmp	r2, r1
 800317e:	f47f af26 	bne.w	8002fce <HAL_RCC_OscConfig+0x2aa>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003182:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003184:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003188:	4291      	cmp	r1, r2
 800318a:	f47f af20 	bne.w	8002fce <HAL_RCC_OscConfig+0x2aa>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800318e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003190:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8003194:	1a18      	subs	r0, r3, r0
 8003196:	bf18      	it	ne
 8003198:	2001      	movne	r0, #1
 800319a:	e719      	b.n	8002fd0 <HAL_RCC_OscConfig+0x2ac>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800319c:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80031a0:	40d3      	lsrs	r3, r2
 80031a2:	07d8      	lsls	r0, r3, #31
 80031a4:	f53f ae97 	bmi.w	8002ed6 <HAL_RCC_OscConfig+0x1b2>
 80031a8:	e690      	b.n	8002ecc <HAL_RCC_OscConfig+0x1a8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031aa:	4b14      	ldr	r3, [pc, #80]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e753      	b.n	8003066 <HAL_RCC_OscConfig+0x342>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 80031c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031c2:	f042 0204 	orr.w	r2, r2, #4
 80031c6:	671a      	str	r2, [r3, #112]	; 0x70
 80031c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	671a      	str	r2, [r3, #112]	; 0x70
 80031d0:	e784      	b.n	80030dc <HAL_RCC_OscConfig+0x3b8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80031d2:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80031d6:	4808      	ldr	r0, [pc, #32]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031d8:	f7fd fc24 	bl	8000a24 <assert_failed>
 80031dc:	e680      	b.n	8002ee0 <HAL_RCC_OscConfig+0x1bc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80031de:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80031e2:	4805      	ldr	r0, [pc, #20]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031e4:	f7fd fc1e 	bl	8000a24 <assert_failed>
 80031e8:	e66c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x1a0>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80031ea:	f240 11d9 	movw	r1, #473	; 0x1d9
 80031ee:	4802      	ldr	r0, [pc, #8]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 80031f0:	f7fd fc18 	bl	8000a24 <assert_failed>
 80031f4:	e661      	b.n	8002eba <HAL_RCC_OscConfig+0x196>
 80031f6:	bf00      	nop
 80031f8:	08004230 	.word	0x08004230
 80031fc:	40023800 	.word	0x40023800
 8003200:	42470000 	.word	0x42470000
 8003204:	42470060 	.word	0x42470060

08003208 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003208:	4917      	ldr	r1, [pc, #92]	; (8003268 <HAL_RCC_GetSysClockFreq+0x60>)
{
 800320a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800320c:	688b      	ldr	r3, [r1, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b04      	cmp	r3, #4
 8003214:	d01b      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0x46>
 8003216:	2b08      	cmp	r3, #8
 8003218:	d117      	bne.n	800324a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800321a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800321c:	684b      	ldr	r3, [r1, #4]
 800321e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003222:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003226:	d114      	bne.n	8003252 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003228:	6849      	ldr	r1, [r1, #4]
 800322a:	4810      	ldr	r0, [pc, #64]	; (800326c <HAL_RCC_GetSysClockFreq+0x64>)
 800322c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003230:	fba1 0100 	umull	r0, r1, r1, r0
 8003234:	f7fc ffd0 	bl	80001d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_GetSysClockFreq+0x60>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003240:	3301      	adds	r3, #1
 8003242:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003244:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003248:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800324a:	4808      	ldr	r0, [pc, #32]	; (800326c <HAL_RCC_GetSysClockFreq+0x64>)
}
 800324c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800324e:	4808      	ldr	r0, [pc, #32]	; (8003270 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8003250:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003252:	684b      	ldr	r3, [r1, #4]
 8003254:	4806      	ldr	r0, [pc, #24]	; (8003270 <HAL_RCC_GetSysClockFreq+0x68>)
 8003256:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800325a:	fba3 0100 	umull	r0, r1, r3, r0
 800325e:	2300      	movs	r3, #0
 8003260:	f7fc ffba 	bl	80001d8 <__aeabi_uldivmod>
 8003264:	e7e8      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x30>
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	00f42400 	.word	0x00f42400
 8003270:	007a1200 	.word	0x007a1200

08003274 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003274:	2800      	cmp	r0, #0
 8003276:	f000 80f1 	beq.w	800345c <HAL_RCC_ClockConfig+0x1e8>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800327a:	6803      	ldr	r3, [r0, #0]
 800327c:	3b01      	subs	r3, #1
 800327e:	2b0e      	cmp	r3, #14
{
 8003280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003284:	4604      	mov	r4, r0
 8003286:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003288:	f200 80d2 	bhi.w	8003430 <HAL_RCC_ClockConfig+0x1bc>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800328c:	2d07      	cmp	r5, #7
 800328e:	f200 80c2 	bhi.w	8003416 <HAL_RCC_ClockConfig+0x1a2>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003292:	4a76      	ldr	r2, [pc, #472]	; (800346c <HAL_RCC_ClockConfig+0x1f8>)
 8003294:	6813      	ldr	r3, [r2, #0]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	42ab      	cmp	r3, r5
 800329c:	d209      	bcs.n	80032b2 <HAL_RCC_ClockConfig+0x3e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	b2eb      	uxtb	r3, r5
 80032a0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	6813      	ldr	r3, [r2, #0]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	42ab      	cmp	r3, r5
 80032aa:	d002      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x3e>
    return HAL_ERROR;
 80032ac:	2001      	movs	r0, #1
}
 80032ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	0798      	lsls	r0, r3, #30
 80032b6:	d52c      	bpl.n	8003312 <HAL_RCC_ClockConfig+0x9e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	0759      	lsls	r1, r3, #29
 80032ba:	d504      	bpl.n	80032c6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032bc:	496c      	ldr	r1, [pc, #432]	; (8003470 <HAL_RCC_ClockConfig+0x1fc>)
 80032be:	688a      	ldr	r2, [r1, #8]
 80032c0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80032c4:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c6:	071a      	lsls	r2, r3, #28
 80032c8:	d504      	bpl.n	80032d4 <HAL_RCC_ClockConfig+0x60>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ca:	4969      	ldr	r1, [pc, #420]	; (8003470 <HAL_RCC_ClockConfig+0x1fc>)
 80032cc:	688a      	ldr	r2, [r1, #8]
 80032ce:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80032d2:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80032d4:	68a1      	ldr	r1, [r4, #8]
 80032d6:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 80032da:	d014      	beq.n	8003306 <HAL_RCC_ClockConfig+0x92>
 80032dc:	f021 0220 	bic.w	r2, r1, #32
 80032e0:	2a90      	cmp	r2, #144	; 0x90
 80032e2:	d010      	beq.n	8003306 <HAL_RCC_ClockConfig+0x92>
 80032e4:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 80032e8:	2aa0      	cmp	r2, #160	; 0xa0
 80032ea:	d00c      	beq.n	8003306 <HAL_RCC_ClockConfig+0x92>
 80032ec:	f021 0210 	bic.w	r2, r1, #16
 80032f0:	2ac0      	cmp	r2, #192	; 0xc0
 80032f2:	d008      	beq.n	8003306 <HAL_RCC_ClockConfig+0x92>
 80032f4:	29f0      	cmp	r1, #240	; 0xf0
 80032f6:	d006      	beq.n	8003306 <HAL_RCC_ClockConfig+0x92>
 80032f8:	f240 2175 	movw	r1, #629	; 0x275
 80032fc:	485d      	ldr	r0, [pc, #372]	; (8003474 <HAL_RCC_ClockConfig+0x200>)
 80032fe:	f7fd fb91 	bl	8000a24 <assert_failed>
 8003302:	68a1      	ldr	r1, [r4, #8]
 8003304:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003306:	485a      	ldr	r0, [pc, #360]	; (8003470 <HAL_RCC_ClockConfig+0x1fc>)
 8003308:	6882      	ldr	r2, [r0, #8]
 800330a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800330e:	430a      	orrs	r2, r1
 8003310:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003312:	07df      	lsls	r7, r3, #31
 8003314:	d528      	bpl.n	8003368 <HAL_RCC_ClockConfig+0xf4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003316:	6863      	ldr	r3, [r4, #4]
 8003318:	2b03      	cmp	r3, #3
 800331a:	f200 8098 	bhi.w	800344e <HAL_RCC_ClockConfig+0x1da>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331e:	2b01      	cmp	r3, #1
 8003320:	f000 808f 	beq.w	8003442 <HAL_RCC_ClockConfig+0x1ce>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003324:	1e9a      	subs	r2, r3, #2
 8003326:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003328:	4a51      	ldr	r2, [pc, #324]	; (8003470 <HAL_RCC_ClockConfig+0x1fc>)
 800332a:	6812      	ldr	r2, [r2, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332c:	f240 809a 	bls.w	8003464 <HAL_RCC_ClockConfig+0x1f0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	0791      	lsls	r1, r2, #30
 8003332:	d5bb      	bpl.n	80032ac <HAL_RCC_ClockConfig+0x38>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003334:	4e4e      	ldr	r6, [pc, #312]	; (8003470 <HAL_RCC_ClockConfig+0x1fc>)
 8003336:	68b2      	ldr	r2, [r6, #8]
 8003338:	f022 0203 	bic.w	r2, r2, #3
 800333c:	4313      	orrs	r3, r2
 800333e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003340:	f7fd fcd6 	bl	8000cf0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003348:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	e006      	b.n	800335a <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fd fcd0 	bl	8000cf0 <HAL_GetTick>
 8003350:	eba0 0008 	sub.w	r0, r0, r8
 8003354:	42b8      	cmp	r0, r7
 8003356:	f200 8083 	bhi.w	8003460 <HAL_RCC_ClockConfig+0x1ec>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	68b3      	ldr	r3, [r6, #8]
 800335c:	6862      	ldr	r2, [r4, #4]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003366:	d1f1      	bne.n	800334c <HAL_RCC_ClockConfig+0xd8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4a40      	ldr	r2, [pc, #256]	; (800346c <HAL_RCC_ClockConfig+0x1f8>)
 800336a:	6813      	ldr	r3, [r2, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	42ab      	cmp	r3, r5
 8003372:	d906      	bls.n	8003382 <HAL_RCC_ClockConfig+0x10e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003374:	b2eb      	uxtb	r3, r5
 8003376:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003378:	6813      	ldr	r3, [r2, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	42ab      	cmp	r3, r5
 8003380:	d194      	bne.n	80032ac <HAL_RCC_ClockConfig+0x38>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	075a      	lsls	r2, r3, #29
 8003386:	d518      	bpl.n	80033ba <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003388:	68e1      	ldr	r1, [r4, #12]
 800338a:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 800338e:	d00e      	beq.n	80033ae <HAL_RCC_ClockConfig+0x13a>
 8003390:	f421 6200 	bic.w	r2, r1, #2048	; 0x800
 8003394:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8003398:	d009      	beq.n	80033ae <HAL_RCC_ClockConfig+0x13a>
 800339a:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800339e:	d006      	beq.n	80033ae <HAL_RCC_ClockConfig+0x13a>
 80033a0:	f240 21ba 	movw	r1, #698	; 0x2ba
 80033a4:	4833      	ldr	r0, [pc, #204]	; (8003474 <HAL_RCC_ClockConfig+0x200>)
 80033a6:	f7fd fb3d 	bl	8000a24 <assert_failed>
 80033aa:	68e1      	ldr	r1, [r4, #12]
 80033ac:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ae:	4830      	ldr	r0, [pc, #192]	; (8003470 <HAL_RCC_ClockConfig+0x1fc>)
 80033b0:	6882      	ldr	r2, [r0, #8]
 80033b2:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80033b6:	430a      	orrs	r2, r1
 80033b8:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	071b      	lsls	r3, r3, #28
 80033bc:	d518      	bpl.n	80033f0 <HAL_RCC_ClockConfig+0x17c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80033be:	6922      	ldr	r2, [r4, #16]
 80033c0:	f432 5380 	bics.w	r3, r2, #4096	; 0x1000
 80033c4:	d00d      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x16e>
 80033c6:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 80033ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033ce:	d008      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x16e>
 80033d0:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80033d4:	d005      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x16e>
 80033d6:	f240 21c1 	movw	r1, #705	; 0x2c1
 80033da:	4826      	ldr	r0, [pc, #152]	; (8003474 <HAL_RCC_ClockConfig+0x200>)
 80033dc:	f7fd fb22 	bl	8000a24 <assert_failed>
 80033e0:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e2:	4923      	ldr	r1, [pc, #140]	; (8003470 <HAL_RCC_ClockConfig+0x1fc>)
 80033e4:	688b      	ldr	r3, [r1, #8]
 80033e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80033ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80033ee:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033f0:	f7ff ff0a 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80033f4:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_RCC_ClockConfig+0x1fc>)
 80033f6:	4c20      	ldr	r4, [pc, #128]	; (8003478 <HAL_RCC_ClockConfig+0x204>)
 80033f8:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 80033fa:	4920      	ldr	r1, [pc, #128]	; (800347c <HAL_RCC_ClockConfig+0x208>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033fc:	4a20      	ldr	r2, [pc, #128]	; (8003480 <HAL_RCC_ClockConfig+0x20c>)
 80033fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003402:	5ce3      	ldrb	r3, [r4, r3]
 8003404:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8003408:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800340a:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800340c:	f7fd fc26 	bl	8000c5c <HAL_InitTick>
  return HAL_OK;
 8003410:	2000      	movs	r0, #0
}
 8003412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003416:	f240 2152 	movw	r1, #594	; 0x252
 800341a:	4816      	ldr	r0, [pc, #88]	; (8003474 <HAL_RCC_ClockConfig+0x200>)
 800341c:	f7fd fb02 	bl	8000a24 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003420:	4a12      	ldr	r2, [pc, #72]	; (800346c <HAL_RCC_ClockConfig+0x1f8>)
 8003422:	6813      	ldr	r3, [r2, #0]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	42ab      	cmp	r3, r5
 800342a:	f4ff af38 	bcc.w	800329e <HAL_RCC_ClockConfig+0x2a>
 800342e:	e740      	b.n	80032b2 <HAL_RCC_ClockConfig+0x3e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003430:	f240 2151 	movw	r1, #593	; 0x251
 8003434:	480f      	ldr	r0, [pc, #60]	; (8003474 <HAL_RCC_ClockConfig+0x200>)
 8003436:	f7fd faf5 	bl	8000a24 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800343a:	2d07      	cmp	r5, #7
 800343c:	f67f af29 	bls.w	8003292 <HAL_RCC_ClockConfig+0x1e>
 8003440:	e7e9      	b.n	8003416 <HAL_RCC_ClockConfig+0x1a2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <HAL_RCC_ClockConfig+0x1fc>)
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	0396      	lsls	r6, r2, #14
 8003448:	f53f af74 	bmi.w	8003334 <HAL_RCC_ClockConfig+0xc0>
 800344c:	e72e      	b.n	80032ac <HAL_RCC_ClockConfig+0x38>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800344e:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8003452:	4808      	ldr	r0, [pc, #32]	; (8003474 <HAL_RCC_ClockConfig+0x200>)
 8003454:	f7fd fae6 	bl	8000a24 <assert_failed>
 8003458:	6863      	ldr	r3, [r4, #4]
 800345a:	e760      	b.n	800331e <HAL_RCC_ClockConfig+0xaa>
    return HAL_ERROR;
 800345c:	2001      	movs	r0, #1
}
 800345e:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003460:	2003      	movs	r0, #3
 8003462:	e724      	b.n	80032ae <HAL_RCC_ClockConfig+0x3a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003464:	0190      	lsls	r0, r2, #6
 8003466:	f53f af65 	bmi.w	8003334 <HAL_RCC_ClockConfig+0xc0>
 800346a:	e71f      	b.n	80032ac <HAL_RCC_ClockConfig+0x38>
 800346c:	40023c00 	.word	0x40023c00
 8003470:	40023800 	.word	0x40023800
 8003474:	08004230 	.word	0x08004230
 8003478:	08004128 	.word	0x08004128
 800347c:	20000014 	.word	0x20000014
 8003480:	2000000c 	.word	0x2000000c

08003484 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003486:	4a05      	ldr	r2, [pc, #20]	; (800349c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003488:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800348a:	4905      	ldr	r1, [pc, #20]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800348c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003490:	6808      	ldr	r0, [r1, #0]
 8003492:	5cd3      	ldrb	r3, [r2, r3]
}
 8003494:	40d8      	lsrs	r0, r3
 8003496:	4770      	bx	lr
 8003498:	40023800 	.word	0x40023800
 800349c:	08004138 	.word	0x08004138
 80034a0:	2000000c 	.word	0x2000000c

080034a4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80034a6:	4a05      	ldr	r2, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80034a8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80034aa:	4905      	ldr	r1, [pc, #20]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034ac:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80034b0:	6808      	ldr	r0, [r1, #0]
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
}
 80034b4:	40d8      	lsrs	r0, r3
 80034b6:	4770      	bx	lr
 80034b8:	40023800 	.word	0x40023800
 80034bc:	08004138 	.word	0x08004138
 80034c0:	2000000c 	.word	0x2000000c

080034c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c6:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  uint32_t tmpreg1 = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80034c8:	6800      	ldr	r0, [r0, #0]
 80034ca:	1e43      	subs	r3, r0, #1
 80034cc:	2b0e      	cmp	r3, #14
{
 80034ce:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80034d0:	f200 80c4 	bhi.w	800365c <HAL_RCCEx_PeriphCLKConfig+0x198>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034d4:	f010 0f05 	tst.w	r0, #5
 80034d8:	d03a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x8c>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80034da:	68e3      	ldr	r3, [r4, #12]
 80034dc:	3b02      	subs	r3, #2
 80034de:	2b05      	cmp	r3, #5
 80034e0:	f200 80c9 	bhi.w	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80034e4:	68a3      	ldr	r3, [r4, #8]
 80034e6:	3bc0      	subs	r3, #192	; 0xc0
 80034e8:	2bf0      	cmp	r3, #240	; 0xf0
 80034ea:	f200 80ce 	bhi.w	800368a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80034ee:	6863      	ldr	r3, [r4, #4]
 80034f0:	3b02      	subs	r3, #2
 80034f2:	2b3d      	cmp	r3, #61	; 0x3d
 80034f4:	f200 80b9 	bhi.w	800366a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034f8:	4b77      	ldr	r3, [pc, #476]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034fa:	4d78      	ldr	r5, [pc, #480]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x218>)
    __HAL_RCC_PLLI2S_DISABLE();
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003500:	f7fd fbf6 	bl	8000cf0 <HAL_GetTick>
 8003504:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003506:	e005      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003508:	f7fd fbf2 	bl	8000cf0 <HAL_GetTick>
 800350c:	1b80      	subs	r0, r0, r6
 800350e:	2802      	cmp	r0, #2
 8003510:	f200 80a1 	bhi.w	8003656 <HAL_RCCEx_PeriphCLKConfig+0x192>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003514:	682b      	ldr	r3, [r5, #0]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	d4f6      	bmi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x44>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800351a:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 800351e:	6861      	ldr	r1, [r4, #4]
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003520:	4a6d      	ldr	r2, [pc, #436]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003522:	071b      	lsls	r3, r3, #28
 8003524:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003528:	430b      	orrs	r3, r1
    __HAL_RCC_PLLI2S_ENABLE();
 800352a:	2101      	movs	r1, #1
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800352c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003530:	6011      	str	r1, [r2, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003532:	f7fd fbdd 	bl	8000cf0 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003536:	4d69      	ldr	r5, [pc, #420]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x218>)
    tickstart = HAL_GetTick();
 8003538:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800353a:	e005      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800353c:	f7fd fbd8 	bl	8000cf0 <HAL_GetTick>
 8003540:	1b80      	subs	r0, r0, r6
 8003542:	2802      	cmp	r0, #2
 8003544:	f200 8087 	bhi.w	8003656 <HAL_RCCEx_PeriphCLKConfig+0x192>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003548:	682b      	ldr	r3, [r5, #0]
 800354a:	011f      	lsls	r7, r3, #4
 800354c:	d5f6      	bpl.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800354e:	6820      	ldr	r0, [r4, #0]
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003550:	0785      	lsls	r5, r0, #30
 8003552:	d577      	bpl.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003554:	6923      	ldr	r3, [r4, #16]
 8003556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355a:	d02e      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800355c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003560:	d02b      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003562:	4a5f      	ldr	r2, [pc, #380]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003564:	f423 21a0 	bic.w	r1, r3, #327680	; 0x50000
 8003568:	4291      	cmp	r1, r2
 800356a:	f423 3080 	bic.w	r0, r3, #65536	; 0x10000
 800356e:	d024      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003570:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8003574:	f423 2110 	bic.w	r1, r3, #589824	; 0x90000
 8003578:	4291      	cmp	r1, r2
 800357a:	d01e      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800357c:	4959      	ldr	r1, [pc, #356]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800357e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003582:	428a      	cmp	r2, r1
 8003584:	d019      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003586:	f501 21c0 	add.w	r1, r1, #393216	; 0x60000
 800358a:	f423 1388 	bic.w	r3, r3, #1114112	; 0x110000
 800358e:	428b      	cmp	r3, r1
 8003590:	d013      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003592:	4b55      	ldr	r3, [pc, #340]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003594:	429a      	cmp	r2, r3
 8003596:	d010      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8003598:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800359c:	429a      	cmp	r2, r3
 800359e:	d00c      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80035a0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d008      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80035a8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80035ac:	4298      	cmp	r0, r3
 80035ae:	d004      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80035b0:	f640 2112 	movw	r1, #2578	; 0xa12
 80035b4:	484d      	ldr	r0, [pc, #308]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80035b6:	f7fd fa35 	bl	8000a24 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035ba:	4b48      	ldr	r3, [pc, #288]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x218>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80035bc:	4d4c      	ldr	r5, [pc, #304]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2200      	movs	r2, #0
 80035c0:	9201      	str	r2, [sp, #4]
 80035c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035dc:	f7fd fb88 	bl	8000cf0 <HAL_GetTick>
 80035e0:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035e2:	e004      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035e4:	f7fd fb84 	bl	8000cf0 <HAL_GetTick>
 80035e8:	1b80      	subs	r0, r0, r6
 80035ea:	2802      	cmp	r0, #2
 80035ec:	d833      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x192>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035ee:	682b      	ldr	r3, [r5, #0]
 80035f0:	05d9      	lsls	r1, r3, #23
 80035f2:	d5f7      	bpl.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035f4:	4939      	ldr	r1, [pc, #228]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80035f6:	6923      	ldr	r3, [r4, #16]
 80035f8:	6f0a      	ldr	r2, [r1, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035fa:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80035fe:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8003602:	d010      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003604:	4282      	cmp	r2, r0
 8003606:	d00e      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003608:	6f0b      	ldr	r3, [r1, #112]	; 0x70
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800360a:	4a3a      	ldr	r2, [pc, #232]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800360c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003610:	2501      	movs	r5, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003612:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 8003614:	6015      	str	r5, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003616:	6010      	str	r0, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003618:	670b      	str	r3, [r1, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800361a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800361c:	07da      	lsls	r2, r3, #31
 800361e:	d44a      	bmi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8003620:	6923      	ldr	r3, [r4, #16]
 8003622:	f403 7040 	and.w	r0, r3, #768	; 0x300
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003626:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 800362a:	d039      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800362c:	492b      	ldr	r1, [pc, #172]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800362e:	688a      	ldr	r2, [r1, #8]
 8003630:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003634:	608a      	str	r2, [r1, #8]
 8003636:	4a29      	ldr	r2, [pc, #164]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8003638:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800363a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363e:	430b      	orrs	r3, r1
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
 8003642:	6820      	ldr	r0, [r4, #0]
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003644:	f010 0008 	ands.w	r0, r0, #8
 8003648:	d006      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800364a:	4b2b      	ldr	r3, [pc, #172]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800364c:	7d22      	ldrb	r2, [r4, #20]
 800364e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003650:	2000      	movs	r0, #0
}
 8003652:	b003      	add	sp, #12
 8003654:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003656:	2003      	movs	r0, #3
}
 8003658:	b003      	add	sp, #12
 800365a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800365c:	4823      	ldr	r0, [pc, #140]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800365e:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8003662:	f7fd f9df 	bl	8000a24 <assert_failed>
 8003666:	6820      	ldr	r0, [r4, #0]
 8003668:	e734      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x10>
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 800366a:	f640 11e3 	movw	r1, #2531	; 0x9e3
 800366e:	481f      	ldr	r0, [pc, #124]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003670:	f7fd f9d8 	bl	8000a24 <assert_failed>
 8003674:	e740      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8003676:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 800367a:	481c      	ldr	r0, [pc, #112]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800367c:	f7fd f9d2 	bl	8000a24 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8003680:	68a3      	ldr	r3, [r4, #8]
 8003682:	3bc0      	subs	r3, #192	; 0xc0
 8003684:	2bf0      	cmp	r3, #240	; 0xf0
 8003686:	f67f af32 	bls.w	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2a>
 800368a:	f640 11e1 	movw	r1, #2529	; 0x9e1
 800368e:	4817      	ldr	r0, [pc, #92]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003690:	f7fd f9c8 	bl	8000a24 <assert_failed>
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8003694:	6863      	ldr	r3, [r4, #4]
 8003696:	3b02      	subs	r3, #2
 8003698:	2b3d      	cmp	r3, #61	; 0x3d
 800369a:	f67f af2d 	bls.w	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800369e:	e7e4      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a0:	480e      	ldr	r0, [pc, #56]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80036a2:	6882      	ldr	r2, [r0, #8]
 80036a4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80036a8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80036ac:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80036b0:	430a      	orrs	r2, r1
 80036b2:	6082      	str	r2, [r0, #8]
 80036b4:	e7bf      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x172>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b6:	460d      	mov	r5, r1
        tickstart = HAL_GetTick();
 80036b8:	f7fd fb1a 	bl	8000cf0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80036c0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	e004      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fd fb14 	bl	8000cf0 <HAL_GetTick>
 80036c8:	1bc0      	subs	r0, r0, r7
 80036ca:	42b0      	cmp	r0, r6
 80036cc:	d8c3      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x192>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80036d0:	079b      	lsls	r3, r3, #30
 80036d2:	d5f7      	bpl.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036d4:	e7a4      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80036d6:	bf00      	nop
 80036d8:	42470068 	.word	0x42470068
 80036dc:	40023800 	.word	0x40023800
 80036e0:	00020300 	.word	0x00020300
 80036e4:	00080300 	.word	0x00080300
 80036e8:	00100300 	.word	0x00100300
 80036ec:	08004268 	.word	0x08004268
 80036f0:	40007000 	.word	0x40007000
 80036f4:	42470e40 	.word	0x42470e40
 80036f8:	424711e0 	.word	0x424711e0

080036fc <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80036fc:	2800      	cmp	r0, #0
 80036fe:	f000 80a5 	beq.w	800384c <HAL_RTC_Init+0x150>
{
 8003702:	b538      	push	{r3, r4, r5, lr}
  {
     return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8003704:	6843      	ldr	r3, [r0, #4]
 8003706:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800370a:	4604      	mov	r4, r0
 800370c:	f040 80a0 	bne.w	8003850 <HAL_RTC_Init+0x154>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8003710:	68a3      	ldr	r3, [r4, #8]
 8003712:	2b7f      	cmp	r3, #127	; 0x7f
 8003714:	d878      	bhi.n	8003808 <HAL_RTC_Init+0x10c>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8003716:	68e3      	ldr	r3, [r4, #12]
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371c:	d26a      	bcs.n	80037f4 <HAL_RTC_Init+0xf8>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800371e:	6923      	ldr	r3, [r4, #16]
 8003720:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8003724:	d004      	beq.n	8003730 <HAL_RTC_Init+0x34>
 8003726:	f44f 7181 	mov.w	r1, #258	; 0x102
 800372a:	484e      	ldr	r0, [pc, #312]	; (8003864 <HAL_RTC_Init+0x168>)
 800372c:	f7fd f97a 	bl	8000a24 <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8003730:	6963      	ldr	r3, [r4, #20]
 8003732:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8003736:	d004      	beq.n	8003742 <HAL_RTC_Init+0x46>
 8003738:	f240 1103 	movw	r1, #259	; 0x103
 800373c:	4849      	ldr	r0, [pc, #292]	; (8003864 <HAL_RTC_Init+0x168>)
 800373e:	f7fd f971 	bl	8000a24 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8003742:	69a3      	ldr	r3, [r4, #24]
 8003744:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8003748:	d004      	beq.n	8003754 <HAL_RTC_Init+0x58>
 800374a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800374e:	4845      	ldr	r0, [pc, #276]	; (8003864 <HAL_RTC_Init+0x168>)
 8003750:	f7fd f968 	bl	8000a24 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003754:	7f63      	ldrb	r3, [r4, #29]
 8003756:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800375a:	2b00      	cmp	r3, #0
 800375c:	d045      	beq.n	80037ea <HAL_RTC_Init+0xee>

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003762:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003764:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003766:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003768:	6259      	str	r1, [r3, #36]	; 0x24
 800376a:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	0655      	lsls	r5, r2, #25
 8003770:	d529      	bpl.n	80037c6 <HAL_RTC_Init+0xca>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003772:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003774:	6862      	ldr	r2, [r4, #4]
 8003776:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800377a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800377e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003782:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003784:	6899      	ldr	r1, [r3, #8]
 8003786:	432a      	orrs	r2, r5
 8003788:	4302      	orrs	r2, r0
 800378a:	430a      	orrs	r2, r1
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800378c:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800378e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003790:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	68a1      	ldr	r1, [r4, #8]
 8003796:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800379a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a2:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	0691      	lsls	r1, r2, #26
 80037a8:	d538      	bpl.n	800381c <HAL_RTC_Init+0x120>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80037aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80037ac:	69a0      	ldr	r0, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80037ae:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80037b2:	6419      	str	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80037b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037b6:	25ff      	movs	r5, #255	; 0xff
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80037b8:	4302      	orrs	r2, r0
    hrtc->State = HAL_RTC_STATE_READY;
 80037ba:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
    return HAL_OK;
 80037be:	2000      	movs	r0, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037c0:	625d      	str	r5, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80037c2:	7761      	strb	r1, [r4, #29]
}
 80037c4:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80037c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037cc:	f7fd fa90 	bl	8000cf0 <HAL_GetTick>
 80037d0:	4605      	mov	r5, r0
 80037d2:	e005      	b.n	80037e0 <HAL_RTC_Init+0xe4>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037d4:	f7fd fa8c 	bl	8000cf0 <HAL_GetTick>
 80037d8:	1b40      	subs	r0, r0, r5
 80037da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80037de:	d82e      	bhi.n	800383e <HAL_RTC_Init+0x142>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	0650      	lsls	r0, r2, #25
 80037e6:	d5f5      	bpl.n	80037d4 <HAL_RTC_Init+0xd8>
 80037e8:	e7c3      	b.n	8003772 <HAL_RTC_Init+0x76>
    hrtc->Lock = HAL_UNLOCKED;
 80037ea:	7722      	strb	r2, [r4, #28]
    HAL_RTC_MspInit(hrtc);
 80037ec:	4620      	mov	r0, r4
 80037ee:	f7fd f959 	bl	8000aa4 <HAL_RTC_MspInit>
 80037f2:	e7b4      	b.n	800375e <HAL_RTC_Init+0x62>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80037f4:	f240 1101 	movw	r1, #257	; 0x101
 80037f8:	481a      	ldr	r0, [pc, #104]	; (8003864 <HAL_RTC_Init+0x168>)
 80037fa:	f7fd f913 	bl	8000a24 <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80037fe:	6923      	ldr	r3, [r4, #16]
 8003800:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8003804:	d094      	beq.n	8003730 <HAL_RTC_Init+0x34>
 8003806:	e78e      	b.n	8003726 <HAL_RTC_Init+0x2a>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8003808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800380c:	4815      	ldr	r0, [pc, #84]	; (8003864 <HAL_RTC_Init+0x168>)
 800380e:	f7fd f909 	bl	8000a24 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8003812:	68e3      	ldr	r3, [r4, #12]
 8003814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003818:	d381      	bcc.n	800371e <HAL_RTC_Init+0x22>
 800381a:	e7eb      	b.n	80037f4 <HAL_RTC_Init+0xf8>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003822:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003824:	f7fd fa64 	bl	8000cf0 <HAL_GetTick>
 8003828:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	0692      	lsls	r2, r2, #26
 8003830:	d4bb      	bmi.n	80037aa <HAL_RTC_Init+0xae>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003832:	f7fd fa5d 	bl	8000cf0 <HAL_GetTick>
 8003836:	1b40      	subs	r0, r0, r5
 8003838:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800383c:	d9f5      	bls.n	800382a <HAL_RTC_Init+0x12e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800383e:	6822      	ldr	r2, [r4, #0]
 8003840:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003842:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003844:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 8003846:	2001      	movs	r0, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003848:	7763      	strb	r3, [r4, #29]
}
 800384a:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 800384c:	2001      	movs	r0, #1
}
 800384e:	4770      	bx	lr
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8003850:	21ff      	movs	r1, #255	; 0xff
 8003852:	4804      	ldr	r0, [pc, #16]	; (8003864 <HAL_RTC_Init+0x168>)
 8003854:	f7fd f8e6 	bl	8000a24 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8003858:	68a3      	ldr	r3, [r4, #8]
 800385a:	2b7f      	cmp	r3, #127	; 0x7f
 800385c:	f67f af5b 	bls.w	8003716 <HAL_RTC_Init+0x1a>
 8003860:	e7d2      	b.n	8003808 <HAL_RTC_Init+0x10c>
 8003862:	bf00      	nop
 8003864:	080042a4 	.word	0x080042a4

08003868 <HAL_RTC_SetTime>:
  assert_param(IS_RTC_FORMAT(Format));
 8003868:	2a01      	cmp	r2, #1
{
 800386a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800386e:	4616      	mov	r6, r2
 8003870:	4604      	mov	r4, r0
 8003872:	460d      	mov	r5, r1
  assert_param(IS_RTC_FORMAT(Format));
 8003874:	d904      	bls.n	8003880 <HAL_RTC_SetTime+0x18>
 8003876:	f240 21da 	movw	r1, #730	; 0x2da
 800387a:	48a9      	ldr	r0, [pc, #676]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 800387c:	f7fd f8d2 	bl	8000a24 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8003880:	68eb      	ldr	r3, [r5, #12]
 8003882:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003886:	d003      	beq.n	8003890 <HAL_RTC_SetTime+0x28>
 8003888:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800388c:	f040 80ea 	bne.w	8003a64 <HAL_RTC_SetTime+0x1fc>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8003890:	692b      	ldr	r3, [r5, #16]
 8003892:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8003896:	d004      	beq.n	80038a2 <HAL_RTC_SetTime+0x3a>
 8003898:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 800389c:	48a0      	ldr	r0, [pc, #640]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 800389e:	f7fd f8c1 	bl	8000a24 <assert_failed>
  __HAL_LOCK(hrtc);
 80038a2:	7f23      	ldrb	r3, [r4, #28]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	f000 80f3 	beq.w	8003a90 <HAL_RTC_SetTime+0x228>
 80038aa:	2201      	movs	r2, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038ac:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 80038ae:	7722      	strb	r2, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038b0:	7763      	strb	r3, [r4, #29]
 80038b2:	782b      	ldrb	r3, [r5, #0]
 80038b4:	6822      	ldr	r2, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 80038b6:	2e00      	cmp	r6, #0
 80038b8:	d16e      	bne.n	8003998 <HAL_RTC_SetTime+0x130>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80038ba:	6892      	ldr	r2, [r2, #8]
 80038bc:	0650      	lsls	r0, r2, #25
 80038be:	f140 80bc 	bpl.w	8003a3a <HAL_RTC_SetTime+0x1d2>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80038c2:	3b01      	subs	r3, #1
 80038c4:	2b0b      	cmp	r3, #11
 80038c6:	f200 80dd 	bhi.w	8003a84 <HAL_RTC_SetTime+0x21c>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80038ca:	78eb      	ldrb	r3, [r5, #3]
 80038cc:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 80038d0:	f040 811a 	bne.w	8003b08 <HAL_RTC_SetTime+0x2a0>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80038d4:	786b      	ldrb	r3, [r5, #1]
 80038d6:	2b3b      	cmp	r3, #59	; 0x3b
 80038d8:	f200 80ff 	bhi.w	8003ada <HAL_RTC_SetTime+0x272>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80038dc:	78a8      	ldrb	r0, [r5, #2]
 80038de:	283b      	cmp	r0, #59	; 0x3b
 80038e0:	f200 80f4 	bhi.w	8003acc <HAL_RTC_SetTime+0x264>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80038e4:	7829      	ldrb	r1, [r5, #0]
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;

  while(Value >= 10U)
 80038e6:	2909      	cmp	r1, #9
 80038e8:	f240 810c 	bls.w	8003b04 <HAL_RTC_SetTime+0x29c>
  uint32_t bcdhigh = 0U;
 80038ec:	2300      	movs	r3, #0
  {
    bcdhigh++;
    Value -= 10U;
 80038ee:	390a      	subs	r1, #10
 80038f0:	b2c9      	uxtb	r1, r1
  while(Value >= 10U)
 80038f2:	2909      	cmp	r1, #9
    bcdhigh++;
 80038f4:	f103 0301 	add.w	r3, r3, #1
  while(Value >= 10U)
 80038f8:	d8f9      	bhi.n	80038ee <HAL_RTC_SetTime+0x86>
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	b2da      	uxtb	r2, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80038fe:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003900:	4311      	orrs	r1, r2
  while(Value >= 10U)
 8003902:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003904:	ea4f 4101 	mov.w	r1, r1, lsl #16
  uint32_t bcdhigh = 0U;
 8003908:	f04f 0200 	mov.w	r2, #0
  while(Value >= 10U)
 800390c:	d907      	bls.n	800391e <HAL_RTC_SetTime+0xb6>
    Value -= 10U;
 800390e:	3b0a      	subs	r3, #10
 8003910:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8003912:	2b09      	cmp	r3, #9
    bcdhigh++;
 8003914:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8003918:	d8f9      	bhi.n	800390e <HAL_RTC_SetTime+0xa6>
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	b2d2      	uxtb	r2, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800391e:	4313      	orrs	r3, r2
  while(Value >= 10U)
 8003920:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003922:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 8003926:	f240 80eb 	bls.w	8003b00 <HAL_RTC_SetTime+0x298>
    Value -= 10U;
 800392a:	380a      	subs	r0, #10
 800392c:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 800392e:	2809      	cmp	r0, #9
    bcdhigh++;
 8003930:	f106 0601 	add.w	r6, r6, #1
  while(Value >= 10U)
 8003934:	d8f9      	bhi.n	800392a <HAL_RTC_SetTime+0xc2>
 8003936:	0136      	lsls	r6, r6, #4
 8003938:	b2f6      	uxtb	r6, r6
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800393a:	78ef      	ldrb	r7, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800393c:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003940:	4330      	orrs	r0, r6
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003942:	430b      	orrs	r3, r1
 8003944:	ea43 0700 	orr.w	r7, r3, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003948:	6822      	ldr	r2, [r4, #0]
 800394a:	21ca      	movs	r1, #202	; 0xca
 800394c:	2353      	movs	r3, #83	; 0x53
 800394e:	6251      	str	r1, [r2, #36]	; 0x24
 8003950:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003952:	68d3      	ldr	r3, [r2, #12]
 8003954:	0659      	lsls	r1, r3, #25
 8003956:	d555      	bpl.n	8003a04 <HAL_RTC_SetTime+0x19c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003958:	f007 377f 	and.w	r7, r7, #2139062143	; 0x7f7f7f7f
 800395c:	f027 47fe 	bic.w	r7, r7, #2130706432	; 0x7f000000
 8003960:	6017      	str	r7, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003962:	6891      	ldr	r1, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003964:	e9d5 3003 	ldrd	r3, r0, [r5, #12]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003968:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800396c:	6091      	str	r1, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800396e:	6891      	ldr	r1, [r2, #8]
 8003970:	4303      	orrs	r3, r0
 8003972:	430b      	orrs	r3, r1
 8003974:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003976:	68d3      	ldr	r3, [r2, #12]
 8003978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800397e:	6893      	ldr	r3, [r2, #8]
 8003980:	069b      	lsls	r3, r3, #26
 8003982:	f140 8088 	bpl.w	8003a96 <HAL_RTC_SetTime+0x22e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003986:	20ff      	movs	r0, #255	; 0xff
   __HAL_UNLOCK(hrtc);
 8003988:	2300      	movs	r3, #0
   hrtc->State = HAL_RTC_STATE_READY;
 800398a:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800398c:	6250      	str	r0, [r2, #36]	; 0x24
   return HAL_OK;
 800398e:	4618      	mov	r0, r3
   hrtc->State = HAL_RTC_STATE_READY;
 8003990:	7761      	strb	r1, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8003992:	7723      	strb	r3, [r4, #28]
}
 8003994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003998:	6891      	ldr	r1, [r2, #8]
 800399a:	091a      	lsrs	r2, r3, #4
 800399c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80039a0:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 80039a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	d04f      	beq.n	8003a4e <HAL_RTC_SetTime+0x1e6>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80039ae:	3b01      	subs	r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b0b      	cmp	r3, #11
 80039b6:	d85b      	bhi.n	8003a70 <HAL_RTC_SetTime+0x208>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80039b8:	78eb      	ldrb	r3, [r5, #3]
 80039ba:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 80039be:	f040 80a9 	bne.w	8003b14 <HAL_RTC_SetTime+0x2ac>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80039c2:	786b      	ldrb	r3, [r5, #1]
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80039c4:	091a      	lsrs	r2, r3, #4
 80039c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b3b      	cmp	r3, #59	; 0x3b
 80039d6:	f200 808d 	bhi.w	8003af4 <HAL_RTC_SetTime+0x28c>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80039da:	78af      	ldrb	r7, [r5, #2]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80039dc:	093a      	lsrs	r2, r7, #4
 80039de:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80039e2:	f007 020f 	and.w	r2, r7, #15
 80039e6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	2a3b      	cmp	r2, #59	; 0x3b
 80039ee:	d87a      	bhi.n	8003ae6 <HAL_RTC_SetTime+0x27e>
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80039f0:	7868      	ldrb	r0, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80039f2:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80039f4:	78eb      	ldrb	r3, [r5, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80039f6:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80039f8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80039fc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003a00:	4307      	orrs	r7, r0
 8003a02:	e7a1      	b.n	8003948 <HAL_RTC_SetTime+0xe0>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a08:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8003a0a:	f7fd f971 	bl	8000cf0 <HAL_GetTick>
 8003a0e:	4680      	mov	r8, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a10:	6822      	ldr	r2, [r4, #0]
 8003a12:	68d6      	ldr	r6, [r2, #12]
 8003a14:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8003a18:	d19e      	bne.n	8003958 <HAL_RTC_SetTime+0xf0>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a1a:	f7fd f969 	bl	8000cf0 <HAL_GetTick>
 8003a1e:	eba0 0008 	sub.w	r0, r0, r8
 8003a22:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003a26:	d9f3      	bls.n	8003a10 <HAL_RTC_SetTime+0x1a8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a2c:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a2e:	6251      	str	r1, [r2, #36]	; 0x24
    return HAL_ERROR;
 8003a30:	2001      	movs	r0, #1
    __HAL_UNLOCK(hrtc);
 8003a32:	7726      	strb	r6, [r4, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a34:	7763      	strb	r3, [r4, #29]
}
 8003a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8003a3a:	2b17      	cmp	r3, #23
      sTime->TimeFormat = 0x00U;
 8003a3c:	70ee      	strb	r6, [r5, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8003a3e:	f67f af49 	bls.w	80038d4 <HAL_RTC_SetTime+0x6c>
 8003a42:	f240 21ed 	movw	r1, #749	; 0x2ed
 8003a46:	4836      	ldr	r0, [pc, #216]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 8003a48:	f7fc ffec 	bl	8000a24 <assert_failed>
 8003a4c:	e742      	b.n	80038d4 <HAL_RTC_SetTime+0x6c>
  return (tmp + (Value & (uint8_t)0x0F));
 8003a4e:	4413      	add	r3, r2
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b17      	cmp	r3, #23
      sTime->TimeFormat = 0x00U;
 8003a54:	70e9      	strb	r1, [r5, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8003a56:	d9b4      	bls.n	80039c2 <HAL_RTC_SetTime+0x15a>
 8003a58:	f240 3101 	movw	r1, #769	; 0x301
 8003a5c:	4830      	ldr	r0, [pc, #192]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 8003a5e:	f7fc ffe1 	bl	8000a24 <assert_failed>
 8003a62:	e7ae      	b.n	80039c2 <HAL_RTC_SetTime+0x15a>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8003a64:	f240 21db 	movw	r1, #731	; 0x2db
 8003a68:	482d      	ldr	r0, [pc, #180]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 8003a6a:	f7fc ffdb 	bl	8000a24 <assert_failed>
 8003a6e:	e70f      	b.n	8003890 <HAL_RTC_SetTime+0x28>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8003a70:	f240 21fb 	movw	r1, #763	; 0x2fb
 8003a74:	482a      	ldr	r0, [pc, #168]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 8003a76:	f7fc ffd5 	bl	8000a24 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8003a7a:	78eb      	ldrb	r3, [r5, #3]
 8003a7c:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 8003a80:	d09f      	beq.n	80039c2 <HAL_RTC_SetTime+0x15a>
 8003a82:	e047      	b.n	8003b14 <HAL_RTC_SetTime+0x2ac>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8003a84:	f240 21e7 	movw	r1, #743	; 0x2e7
 8003a88:	4825      	ldr	r0, [pc, #148]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 8003a8a:	f7fc ffcb 	bl	8000a24 <assert_failed>
 8003a8e:	e71c      	b.n	80038ca <HAL_RTC_SetTime+0x62>
  __HAL_LOCK(hrtc);
 8003a90:	2002      	movs	r0, #2
}
 8003a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a96:	68d3      	ldr	r3, [r2, #12]
 8003a98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a9c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8003a9e:	f7fd f927 	bl	8000cf0 <HAL_GetTick>
 8003aa2:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	68d5      	ldr	r5, [r2, #12]
 8003aa8:	f015 0520 	ands.w	r5, r5, #32
 8003aac:	f47f af6b 	bne.w	8003986 <HAL_RTC_SetTime+0x11e>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ab0:	f7fd f91e 	bl	8000cf0 <HAL_GetTick>
 8003ab4:	1b80      	subs	r0, r0, r6
 8003ab6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003aba:	d9f3      	bls.n	8003aa4 <HAL_RTC_SetTime+0x23c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003abc:	6822      	ldr	r2, [r4, #0]
 8003abe:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ac0:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ac2:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 8003ac4:	2001      	movs	r0, #1
        __HAL_UNLOCK(hrtc);
 8003ac6:	7725      	strb	r5, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ac8:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8003aca:	e763      	b.n	8003994 <HAL_RTC_SetTime+0x12c>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8003acc:	4814      	ldr	r0, [pc, #80]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 8003ace:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8003ad2:	f7fc ffa7 	bl	8000a24 <assert_failed>
 8003ad6:	78a8      	ldrb	r0, [r5, #2]
 8003ad8:	e704      	b.n	80038e4 <HAL_RTC_SetTime+0x7c>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8003ada:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003ade:	4810      	ldr	r0, [pc, #64]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 8003ae0:	f7fc ffa0 	bl	8000a24 <assert_failed>
 8003ae4:	e6fa      	b.n	80038dc <HAL_RTC_SetTime+0x74>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8003ae6:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003aea:	480d      	ldr	r0, [pc, #52]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 8003aec:	f7fc ff9a 	bl	8000a24 <assert_failed>
 8003af0:	78af      	ldrb	r7, [r5, #2]
 8003af2:	e77d      	b.n	80039f0 <HAL_RTC_SetTime+0x188>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8003af4:	f240 3103 	movw	r1, #771	; 0x303
 8003af8:	4809      	ldr	r0, [pc, #36]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 8003afa:	f7fc ff93 	bl	8000a24 <assert_failed>
 8003afe:	e76c      	b.n	80039da <HAL_RTC_SetTime+0x172>
  while(Value >= 10U)
 8003b00:	2600      	movs	r6, #0
 8003b02:	e71a      	b.n	800393a <HAL_RTC_SetTime+0xd2>
 8003b04:	2200      	movs	r2, #0
 8003b06:	e6fa      	b.n	80038fe <HAL_RTC_SetTime+0x96>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8003b08:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8003b0c:	4804      	ldr	r0, [pc, #16]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 8003b0e:	f7fc ff89 	bl	8000a24 <assert_failed>
 8003b12:	e6df      	b.n	80038d4 <HAL_RTC_SetTime+0x6c>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8003b14:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8003b18:	4801      	ldr	r0, [pc, #4]	; (8003b20 <HAL_RTC_SetTime+0x2b8>)
 8003b1a:	f7fc ff83 	bl	8000a24 <assert_failed>
 8003b1e:	e750      	b.n	80039c2 <HAL_RTC_SetTime+0x15a>
 8003b20:	080042a4 	.word	0x080042a4

08003b24 <HAL_RTC_GetTime>:
  assert_param(IS_RTC_FORMAT(Format));
 8003b24:	2a01      	cmp	r2, #1
{
 8003b26:	b570      	push	{r4, r5, r6, lr}
 8003b28:	4616      	mov	r6, r2
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	460c      	mov	r4, r1
  assert_param(IS_RTC_FORMAT(Format));
 8003b2e:	d904      	bls.n	8003b3a <HAL_RTC_GetTime+0x16>
 8003b30:	f240 315d 	movw	r1, #861	; 0x35d
 8003b34:	481a      	ldr	r0, [pc, #104]	; (8003ba0 <HAL_RTC_GetTime+0x7c>)
 8003b36:	f7fc ff75 	bl	8000a24 <assert_failed>
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003b3a:	682b      	ldr	r3, [r5, #0]
 8003b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003b3e:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003b40:	681b      	ldr	r3, [r3, #0]
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003b42:	6062      	str	r2, [r4, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003b44:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003b48:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003b4c:	0c19      	lsrs	r1, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003b4e:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003b52:	f001 053f 	and.w	r5, r1, #63	; 0x3f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003b56:	f001 0240 	and.w	r2, r1, #64	; 0x40
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003b5a:	60a0      	str	r0, [r4, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003b5c:	f3c3 2006 	ubfx	r0, r3, #8, #7
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003b60:	b2db      	uxtb	r3, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003b62:	7025      	strb	r5, [r4, #0]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003b64:	70e2      	strb	r2, [r4, #3]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003b66:	7060      	strb	r0, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003b68:	70a3      	strb	r3, [r4, #2]
  if(Format == RTC_FORMAT_BIN)
 8003b6a:	b9be      	cbnz	r6, 8003b9c <HAL_RTC_GetTime+0x78>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003b6c:	0902      	lsrs	r2, r0, #4
 8003b6e:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 8003b72:	092d      	lsrs	r5, r5, #4
 8003b74:	091a      	lsrs	r2, r3, #4
 8003b76:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003b7a:	f001 010f 	and.w	r1, r1, #15
 8003b7e:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003b82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8003b8e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8003b92:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b96:	7021      	strb	r1, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b98:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b9a:	70a3      	strb	r3, [r4, #2]
}
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ba0:	080042a4 	.word	0x080042a4

08003ba4 <HAL_RTC_SetDate>:
  assert_param(IS_RTC_FORMAT(Format));
 8003ba4:	2a01      	cmp	r2, #1
{
 8003ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba8:	4615      	mov	r5, r2
 8003baa:	4604      	mov	r4, r0
 8003bac:	460e      	mov	r6, r1
  assert_param(IS_RTC_FORMAT(Format));
 8003bae:	d904      	bls.n	8003bba <HAL_RTC_SetDate+0x16>
 8003bb0:	f240 318a 	movw	r1, #906	; 0x38a
 8003bb4:	4888      	ldr	r0, [pc, #544]	; (8003dd8 <HAL_RTC_SetDate+0x234>)
 8003bb6:	f7fc ff35 	bl	8000a24 <assert_failed>
 __HAL_LOCK(hrtc);
 8003bba:	7f23      	ldrb	r3, [r4, #28]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	f000 80e4 	beq.w	8003d8a <HAL_RTC_SetDate+0x1e6>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bc2:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	7722      	strb	r2, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bc8:	7763      	strb	r3, [r4, #29]
 8003bca:	7833      	ldrb	r3, [r6, #0]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b2db      	uxtb	r3, r3
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003bd0:	2d00      	cmp	r5, #0
 8003bd2:	d058      	beq.n	8003c86 <HAL_RTC_SetDate+0xe2>
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8003bd4:	2b06      	cmp	r3, #6
 8003bd6:	f200 80f4 	bhi.w	8003dc2 <HAL_RTC_SetDate+0x21e>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8003bda:	78f3      	ldrb	r3, [r6, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003bdc:	091a      	lsrs	r2, r3, #4
 8003bde:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b63      	cmp	r3, #99	; 0x63
 8003bee:	f200 80e2 	bhi.w	8003db6 <HAL_RTC_SetDate+0x212>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8003bf2:	7872      	ldrb	r2, [r6, #1]
  return (tmp + (Value & (uint8_t)0x0F));
 8003bf4:	f002 030f 	and.w	r3, r2, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003bf8:	0912      	lsrs	r2, r2, #4
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8003bfa:	3b01      	subs	r3, #1
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003bfc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8003c00:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b0b      	cmp	r3, #11
 8003c08:	d904      	bls.n	8003c14 <HAL_RTC_SetDate+0x70>
 8003c0a:	f240 31a6 	movw	r1, #934	; 0x3a6
 8003c0e:	4872      	ldr	r0, [pc, #456]	; (8003dd8 <HAL_RTC_SetDate+0x234>)
 8003c10:	f7fc ff08 	bl	8000a24 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8003c14:	78b1      	ldrb	r1, [r6, #2]
  return (tmp + (Value & (uint8_t)0x0F));
 8003c16:	f001 030f 	and.w	r3, r1, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003c1a:	090a      	lsrs	r2, r1, #4
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8003c1c:	3b01      	subs	r3, #1
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003c1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8003c22:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b1e      	cmp	r3, #30
 8003c2a:	d905      	bls.n	8003c38 <HAL_RTC_SetDate+0x94>
 8003c2c:	f240 31a7 	movw	r1, #935	; 0x3a7
 8003c30:	4869      	ldr	r0, [pc, #420]	; (8003dd8 <HAL_RTC_SetDate+0x234>)
 8003c32:	f7fc fef7 	bl	8000a24 <assert_failed>
 8003c36:	78b1      	ldrb	r1, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003c38:	7870      	ldrb	r0, [r6, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c3a:	78f2      	ldrb	r2, [r6, #3]
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003c3c:	7833      	ldrb	r3, [r6, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003c3e:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c40:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003c44:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8003c48:	ea40 0601 	orr.w	r6, r0, r1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	21ca      	movs	r1, #202	; 0xca
 8003c50:	2353      	movs	r3, #83	; 0x53
 8003c52:	6251      	str	r1, [r2, #36]	; 0x24
 8003c54:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c56:	68d3      	ldr	r3, [r2, #12]
 8003c58:	0659      	lsls	r1, r3, #25
 8003c5a:	d55a      	bpl.n	8003d12 <HAL_RTC_SetDate+0x16e>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c5c:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 8003c60:	f026 06c0 	bic.w	r6, r6, #192	; 0xc0
 8003c64:	6056      	str	r6, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003c66:	68d3      	ldr	r3, [r2, #12]
 8003c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c6c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003c6e:	6893      	ldr	r3, [r2, #8]
 8003c70:	069b      	lsls	r3, r3, #26
 8003c72:	f140 808c 	bpl.w	8003d8e <HAL_RTC_SetDate+0x1ea>
    __HAL_UNLOCK(hrtc);
 8003c76:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c78:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8003c7a:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c7c:	6250      	str	r0, [r2, #36]	; 0x24
    return HAL_OK;
 8003c7e:	4618      	mov	r0, r3
    hrtc->State = HAL_RTC_STATE_READY ;
 8003c80:	7761      	strb	r1, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8003c82:	7723      	strb	r3, [r4, #28]
}
 8003c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003c86:	7872      	ldrb	r2, [r6, #1]
 8003c88:	06d0      	lsls	r0, r2, #27
 8003c8a:	d55b      	bpl.n	8003d44 <HAL_RTC_SetDate+0x1a0>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003c8c:	f022 0210 	bic.w	r2, r2, #16
 8003c90:	320a      	adds	r2, #10
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8003c92:	2b06      	cmp	r3, #6
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003c94:	7072      	strb	r2, [r6, #1]
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8003c96:	d857      	bhi.n	8003d48 <HAL_RTC_SetDate+0x1a4>
    assert_param(IS_RTC_YEAR(sDate->Year));
 8003c98:	78f3      	ldrb	r3, [r6, #3]
 8003c9a:	2b63      	cmp	r3, #99	; 0x63
 8003c9c:	d85c      	bhi.n	8003d58 <HAL_RTC_SetDate+0x1b4>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8003c9e:	7873      	ldrb	r3, [r6, #1]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	2b0b      	cmp	r3, #11
 8003ca4:	d861      	bhi.n	8003d6a <HAL_RTC_SetDate+0x1c6>
    assert_param(IS_RTC_DATE(sDate->Date));
 8003ca6:	78b0      	ldrb	r0, [r6, #2]
 8003ca8:	1e43      	subs	r3, r0, #1
 8003caa:	2b1e      	cmp	r3, #30
 8003cac:	d866      	bhi.n	8003d7c <HAL_RTC_SetDate+0x1d8>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003cae:	78f1      	ldrb	r1, [r6, #3]
  while(Value >= 10U)
 8003cb0:	2909      	cmp	r1, #9
 8003cb2:	f240 808e 	bls.w	8003dd2 <HAL_RTC_SetDate+0x22e>
  uint32_t bcdhigh = 0U;
 8003cb6:	2300      	movs	r3, #0
    Value -= 10U;
 8003cb8:	390a      	subs	r1, #10
 8003cba:	b2c9      	uxtb	r1, r1
  while(Value >= 10U)
 8003cbc:	2909      	cmp	r1, #9
    bcdhigh++;
 8003cbe:	f103 0301 	add.w	r3, r3, #1
  while(Value >= 10U)
 8003cc2:	d8f9      	bhi.n	8003cb8 <HAL_RTC_SetDate+0x114>
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	b2da      	uxtb	r2, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003cc8:	7873      	ldrb	r3, [r6, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003cca:	4311      	orrs	r1, r2
  while(Value >= 10U)
 8003ccc:	2b09      	cmp	r3, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003cce:	ea4f 4101 	mov.w	r1, r1, lsl #16
  uint32_t bcdhigh = 0U;
 8003cd2:	f04f 0200 	mov.w	r2, #0
  while(Value >= 10U)
 8003cd6:	d907      	bls.n	8003ce8 <HAL_RTC_SetDate+0x144>
    Value -= 10U;
 8003cd8:	3b0a      	subs	r3, #10
 8003cda:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8003cdc:	2b09      	cmp	r3, #9
    bcdhigh++;
 8003cde:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8003ce2:	d8f9      	bhi.n	8003cd8 <HAL_RTC_SetDate+0x134>
 8003ce4:	0112      	lsls	r2, r2, #4
 8003ce6:	b2d2      	uxtb	r2, r2
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003ce8:	4313      	orrs	r3, r2
  while(Value >= 10U)
 8003cea:	2809      	cmp	r0, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003cec:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 8003cf0:	d96d      	bls.n	8003dce <HAL_RTC_SetDate+0x22a>
    Value -= 10U;
 8003cf2:	380a      	subs	r0, #10
 8003cf4:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8003cf6:	2809      	cmp	r0, #9
    bcdhigh++;
 8003cf8:	f105 0501 	add.w	r5, r5, #1
  while(Value >= 10U)
 8003cfc:	d8f9      	bhi.n	8003cf2 <HAL_RTC_SetDate+0x14e>
 8003cfe:	012d      	lsls	r5, r5, #4
 8003d00:	b2ed      	uxtb	r5, r5
                 ((uint32_t)sDate->WeekDay << 13U));
 8003d02:	7836      	ldrb	r6, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003d04:	ea41 3646 	orr.w	r6, r1, r6, lsl #13
 8003d08:	4333      	orrs	r3, r6
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003d0a:	4328      	orrs	r0, r5
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003d0c:	ea43 0600 	orr.w	r6, r3, r0
 8003d10:	e79c      	b.n	8003c4c <HAL_RTC_SetDate+0xa8>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d16:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8003d18:	f7fc ffea 	bl	8000cf0 <HAL_GetTick>
 8003d1c:	4607      	mov	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	68d5      	ldr	r5, [r2, #12]
 8003d22:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003d26:	d199      	bne.n	8003c5c <HAL_RTC_SetDate+0xb8>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d28:	f7fc ffe2 	bl	8000cf0 <HAL_GetTick>
 8003d2c:	1bc0      	subs	r0, r0, r7
 8003d2e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003d32:	d9f4      	bls.n	8003d1e <HAL_RTC_SetDate+0x17a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d34:	6822      	ldr	r2, [r4, #0]
 8003d36:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d38:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d3a:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 8003d3c:	2001      	movs	r0, #1
        __HAL_UNLOCK(hrtc);
 8003d3e:	7725      	strb	r5, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d40:	7763      	strb	r3, [r4, #29]
}
 8003d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	d9a7      	bls.n	8003c98 <HAL_RTC_SetDate+0xf4>
 8003d48:	f240 3196 	movw	r1, #918	; 0x396
 8003d4c:	4822      	ldr	r0, [pc, #136]	; (8003dd8 <HAL_RTC_SetDate+0x234>)
 8003d4e:	f7fc fe69 	bl	8000a24 <assert_failed>
    assert_param(IS_RTC_YEAR(sDate->Year));
 8003d52:	78f3      	ldrb	r3, [r6, #3]
 8003d54:	2b63      	cmp	r3, #99	; 0x63
 8003d56:	d9a2      	bls.n	8003c9e <HAL_RTC_SetDate+0xfa>
 8003d58:	f240 319a 	movw	r1, #922	; 0x39a
 8003d5c:	481e      	ldr	r0, [pc, #120]	; (8003dd8 <HAL_RTC_SetDate+0x234>)
 8003d5e:	f7fc fe61 	bl	8000a24 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8003d62:	7873      	ldrb	r3, [r6, #1]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	2b0b      	cmp	r3, #11
 8003d68:	d99d      	bls.n	8003ca6 <HAL_RTC_SetDate+0x102>
 8003d6a:	481b      	ldr	r0, [pc, #108]	; (8003dd8 <HAL_RTC_SetDate+0x234>)
 8003d6c:	f240 319b 	movw	r1, #923	; 0x39b
 8003d70:	f7fc fe58 	bl	8000a24 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8003d74:	78b0      	ldrb	r0, [r6, #2]
 8003d76:	1e43      	subs	r3, r0, #1
 8003d78:	2b1e      	cmp	r3, #30
 8003d7a:	d998      	bls.n	8003cae <HAL_RTC_SetDate+0x10a>
 8003d7c:	4816      	ldr	r0, [pc, #88]	; (8003dd8 <HAL_RTC_SetDate+0x234>)
 8003d7e:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8003d82:	f7fc fe4f 	bl	8000a24 <assert_failed>
 8003d86:	78b0      	ldrb	r0, [r6, #2]
 8003d88:	e791      	b.n	8003cae <HAL_RTC_SetDate+0x10a>
 __HAL_LOCK(hrtc);
 8003d8a:	2002      	movs	r0, #2
}
 8003d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003d8e:	68d3      	ldr	r3, [r2, #12]
 8003d90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d94:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8003d96:	f7fc ffab 	bl	8000cf0 <HAL_GetTick>
 8003d9a:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003d9c:	6822      	ldr	r2, [r4, #0]
 8003d9e:	68d5      	ldr	r5, [r2, #12]
 8003da0:	f015 0520 	ands.w	r5, r5, #32
 8003da4:	f47f af67 	bne.w	8003c76 <HAL_RTC_SetDate+0xd2>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003da8:	f7fc ffa2 	bl	8000cf0 <HAL_GetTick>
 8003dac:	1b80      	subs	r0, r0, r6
 8003dae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003db2:	d9f3      	bls.n	8003d9c <HAL_RTC_SetDate+0x1f8>
 8003db4:	e7be      	b.n	8003d34 <HAL_RTC_SetDate+0x190>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8003db6:	f240 31a5 	movw	r1, #933	; 0x3a5
 8003dba:	4807      	ldr	r0, [pc, #28]	; (8003dd8 <HAL_RTC_SetDate+0x234>)
 8003dbc:	f7fc fe32 	bl	8000a24 <assert_failed>
 8003dc0:	e717      	b.n	8003bf2 <HAL_RTC_SetDate+0x4e>
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8003dc2:	f240 3196 	movw	r1, #918	; 0x396
 8003dc6:	4804      	ldr	r0, [pc, #16]	; (8003dd8 <HAL_RTC_SetDate+0x234>)
 8003dc8:	f7fc fe2c 	bl	8000a24 <assert_failed>
 8003dcc:	e705      	b.n	8003bda <HAL_RTC_SetDate+0x36>
  while(Value >= 10U)
 8003dce:	2500      	movs	r5, #0
 8003dd0:	e797      	b.n	8003d02 <HAL_RTC_SetDate+0x15e>
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	e778      	b.n	8003cc8 <HAL_RTC_SetDate+0x124>
 8003dd6:	bf00      	nop
 8003dd8:	080042a4 	.word	0x080042a4

08003ddc <HAL_RTC_GetDate>:
  assert_param(IS_RTC_FORMAT(Format));
 8003ddc:	2a01      	cmp	r2, #1
{
 8003dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de0:	4617      	mov	r7, r2
 8003de2:	4605      	mov	r5, r0
 8003de4:	460c      	mov	r4, r1
  assert_param(IS_RTC_FORMAT(Format));
 8003de6:	d904      	bls.n	8003df2 <HAL_RTC_GetDate+0x16>
 8003de8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8003dec:	4817      	ldr	r0, [pc, #92]	; (8003e4c <HAL_RTC_GetDate+0x70>)
 8003dee:	f7fc fe19 	bl	8000a24 <assert_failed>
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003df2:	682b      	ldr	r3, [r5, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003dfa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003dfe:	f3c3 2507 	ubfx	r5, r3, #8, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003e02:	0c18      	lsrs	r0, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003e04:	b2d9      	uxtb	r1, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003e06:	f005 061f 	and.w	r6, r5, #31
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003e0a:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003e0e:	7066      	strb	r6, [r4, #1]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003e10:	70e0      	strb	r0, [r4, #3]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003e12:	70a1      	strb	r1, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003e14:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8003e16:	b9bf      	cbnz	r7, 8003e48 <HAL_RTC_GetDate+0x6c>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003e18:	0936      	lsrs	r6, r6, #4
 8003e1a:	00b3      	lsls	r3, r6, #2
 8003e1c:	0902      	lsrs	r2, r0, #4
 8003e1e:	441e      	add	r6, r3
 8003e20:	090b      	lsrs	r3, r1, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8003e22:	f005 050f 	and.w	r5, r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003e26:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003e2a:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003e2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003e32:	f001 010f 	and.w	r1, r1, #15
 8003e36:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8003e3a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003e3e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003e42:	7065      	strb	r5, [r4, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003e44:	70e0      	strb	r0, [r4, #3]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003e46:	70a1      	strb	r1, [r4, #2]
}
 8003e48:	2000      	movs	r0, #0
 8003e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e4c:	080042a4 	.word	0x080042a4

08003e50 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e50:	2800      	cmp	r0, #0
 8003e52:	f000 80c8 	beq.w	8003fe6 <HAL_UART_Init+0x196>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003e56:	6982      	ldr	r2, [r0, #24]
 8003e58:	6803      	ldr	r3, [r0, #0]
{
 8003e5a:	b570      	push	{r4, r5, r6, lr}
 8003e5c:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003e5e:	2a00      	cmp	r2, #0
 8003e60:	f000 80ad 	beq.w	8003fbe <HAL_UART_Init+0x16e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003e64:	498a      	ldr	r1, [pc, #552]	; (8004090 <HAL_UART_Init+0x240>)
 8003e66:	428b      	cmp	r3, r1
 8003e68:	f000 8101 	beq.w	800406e <HAL_UART_Init+0x21e>
 8003e6c:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 8003e70:	428b      	cmp	r3, r1
 8003e72:	f000 80fc 	beq.w	800406e <HAL_UART_Init+0x21e>
 8003e76:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 8003e7a:	428b      	cmp	r3, r1
 8003e7c:	f000 80f7 	beq.w	800406e <HAL_UART_Init+0x21e>
 8003e80:	f240 114b 	movw	r1, #331	; 0x14b
 8003e84:	4883      	ldr	r0, [pc, #524]	; (8004094 <HAL_UART_Init+0x244>)
 8003e86:	f7fc fdcd 	bl	8000a24 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003e8a:	69a2      	ldr	r2, [r4, #24]
 8003e8c:	2a00      	cmp	r2, #0
 8003e8e:	f040 80ee 	bne.w	800406e <HAL_UART_Init+0x21e>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003e92:	68a3      	ldr	r3, [r4, #8]
 8003e94:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8003e98:	d004      	beq.n	8003ea4 <HAL_UART_Init+0x54>
 8003e9a:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8003e9e:	487d      	ldr	r0, [pc, #500]	; (8004094 <HAL_UART_Init+0x244>)
 8003ea0:	f7fc fdc0 	bl	8000a24 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003ea4:	69e3      	ldr	r3, [r4, #28]
 8003ea6:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8003eaa:	d004      	beq.n	8003eb6 <HAL_UART_Init+0x66>
 8003eac:	f240 1153 	movw	r1, #339	; 0x153
 8003eb0:	4878      	ldr	r0, [pc, #480]	; (8004094 <HAL_UART_Init+0x244>)
 8003eb2:	f7fc fdb7 	bl	8000a24 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003eba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80c6 	beq.w	8004050 <HAL_UART_Init+0x200>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec4:	2324      	movs	r3, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003ec8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003ecc:	68d3      	ldr	r3, [r2, #12]
{
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003ece:	6860      	ldr	r0, [r4, #4]
 8003ed0:	4971      	ldr	r1, [pc, #452]	; (8004098 <HAL_UART_Init+0x248>)
  __HAL_UART_DISABLE(huart);
 8003ed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003ed6:	4288      	cmp	r0, r1
  __HAL_UART_DISABLE(huart);
 8003ed8:	60d3      	str	r3, [r2, #12]
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003eda:	f200 80b3 	bhi.w	8004044 <HAL_UART_Init+0x1f4>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003ede:	68e3      	ldr	r3, [r4, #12]
 8003ee0:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8003ee4:	d004      	beq.n	8003ef0 <HAL_UART_Init+0xa0>
 8003ee6:	f640 31fc 	movw	r1, #3068	; 0xbfc
 8003eea:	486a      	ldr	r0, [pc, #424]	; (8004094 <HAL_UART_Init+0x244>)
 8003eec:	f7fc fd9a 	bl	8000a24 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003ef0:	6923      	ldr	r3, [r4, #16]
 8003ef2:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8003ef6:	d003      	beq.n	8003f00 <HAL_UART_Init+0xb0>
 8003ef8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003efc:	f040 80ae 	bne.w	800405c <HAL_UART_Init+0x20c>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003f00:	6960      	ldr	r0, [r4, #20]
 8003f02:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003f06:	4218      	tst	r0, r3
 8003f08:	d100      	bne.n	8003f0c <HAL_UART_Init+0xbc>
 8003f0a:	b928      	cbnz	r0, 8003f18 <HAL_UART_Init+0xc8>
 8003f0c:	4861      	ldr	r0, [pc, #388]	; (8004094 <HAL_UART_Init+0x244>)
 8003f0e:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8003f12:	f7fc fd87 	bl	8000a24 <assert_failed>
 8003f16:	6960      	ldr	r0, [r4, #20]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f18:	6822      	ldr	r2, [r4, #0]
 8003f1a:	68e5      	ldr	r5, [r4, #12]
 8003f1c:	6911      	ldr	r1, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8003f1e:	68a3      	ldr	r3, [r4, #8]
 8003f20:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f22:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003f26:	4329      	orrs	r1, r5
 8003f28:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003f2a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f2c:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003f2e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003f32:	4333      	orrs	r3, r6
 8003f34:	f021 010c 	bic.w	r1, r1, #12
 8003f38:	432b      	orrs	r3, r5
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	4303      	orrs	r3, r0
 8003f3e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f40:	6953      	ldr	r3, [r2, #20]
 8003f42:	69a1      	ldr	r1, [r4, #24]
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f4a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f4e:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f50:	4b4f      	ldr	r3, [pc, #316]	; (8004090 <HAL_UART_Init+0x240>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f52:	d04a      	beq.n	8003fea <HAL_UART_Init+0x19a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d072      	beq.n	800403e <HAL_UART_Init+0x1ee>
 8003f58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d06e      	beq.n	800403e <HAL_UART_Init+0x1ee>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f60:	f7ff fa90 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f64:	6863      	ldr	r3, [r4, #4]
 8003f66:	4d4d      	ldr	r5, [pc, #308]	; (800409c <HAL_UART_Init+0x24c>)
 8003f68:	2219      	movs	r2, #25
 8003f6a:	fba0 0102 	umull	r0, r1, r0, r2
 8003f6e:	009a      	lsls	r2, r3, #2
 8003f70:	0f9b      	lsrs	r3, r3, #30
 8003f72:	f7fc f931 	bl	80001d8 <__aeabi_uldivmod>
 8003f76:	fba5 2100 	umull	r2, r1, r5, r0
 8003f7a:	0949      	lsrs	r1, r1, #5
 8003f7c:	2264      	movs	r2, #100	; 0x64
 8003f7e:	fb02 0211 	mls	r2, r2, r1, r0
 8003f82:	0112      	lsls	r2, r2, #4
 8003f84:	3232      	adds	r2, #50	; 0x32
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	fba5 0202 	umull	r0, r2, r5, r2
 8003f8c:	0109      	lsls	r1, r1, #4
 8003f8e:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 8003f92:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fa2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003fa4:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003fa8:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8003faa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fae:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8003fb0:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb2:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fb4:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8003fbc:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003fbe:	4a34      	ldr	r2, [pc, #208]	; (8004090 <HAL_UART_Init+0x240>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	f43f af66 	beq.w	8003e92 <HAL_UART_Init+0x42>
 8003fc6:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	f43f af61 	beq.w	8003e92 <HAL_UART_Init+0x42>
 8003fd0:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	f43f af5c 	beq.w	8003e92 <HAL_UART_Init+0x42>
 8003fda:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003fde:	482d      	ldr	r0, [pc, #180]	; (8004094 <HAL_UART_Init+0x244>)
 8003fe0:	f7fc fd20 	bl	8000a24 <assert_failed>
 8003fe4:	e755      	b.n	8003e92 <HAL_UART_Init+0x42>
    return HAL_ERROR;
 8003fe6:	2001      	movs	r0, #1
}
 8003fe8:	4770      	bx	lr
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d03c      	beq.n	8004068 <HAL_UART_Init+0x218>
 8003fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d038      	beq.n	8004068 <HAL_UART_Init+0x218>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ff6:	f7ff fa45 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ffa:	6862      	ldr	r2, [r4, #4]
 8003ffc:	2600      	movs	r6, #0
 8003ffe:	1892      	adds	r2, r2, r2
 8004000:	f04f 0119 	mov.w	r1, #25
 8004004:	eb46 0306 	adc.w	r3, r6, r6
 8004008:	fba0 0101 	umull	r0, r1, r0, r1
 800400c:	f7fc f8e4 	bl	80001d8 <__aeabi_uldivmod>
 8004010:	4e22      	ldr	r6, [pc, #136]	; (800409c <HAL_UART_Init+0x24c>)
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	fba6 2100 	umull	r2, r1, r6, r0
 8004018:	094d      	lsrs	r5, r1, #5
 800401a:	2264      	movs	r2, #100	; 0x64
 800401c:	fb02 0215 	mls	r2, r2, r5, r0
 8004020:	00d2      	lsls	r2, r2, #3
 8004022:	3232      	adds	r2, #50	; 0x32
 8004024:	fba6 1202 	umull	r1, r2, r6, r2
 8004028:	0952      	lsrs	r2, r2, #5
 800402a:	f002 0107 	and.w	r1, r2, #7
 800402e:	0052      	lsls	r2, r2, #1
 8004030:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004034:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004038:	440a      	add	r2, r1
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	e7aa      	b.n	8003f94 <HAL_UART_Init+0x144>
      pclk = HAL_RCC_GetPCLK2Freq();
 800403e:	f7ff fa31 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8004042:	e78f      	b.n	8003f64 <HAL_UART_Init+0x114>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004044:	f640 31fb 	movw	r1, #3067	; 0xbfb
 8004048:	4812      	ldr	r0, [pc, #72]	; (8004094 <HAL_UART_Init+0x244>)
 800404a:	f7fc fceb 	bl	8000a24 <assert_failed>
 800404e:	e746      	b.n	8003ede <HAL_UART_Init+0x8e>
    huart->Lock = HAL_UNLOCKED;
 8004050:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004054:	4620      	mov	r0, r4
 8004056:	f7fc fda1 	bl	8000b9c <HAL_UART_MspInit>
 800405a:	e733      	b.n	8003ec4 <HAL_UART_Init+0x74>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800405c:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8004060:	480c      	ldr	r0, [pc, #48]	; (8004094 <HAL_UART_Init+0x244>)
 8004062:	f7fc fcdf 	bl	8000a24 <assert_failed>
 8004066:	e74b      	b.n	8003f00 <HAL_UART_Init+0xb0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004068:	f7ff fa1c 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 800406c:	e7c5      	b.n	8003ffa <HAL_UART_Init+0x1aa>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800406e:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 8004072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004076:	f43f af0c 	beq.w	8003e92 <HAL_UART_Init+0x42>
 800407a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800407e:	f43f af08 	beq.w	8003e92 <HAL_UART_Init+0x42>
 8004082:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004086:	4803      	ldr	r0, [pc, #12]	; (8004094 <HAL_UART_Init+0x244>)
 8004088:	f7fc fccc 	bl	8000a24 <assert_failed>
 800408c:	e701      	b.n	8003e92 <HAL_UART_Init+0x42>
 800408e:	bf00      	nop
 8004090:	40011000 	.word	0x40011000
 8004094:	080042dc 	.word	0x080042dc
 8004098:	00a037a0 	.word	0x00a037a0
 800409c:	51eb851f 	.word	0x51eb851f

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4e0d      	ldr	r6, [pc, #52]	; (80040d8 <__libc_init_array+0x38>)
 80040a4:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a6:	1ba4      	subs	r4, r4, r6
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	2500      	movs	r5, #0
 80040ac:	42a5      	cmp	r5, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	4e0b      	ldr	r6, [pc, #44]	; (80040e0 <__libc_init_array+0x40>)
 80040b2:	4c0c      	ldr	r4, [pc, #48]	; (80040e4 <__libc_init_array+0x44>)
 80040b4:	f000 f82c 	bl	8004110 <_init>
 80040b8:	1ba4      	subs	r4, r4, r6
 80040ba:	10a4      	asrs	r4, r4, #2
 80040bc:	2500      	movs	r5, #0
 80040be:	42a5      	cmp	r5, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040c8:	4798      	blx	r3
 80040ca:	3501      	adds	r5, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040d2:	4798      	blx	r3
 80040d4:	3501      	adds	r5, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	08004320 	.word	0x08004320
 80040dc:	08004320 	.word	0x08004320
 80040e0:	08004320 	.word	0x08004320
 80040e4:	08004324 	.word	0x08004324

080040e8 <memcpy>:
 80040e8:	b510      	push	{r4, lr}
 80040ea:	1e43      	subs	r3, r0, #1
 80040ec:	440a      	add	r2, r1
 80040ee:	4291      	cmp	r1, r2
 80040f0:	d100      	bne.n	80040f4 <memcpy+0xc>
 80040f2:	bd10      	pop	{r4, pc}
 80040f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040fc:	e7f7      	b.n	80040ee <memcpy+0x6>

080040fe <memset>:
 80040fe:	4402      	add	r2, r0
 8004100:	4603      	mov	r3, r0
 8004102:	4293      	cmp	r3, r2
 8004104:	d100      	bne.n	8004108 <memset+0xa>
 8004106:	4770      	bx	lr
 8004108:	f803 1b01 	strb.w	r1, [r3], #1
 800410c:	e7f9      	b.n	8004102 <memset+0x4>
	...

08004110 <_init>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr

0800411c <_fini>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr
