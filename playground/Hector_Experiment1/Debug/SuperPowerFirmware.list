
SuperPowerFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a2c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08005bc4  08005bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d74  08005d74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d7c  08005d7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08005d90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08005d90  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7bf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f98  00000000  00000000  0002c7fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae0  00000000  00000000  0002e798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f0  00000000  00000000  0002f278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b6f  00000000  00000000  0002fc68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b40f  00000000  00000000  000467d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c460  00000000  00000000  00051be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd4  00000000  00000000  000de0c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005bac 	.word	0x08005bac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005bac 	.word	0x08005bac

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
 80004f2:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <MX_GPIO_Init+0xd0>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a2c      	ldr	r2, [pc, #176]	; (80005a8 <MX_GPIO_Init+0xd0>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a25      	ldr	r2, [pc, #148]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <MX_GPIO_Init+0xd0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_GPIO_Init+0xd0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <MX_GPIO_Init+0xd0>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2120      	movs	r1, #32
 8000562:	4812      	ldr	r0, [pc, #72]	; (80005ac <MX_GPIO_Init+0xd4>)
 8000564:	f001 f916 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <MX_GPIO_Init+0xd8>)
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <MX_GPIO_Init+0xdc>)
 800057e:	f000 fe61 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000582:	2320      	movs	r3, #32
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2300      	movs	r3, #0
 8000590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <MX_GPIO_Init+0xd4>)
 800059a:	f000 fe53 	bl	8001244 <HAL_GPIO_Init>

}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40020000 	.word	0x40020000
 80005b0:	10210000 	.word	0x10210000
 80005b4:	40020800 	.word	0x40020800

080005b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_I2C1_Init+0x54>)
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <MX_I2C1_Init+0x58>)
 80005c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_I2C1_Init+0x54>)
 80005c4:	4a13      	ldr	r2, [pc, #76]	; (8000614 <MX_I2C1_Init+0x5c>)
 80005c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_I2C1_Init+0x54>)
 80005ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ce:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 40;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_I2C1_Init+0x54>)
 80005d2:	2228      	movs	r2, #40	; 0x28
 80005d4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_I2C1_Init+0x54>)
 80005d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_I2C1_Init+0x54>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 42;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_I2C1_Init+0x54>)
 80005e6:	222a      	movs	r2, #42	; 0x2a
 80005e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_I2C1_Init+0x54>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_I2C1_Init+0x54>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_I2C1_Init+0x54>)
 80005f8:	f001 f8fe 	bl	80017f8 <HAL_I2C_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000602:	f000 fa9f 	bl	8000b44 <Error_Handler>
  }

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000038 	.word	0x20000038
 8000610:	40005400 	.word	0x40005400
 8000614:	00061a80 	.word	0x00061a80

08000618 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <HAL_I2C_MspInit+0xa4>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d13b      	bne.n	80006b2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <HAL_I2C_MspInit+0xa8>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <HAL_I2C_MspInit+0xa8>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <HAL_I2C_MspInit+0xa8>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000656:	23c0      	movs	r3, #192	; 0xc0
 8000658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800065a:	2312      	movs	r3, #18
 800065c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065e:	2301      	movs	r3, #1
 8000660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000662:	2303      	movs	r3, #3
 8000664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000666:	2304      	movs	r3, #4
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4814      	ldr	r0, [pc, #80]	; (80006c4 <HAL_I2C_MspInit+0xac>)
 8000672:	f000 fde7 	bl	8001244 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <HAL_I2C_MspInit+0xa8>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <HAL_I2C_MspInit+0xa8>)
 8000680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <HAL_I2C_MspInit+0xa8>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	201f      	movs	r0, #31
 8000698:	f000 fd54 	bl	8001144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800069c:	201f      	movs	r0, #31
 800069e:	f000 fd7d 	bl	800119c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2020      	movs	r0, #32
 80006a8:	f000 fd4c 	bl	8001144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80006ac:	2020      	movs	r0, #32
 80006ae:	f000 fd75 	bl	800119c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	; 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40005400 	.word	0x40005400
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020400 	.word	0x40020400

080006c8 <jumpToBootloader>:
//uint8_t cmdSize = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void jumpToBootloader(){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
	void (*sysMemBootJump)(void);
	volatile uint32_t addr = 0x1FFF0000;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <jumpToBootloader+0x5c>)
 80006d0:	607b      	str	r3, [r7, #4]
	HAL_RCC_DeInit();
 80006d2:	f004 f817 	bl	8004704 <HAL_RCC_DeInit>
	SysTick->CTRL = 0;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <jumpToBootloader+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <jumpToBootloader+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <jumpToBootloader+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
	__disable_irq();
	__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <jumpToBootloader+0x64>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <jumpToBootloader+0x64>)
 80006f0:	f023 0303 	bic.w	r3, r3, #3
 80006f4:	6013      	str	r3, [r2, #0]
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <jumpToBootloader+0x64>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a0c      	ldr	r2, [pc, #48]	; (800072c <jumpToBootloader+0x64>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6013      	str	r3, [r2, #0]
	sysMemBootJump = (void(*)(void))(*((uint32_t *)(addr + 4)));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3304      	adds	r3, #4
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	60fb      	str	r3, [r7, #12]
	__set_MSP(*(uint32_t *)addr);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	f383 8808 	msr	MSP, r3
	sysMemBootJump();
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4798      	blx	r3
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	1fff0000 	.word	0x1fff0000
 8000728:	e000e010 	.word	0xe000e010
 800072c:	40013800 	.word	0x40013800

08000730 <getRegister>:
	uint8_t data[33];
}i2c_cmd;

i2c_cmd test;

char* getRegister(uint8_t reg){
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	ds3231 rt;
	rt.seconds.seconds = 0;
 800073a:	7cbb      	ldrb	r3, [r7, #18]
 800073c:	f36f 0303 	bfc	r3, #0, #4
 8000740:	74bb      	strb	r3, [r7, #18]
	char* ptr = NULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BCD);
 8000746:	2201      	movs	r2, #1
 8000748:	4918      	ldr	r1, [pc, #96]	; (80007ac <getRegister+0x7c>)
 800074a:	4819      	ldr	r0, [pc, #100]	; (80007b0 <getRegister+0x80>)
 800074c:	f004 fafa 	bl	8004d44 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BCD);
 8000750:	2201      	movs	r2, #1
 8000752:	4918      	ldr	r1, [pc, #96]	; (80007b4 <getRegister+0x84>)
 8000754:	4816      	ldr	r0, [pc, #88]	; (80007b0 <getRegister+0x80>)
 8000756:	f004 fc91 	bl	800507c <HAL_RTC_GetDate>
	timebuffer[0] = time.Seconds;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <getRegister+0x7c>)
 800075c:	789a      	ldrb	r2, [r3, #2]
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <getRegister+0x88>)
 8000760:	701a      	strb	r2, [r3, #0]
	timebuffer[1] = time.Minutes;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <getRegister+0x7c>)
 8000764:	785a      	ldrb	r2, [r3, #1]
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <getRegister+0x88>)
 8000768:	705a      	strb	r2, [r3, #1]
	timebuffer[2] = time.Hours;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <getRegister+0x7c>)
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <getRegister+0x88>)
 8000770:	709a      	strb	r2, [r3, #2]
	timebuffer[3] = date.WeekDay;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <getRegister+0x84>)
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <getRegister+0x88>)
 8000778:	70da      	strb	r2, [r3, #3]
	timebuffer[4] = date.Date;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <getRegister+0x84>)
 800077c:	789a      	ldrb	r2, [r3, #2]
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <getRegister+0x88>)
 8000780:	711a      	strb	r2, [r3, #4]
	timebuffer[5] = date.Month;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <getRegister+0x84>)
 8000784:	785a      	ldrb	r2, [r3, #1]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <getRegister+0x88>)
 8000788:	715a      	strb	r2, [r3, #5]
	timebuffer[6] = date.Year;
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <getRegister+0x84>)
 800078c:	78da      	ldrb	r2, [r3, #3]
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <getRegister+0x88>)
 8000790:	719a      	strb	r2, [r3, #6]
	if(reg <= 6){
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b06      	cmp	r3, #6
 8000796:	d803      	bhi.n	80007a0 <getRegister+0x70>
		ptr = &timebuffer[(uint8_t)reg];
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <getRegister+0x88>)
 800079c:	4413      	add	r3, r2
 800079e:	61fb      	str	r3, [r7, #28]
	}
	return ptr;
 80007a0:	69fb      	ldr	r3, [r7, #28]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3720      	adds	r7, #32
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000d8 	.word	0x200000d8
 80007b0:	200000f0 	.word	0x200000f0
 80007b4:	200000ec 	.word	0x200000ec
 80007b8:	20000028 	.word	0x20000028

080007bc <RTC_msg_decode>:

void RTC_msg_decode(i2c_cmd msg){
 80007bc:	b084      	sub	sp, #16
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	f107 0c10 	add.w	ip, r7, #16
 80007c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t aux = msg.cmd_size;
 80007cc:	7cbb      	ldrb	r3, [r7, #18]
 80007ce:	71fb      	strb	r3, [r7, #7]
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BCD);
 80007d0:	2201      	movs	r2, #1
 80007d2:	493a      	ldr	r1, [pc, #232]	; (80008bc <RTC_msg_decode+0x100>)
 80007d4:	483a      	ldr	r0, [pc, #232]	; (80008c0 <RTC_msg_decode+0x104>)
 80007d6:	f004 fab5 	bl	8004d44 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BCD);
 80007da:	2201      	movs	r2, #1
 80007dc:	4939      	ldr	r1, [pc, #228]	; (80008c4 <RTC_msg_decode+0x108>)
 80007de:	4838      	ldr	r0, [pc, #224]	; (80008c0 <RTC_msg_decode+0x104>)
 80007e0:	f004 fc4c 	bl	800507c <HAL_RTC_GetDate>
	switch(msg.data[0]){
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	2b06      	cmp	r3, #6
 80007e8:	d848      	bhi.n	800087c <RTC_msg_decode+0xc0>
 80007ea:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <RTC_msg_decode+0x34>)
 80007ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f0:	0800080d 	.word	0x0800080d
 80007f4:	0800081d 	.word	0x0800081d
 80007f8:	0800082d 	.word	0x0800082d
 80007fc:	0800083d 	.word	0x0800083d
 8000800:	0800084d 	.word	0x0800084d
 8000804:	0800085d 	.word	0x0800085d
 8000808:	0800086d 	.word	0x0800086d
	case 0:
		if(aux-- > 0){
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	1e5a      	subs	r2, r3, #1
 8000810:	71fa      	strb	r2, [r7, #7]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d034      	beq.n	8000880 <RTC_msg_decode+0xc4>
			time.Seconds = msg.data[0];
 8000816:	7cfa      	ldrb	r2, [r7, #19]
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <RTC_msg_decode+0x100>)
 800081a:	709a      	strb	r2, [r3, #2]
			__attribute__ ((fallthrough));
		}else{
			break;
		}
	case 1:
		if(aux-- > 0){
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	1e5a      	subs	r2, r3, #1
 8000820:	71fa      	strb	r2, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d02e      	beq.n	8000884 <RTC_msg_decode+0xc8>
			time.Minutes = msg.data[1];
 8000826:	7d3a      	ldrb	r2, [r7, #20]
 8000828:	4b24      	ldr	r3, [pc, #144]	; (80008bc <RTC_msg_decode+0x100>)
 800082a:	705a      	strb	r2, [r3, #1]
			__attribute__ ((fallthrough));
		}else{
			break;
		}
	case 2:
		if(aux-- > 0){
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	1e5a      	subs	r2, r3, #1
 8000830:	71fa      	strb	r2, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d028      	beq.n	8000888 <RTC_msg_decode+0xcc>
			time.Hours = msg.data[2];
 8000836:	7d7a      	ldrb	r2, [r7, #21]
 8000838:	4b20      	ldr	r3, [pc, #128]	; (80008bc <RTC_msg_decode+0x100>)
 800083a:	701a      	strb	r2, [r3, #0]
			__attribute__ ((fallthrough));
		}else{
			break;
		}
	case 3:
		if(aux-- > 0){
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	1e5a      	subs	r2, r3, #1
 8000840:	71fa      	strb	r2, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d022      	beq.n	800088c <RTC_msg_decode+0xd0>
			date.WeekDay = msg.data[3];
 8000846:	7dba      	ldrb	r2, [r7, #22]
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <RTC_msg_decode+0x108>)
 800084a:	701a      	strb	r2, [r3, #0]
			__attribute__ ((fallthrough));
		}else{
			break;
		}
	case 4:
		if(aux-- > 0){
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	1e5a      	subs	r2, r3, #1
 8000850:	71fa      	strb	r2, [r7, #7]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d01c      	beq.n	8000890 <RTC_msg_decode+0xd4>
			date.Date = msg.data[4];
 8000856:	7dfa      	ldrb	r2, [r7, #23]
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <RTC_msg_decode+0x108>)
 800085a:	709a      	strb	r2, [r3, #2]
			__attribute__ ((fallthrough));
		}else{
			break;
		}
	case 5:
		if(aux-- > 0){
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	71fa      	strb	r2, [r7, #7]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d016      	beq.n	8000894 <RTC_msg_decode+0xd8>
			date.Month = msg.data[5];
 8000866:	7e3a      	ldrb	r2, [r7, #24]
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <RTC_msg_decode+0x108>)
 800086a:	705a      	strb	r2, [r3, #1]
			__attribute__ ((fallthrough));
		}else{
			break;
		}
	case 6:
		if(aux-- > 0){
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	71fa      	strb	r2, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d010      	beq.n	8000898 <RTC_msg_decode+0xdc>
			date.Year = msg.data[6];
 8000876:	7e7a      	ldrb	r2, [r7, #25]
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <RTC_msg_decode+0x108>)
 800087a:	70da      	strb	r2, [r3, #3]
			__attribute__ ((fallthrough));
		}else{
			break;
		}
	default:
		break;
 800087c:	bf00      	nop
 800087e:	e00c      	b.n	800089a <RTC_msg_decode+0xde>
			break;
 8000880:	bf00      	nop
 8000882:	e00a      	b.n	800089a <RTC_msg_decode+0xde>
			break;
 8000884:	bf00      	nop
 8000886:	e008      	b.n	800089a <RTC_msg_decode+0xde>
			break;
 8000888:	bf00      	nop
 800088a:	e006      	b.n	800089a <RTC_msg_decode+0xde>
			break;
 800088c:	bf00      	nop
 800088e:	e004      	b.n	800089a <RTC_msg_decode+0xde>
			break;
 8000890:	bf00      	nop
 8000892:	e002      	b.n	800089a <RTC_msg_decode+0xde>
			break;
 8000894:	bf00      	nop
 8000896:	e000      	b.n	800089a <RTC_msg_decode+0xde>
			break;
 8000898:	bf00      	nop
	}
	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD);
 800089a:	2201      	movs	r2, #1
 800089c:	4907      	ldr	r1, [pc, #28]	; (80008bc <RTC_msg_decode+0x100>)
 800089e:	4808      	ldr	r0, [pc, #32]	; (80008c0 <RTC_msg_decode+0x104>)
 80008a0:	f004 f8e4 	bl	8004a6c <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BCD);
 80008a4:	2201      	movs	r2, #1
 80008a6:	4907      	ldr	r1, [pc, #28]	; (80008c4 <RTC_msg_decode+0x108>)
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <RTC_msg_decode+0x104>)
 80008aa:	f004 fab7 	bl	8004e1c <HAL_RTC_SetDate>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr
 80008bc:	200000d8 	.word	0x200000d8
 80008c0:	200000f0 	.word	0x200000f0
 80008c4:	200000ec 	.word	0x200000ec

080008c8 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
 80008d4:	4613      	mov	r3, r2
 80008d6:	803b      	strh	r3, [r7, #0]
	UNUSED(hi2c);
	switch(TransferDirection){
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d010      	beq.n	8000900 <HAL_I2C_AddrCallback+0x38>
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d000      	beq.n	80008e4 <HAL_I2C_AddrCallback+0x1c>
		default:
			break;
		}
		break;
		default:
			break;
 80008e2:	e02c      	b.n	800093e <HAL_I2C_AddrCallback+0x76>
		addr = AddrMatchCode;
 80008e4:	4a18      	ldr	r2, [pc, #96]	; (8000948 <HAL_I2C_AddrCallback+0x80>)
 80008e6:	883b      	ldrh	r3, [r7, #0]
 80008e8:	8013      	strh	r3, [r2, #0]
		test.addres = addr;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <HAL_I2C_AddrCallback+0x80>)
 80008ec:	881a      	ldrh	r2, [r3, #0]
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <HAL_I2C_AddrCallback+0x84>)
 80008f0:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, slaveReceiveBuffer, 32, I2C_FIRST_FRAME);
 80008f2:	2301      	movs	r3, #1
 80008f4:	2220      	movs	r2, #32
 80008f6:	4916      	ldr	r1, [pc, #88]	; (8000950 <HAL_I2C_AddrCallback+0x88>)
 80008f8:	4816      	ldr	r0, [pc, #88]	; (8000954 <HAL_I2C_AddrCallback+0x8c>)
 80008fa:	f001 f9cf 	bl	8001c9c <HAL_I2C_Slave_Seq_Receive_IT>
		break;
 80008fe:	e01e      	b.n	800093e <HAL_I2C_AddrCallback+0x76>
		switch(AddrMatchCode >> 1){
 8000900:	883b      	ldrh	r3, [r7, #0]
 8000902:	085b      	lsrs	r3, r3, #1
 8000904:	b29b      	uxth	r3, r3
 8000906:	2b14      	cmp	r3, #20
 8000908:	d002      	beq.n	8000910 <HAL_I2C_AddrCallback+0x48>
 800090a:	2b21      	cmp	r3, #33	; 0x21
 800090c:	d015      	beq.n	800093a <HAL_I2C_AddrCallback+0x72>
			break;
 800090e:	e015      	b.n	800093c <HAL_I2C_AddrCallback+0x74>
			slaveTransmitBuffer = (uint8_t*)getRegister(slaveReceiveBuffer[0]);
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_I2C_AddrCallback+0x88>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff0b 	bl	8000730 <getRegister>
 800091a:	4602      	mov	r2, r0
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_I2C_AddrCallback+0x90>)
 800091e:	601a      	str	r2, [r3, #0]
			sizeOfData = 6;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_I2C_AddrCallback+0x94>)
 8000922:	2206      	movs	r2, #6
 8000924:	801a      	strh	r2, [r3, #0]
			HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, slaveTransmitBuffer, sizeOfData, I2C_LAST_FRAME);
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_I2C_AddrCallback+0x90>)
 8000928:	6819      	ldr	r1, [r3, #0]
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_I2C_AddrCallback+0x94>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b29a      	uxth	r2, r3
 8000930:	2320      	movs	r3, #32
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <HAL_I2C_AddrCallback+0x8c>)
 8000934:	f001 f920 	bl	8001b78 <HAL_I2C_Slave_Seq_Transmit_IT>
			break;
 8000938:	e000      	b.n	800093c <HAL_I2C_AddrCallback+0x74>
			break;
 800093a:	bf00      	nop
		break;
 800093c:	bf00      	nop
	}
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000034 	.word	0x20000034
 800094c:	20000094 	.word	0x20000094
 8000950:	200000b8 	.word	0x200000b8
 8000954:	20000038 	.word	0x20000038
 8000958:	2000008c 	.word	0x2000008c
 800095c:	20000090 	.word	0x20000090

08000960 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 8000960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000964:	b088      	sub	sp, #32
 8000966:	af06      	add	r7, sp, #24
 8000968:	6078      	str	r0, [r7, #4]
	if(hi2c->XferCount == 32){
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800096e:	b29b      	uxth	r3, r3
 8000970:	2b20      	cmp	r3, #32
 8000972:	d103      	bne.n	800097c <HAL_I2C_ListenCpltCallback+0x1c>
		test.cmd_size = 0;
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <HAL_I2C_ListenCpltCallback+0xa0>)
 8000976:	2200      	movs	r2, #0
 8000978:	709a      	strb	r2, [r3, #2]
 800097a:	e00f      	b.n	800099c <HAL_I2C_ListenCpltCallback+0x3c>
	}else{
		test.cmd_size = (uint8_t)(32 - hi2c->XferCount - 1);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000980:	b29b      	uxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	f1c3 031f 	rsb	r3, r3, #31
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <HAL_I2C_ListenCpltCallback+0xa0>)
 800098c:	709a      	strb	r2, [r3, #2]
		memcpy(test.data, slaveReceiveBuffer+1, test.cmd_size);
 800098e:	491d      	ldr	r1, [pc, #116]	; (8000a04 <HAL_I2C_ListenCpltCallback+0xa4>)
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <HAL_I2C_ListenCpltCallback+0xa0>)
 8000992:	789b      	ldrb	r3, [r3, #2]
 8000994:	461a      	mov	r2, r3
 8000996:	481c      	ldr	r0, [pc, #112]	; (8000a08 <HAL_I2C_ListenCpltCallback+0xa8>)
 8000998:	f005 f8f4 	bl	8005b84 <memcpy>
	}
	memset(slaveReceiveBuffer, 0, 31);
 800099c:	221f      	movs	r2, #31
 800099e:	2100      	movs	r1, #0
 80009a0:	481a      	ldr	r0, [pc, #104]	; (8000a0c <HAL_I2C_ListenCpltCallback+0xac>)
 80009a2:	f005 f8fa 	bl	8005b9a <memset>
	if(test.cmd_size > 0){
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <HAL_I2C_ListenCpltCallback+0xa0>)
 80009a8:	789b      	ldrb	r3, [r3, #2]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d01f      	beq.n	80009ee <HAL_I2C_ListenCpltCallback+0x8e>
		RTC_msg_decode(test);
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_I2C_ListenCpltCallback+0xa0>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	f04f 0800 	mov.w	r8, #0
 80009b6:	4690      	mov	r8, r2
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	f04f 0e00 	mov.w	lr, #0
 80009be:	4696      	mov	lr, r2
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	f04f 0c00 	mov.w	ip, #0
 80009c6:	4694      	mov	ip, r2
 80009c8:	68da      	ldr	r2, [r3, #12]
 80009ca:	2600      	movs	r6, #0
 80009cc:	4616      	mov	r6, r2
 80009ce:	466c      	mov	r4, sp
 80009d0:	f103 0510 	add.w	r5, r3, #16
 80009d4:	6828      	ldr	r0, [r5, #0]
 80009d6:	6869      	ldr	r1, [r5, #4]
 80009d8:	68aa      	ldr	r2, [r5, #8]
 80009da:	68eb      	ldr	r3, [r5, #12]
 80009dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009de:	6928      	ldr	r0, [r5, #16]
 80009e0:	6020      	str	r0, [r4, #0]
 80009e2:	4640      	mov	r0, r8
 80009e4:	4671      	mov	r1, lr
 80009e6:	4662      	mov	r2, ip
 80009e8:	4633      	mov	r3, r6
 80009ea:	f7ff fee7 	bl	80007bc <RTC_msg_decode>
	}
	HAL_I2C_EnableListen_IT(&hi2c1); // Restart
 80009ee:	4808      	ldr	r0, [pc, #32]	; (8000a10 <HAL_I2C_ListenCpltCallback+0xb0>)
 80009f0:	f001 f9e6 	bl	8001dc0 <HAL_I2C_EnableListen_IT>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009fe:	bf00      	nop
 8000a00:	20000094 	.word	0x20000094
 8000a04:	200000b9 	.word	0x200000b9
 8000a08:	20000097 	.word	0x20000097
 8000a0c:	200000b8 	.word	0x200000b8
 8000a10:	20000038 	.word	0x20000038

08000a14 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
 int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	jumpToBootloader();
 8000a18:	f7ff fe56 	bl	80006c8 <jumpToBootloader>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a1c:	f000 fa30 	bl	8000e80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a20:	f000 f80e 	bl	8000a40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a24:	f7ff fd58 	bl	80004d8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a28:	f7ff fdc6 	bl	80005b8 <MX_I2C1_Init>
	MX_RTC_Init();
 8000a2c:	f000 f89c 	bl	8000b68 <MX_RTC_Init>
	MX_USART2_UART_Init();
 8000a30:	f000 f98a 	bl	8000d48 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_I2C_EnableListen_IT(&hi2c1);
 8000a34:	4801      	ldr	r0, [pc, #4]	; (8000a3c <main+0x28>)
 8000a36:	f001 f9c3 	bl	8001dc0 <HAL_I2C_EnableListen_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000a3a:	e7fe      	b.n	8000a3a <main+0x26>
 8000a3c:	20000038 	.word	0x20000038

08000a40 <SystemClock_Config>:
 /**
  * @brief System Clock Configuration
  * @retval None
  */
 void SystemClock_Config(void)
 {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b09a      	sub	sp, #104	; 0x68
 8000a44:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a4a:	2230      	movs	r2, #48	; 0x30
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f005 f8a3 	bl	8005b9a <memset>
	 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
	 RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]

	 /** Configure the main internal regulator output voltage
	  */
	 __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a2f      	ldr	r2, [pc, #188]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <SystemClock_Config+0xfc>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
	 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <SystemClock_Config+0x100>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a29      	ldr	r2, [pc, #164]	; (8000b40 <SystemClock_Config+0x100>)
 8000a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa0:	6013      	str	r3, [r2, #0]
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <SystemClock_Config+0x100>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
	 /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000aae:	2306      	movs	r3, #6
 8000ab0:	63bb      	str	r3, [r7, #56]	; 0x38
	 RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	643b      	str	r3, [r7, #64]	; 0x40
	 RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	647b      	str	r3, [r7, #68]	; 0x44
	 RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aba:	2310      	movs	r3, #16
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
	 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	653b      	str	r3, [r7, #80]	; 0x50
	 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	657b      	str	r3, [r7, #84]	; 0x54
	 RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	65bb      	str	r3, [r7, #88]	; 0x58
	 RCC_OscInitStruct.PLL.PLLN = 100;
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	65fb      	str	r3, [r7, #92]	; 0x5c
	 RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	663b      	str	r3, [r7, #96]	; 0x60
	 RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	667b      	str	r3, [r7, #100]	; 0x64
	 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fe44 	bl	8003768 <HAL_RCC_OscConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xaa>
	 {
		 Error_Handler();
 8000ae6:	f000 f82d 	bl	8000b44 <Error_Handler>
	 }
	 /** Initializes the CPU, AHB and APB buses clocks
	  */
	 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aea:	230f      	movs	r3, #15
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
			 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aee:	2302      	movs	r3, #2
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
	 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
	 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34

	 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	2103      	movs	r1, #3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 f94e 	bl	8003da8 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xd6>
	 {
		 Error_Handler();
 8000b12:	f000 f817 	bl	8000b44 <Error_Handler>
	 }
	 PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b16:	2302      	movs	r3, #2
 8000b18:	60fb      	str	r3, [r7, #12]
	 PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1e:	61fb      	str	r3, [r7, #28]
	 if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4618      	mov	r0, r3
 8000b26:	f003 fbd9 	bl	80042dc <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0xf4>
	 {
		 Error_Handler();
 8000b30:	f000 f808 	bl	8000b44 <Error_Handler>
	 }
 }
 8000b34:	bf00      	nop
 8000b36:	3768      	adds	r7, #104	; 0x68
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <Error_Handler>:
 /**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
 void Error_Handler(void)
 {
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	 /* USER CODE BEGIN Error_Handler_Debug */
	 /* User can add his own implementation to report the HAL error return state */

	 /* USER CODE END Error_Handler_Debug */
 }
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
 void assert_failed(uint8_t *file, uint32_t line)
 {
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
	 /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	 UNUSED(file);
	 UNUSED(line);
	 /* USER CODE END 6 */
 }
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <MX_RTC_Init+0xac>)
 8000b82:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <MX_RTC_Init+0xb0>)
 8000b84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b86:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <MX_RTC_Init+0xac>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MX_RTC_Init+0xac>)
 8000b8e:	227f      	movs	r2, #127	; 0x7f
 8000b90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <MX_RTC_Init+0xac>)
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <MX_RTC_Init+0xac>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_RTC_Init+0xac>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_RTC_Init+0xac>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000baa:	481a      	ldr	r0, [pc, #104]	; (8000c14 <MX_RTC_Init+0xac>)
 8000bac:	f003 fe78 	bl	80048a0 <HAL_RTC_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000bb6:	f7ff ffc5 	bl	8000b44 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480f      	ldr	r0, [pc, #60]	; (8000c14 <MX_RTC_Init+0xac>)
 8000bd6:	f003 ff49 	bl	8004a6c <HAL_RTC_SetTime>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000be0:	f7ff ffb0 	bl	8000b44 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000be4:	2301      	movs	r3, #1
 8000be6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000be8:	2301      	movs	r3, #1
 8000bea:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <MX_RTC_Init+0xac>)
 8000bfc:	f004 f90e 	bl	8004e1c <HAL_RTC_SetDate>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000c06:	f7ff ff9d 	bl	8000b44 <Error_Handler>
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000f0 	.word	0x200000f0
 8000c18:	40002800 	.word	0x40002800

08000c1c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <HAL_RTC_MspInit+0x24>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d102      	bne.n	8000c34 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_RTC_MspInit+0x28>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	40002800 	.word	0x40002800
 8000c44:	42470e3c 	.word	0x42470e3c

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f91a 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <I2C1_EV_IRQHandler+0x10>)
 8000cfa:	f001 f897 	bl	8001e2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000038 	.word	0x20000038

08000d08 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <I2C1_ER_IRQHandler+0x10>)
 8000d0e:	f001 f9fa 	bl	8002106 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000038 	.word	0x20000038

08000d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <SystemInit+0x28>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <SystemInit+0x28>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SystemInit+0x28>)
 8000d32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d36:	609a      	str	r2, [r3, #8]
#endif
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <MX_USART2_UART_Init+0x50>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d80:	f004 fa68 	bl	8005254 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d8a:	f7ff fedb 	bl	8000b44 <Error_Handler>
  }

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000110 	.word	0x20000110
 8000d98:	40004400 	.word	0x40004400

08000d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0x84>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d12b      	bne.n	8000e16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_UART_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000df6:	230c      	movs	r3, #12
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e06:	2307      	movs	r3, #7
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_UART_MspInit+0x8c>)
 8000e12:	f000 fa17 	bl	8001244 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40004400 	.word	0x40004400
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e32:	e003      	b.n	8000e3c <LoopCopyDataInit>

08000e34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e3a:	3104      	adds	r1, #4

08000e3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e3c:	480b      	ldr	r0, [pc, #44]	; (8000e6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e44:	d3f6      	bcc.n	8000e34 <CopyDataInit>
  ldr  r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e48:	e002      	b.n	8000e50 <LoopFillZerobss>

08000e4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e4c:	f842 3b04 	str.w	r3, [r2], #4

08000e50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e54:	d3f9      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e56:	f7ff ff61 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f004 fe6f 	bl	8005b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fdd9 	bl	8000a14 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e68:	08005d84 	.word	0x08005d84
  ldr  r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e70:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e74:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e78:	20000154 	.word	0x20000154

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f92b 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fec8 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f972 	bl	80011cc <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f00:	f000 f920 	bl	8001144 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000150 	.word	0x20000150

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000150 	.word	0x20000150

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b07      	cmp	r3, #7
 8001110:	d00f      	beq.n	8001132 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b06      	cmp	r3, #6
 8001116:	d00c      	beq.n	8001132 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b05      	cmp	r3, #5
 800111c:	d009      	beq.n	8001132 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b04      	cmp	r3, #4
 8001122:	d006      	beq.n	8001132 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d003      	beq.n	8001132 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800112a:	2192      	movs	r1, #146	; 0x92
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800112e:	f7ff fd10 	bl	8000b52 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff16 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	08005bc4 	.word	0x08005bc4

08001144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d903      	bls.n	8001164 <HAL_NVIC_SetPriority+0x20>
 800115c:	21aa      	movs	r1, #170	; 0xaa
 800115e:	480e      	ldr	r0, [pc, #56]	; (8001198 <HAL_NVIC_SetPriority+0x54>)
 8001160:	f7ff fcf7 	bl	8000b52 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	d903      	bls.n	8001172 <HAL_NVIC_SetPriority+0x2e>
 800116a:	21ab      	movs	r1, #171	; 0xab
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <HAL_NVIC_SetPriority+0x54>)
 800116e:	f7ff fcf0 	bl	8000b52 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001172:	f7ff ff1b 	bl	8000fac <__NVIC_GetPriorityGrouping>
 8001176:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f7ff ff6b 	bl	8001058 <NVIC_EncodePriority>
 8001182:	4602      	mov	r2, r0
 8001184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff3a 	bl	8001004 <__NVIC_SetPriority>
}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	08005bc4 	.word	0x08005bc4

0800119c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	da03      	bge.n	80011b6 <HAL_NVIC_EnableIRQ+0x1a>
 80011ae:	21be      	movs	r1, #190	; 0xbe
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <HAL_NVIC_EnableIRQ+0x2c>)
 80011b2:	f7ff fcce 	bl	8000b52 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff04 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	08005bc4 	.word	0x08005bc4

080011cc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff73 	bl	80010c0 <SysTick_Config>
 80011da:	4603      	mov	r3, r0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d004      	beq.n	8001202 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00c      	b.n	800121c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2205      	movs	r2, #5
 8001206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001236:	b2db      	uxtb	r3, r3
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a3b      	ldr	r2, [pc, #236]	; (800134c <HAL_GPIO_Init+0x108>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d017      	beq.n	8001292 <HAL_GPIO_Init+0x4e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a3a      	ldr	r2, [pc, #232]	; (8001350 <HAL_GPIO_Init+0x10c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0x4e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a39      	ldr	r2, [pc, #228]	; (8001354 <HAL_GPIO_Init+0x110>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00f      	beq.n	8001292 <HAL_GPIO_Init+0x4e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a38      	ldr	r2, [pc, #224]	; (8001358 <HAL_GPIO_Init+0x114>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00b      	beq.n	8001292 <HAL_GPIO_Init+0x4e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a37      	ldr	r2, [pc, #220]	; (800135c <HAL_GPIO_Init+0x118>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d007      	beq.n	8001292 <HAL_GPIO_Init+0x4e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a36      	ldr	r2, [pc, #216]	; (8001360 <HAL_GPIO_Init+0x11c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x4e>
 800128a:	21b3      	movs	r1, #179	; 0xb3
 800128c:	4835      	ldr	r0, [pc, #212]	; (8001364 <HAL_GPIO_Init+0x120>)
 800128e:	f7ff fc60 	bl	8000b52 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_GPIO_Init+0x64>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0c1b      	lsrs	r3, r3, #16
 80012a2:	041b      	lsls	r3, r3, #16
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x6c>
 80012a8:	21b4      	movs	r1, #180	; 0xb4
 80012aa:	482e      	ldr	r0, [pc, #184]	; (8001364 <HAL_GPIO_Init+0x120>)
 80012ac:	f7ff fc51 	bl	8000b52 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d035      	beq.n	8001324 <HAL_GPIO_Init+0xe0>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d031      	beq.n	8001324 <HAL_GPIO_Init+0xe0>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b11      	cmp	r3, #17
 80012c6:	d02d      	beq.n	8001324 <HAL_GPIO_Init+0xe0>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d029      	beq.n	8001324 <HAL_GPIO_Init+0xe0>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b12      	cmp	r3, #18
 80012d6:	d025      	beq.n	8001324 <HAL_GPIO_Init+0xe0>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	4a22      	ldr	r2, [pc, #136]	; (8001368 <HAL_GPIO_Init+0x124>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d020      	beq.n	8001324 <HAL_GPIO_Init+0xe0>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a21      	ldr	r2, [pc, #132]	; (800136c <HAL_GPIO_Init+0x128>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d01b      	beq.n	8001324 <HAL_GPIO_Init+0xe0>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <HAL_GPIO_Init+0x12c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d016      	beq.n	8001324 <HAL_GPIO_Init+0xe0>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <HAL_GPIO_Init+0x130>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d011      	beq.n	8001324 <HAL_GPIO_Init+0xe0>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <HAL_GPIO_Init+0x134>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00c      	beq.n	8001324 <HAL_GPIO_Init+0xe0>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a1b      	ldr	r2, [pc, #108]	; (800137c <HAL_GPIO_Init+0x138>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d007      	beq.n	8001324 <HAL_GPIO_Init+0xe0>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b03      	cmp	r3, #3
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0xe0>
 800131c:	21b5      	movs	r1, #181	; 0xb5
 800131e:	4811      	ldr	r0, [pc, #68]	; (8001364 <HAL_GPIO_Init+0x120>)
 8001320:	f7ff fc17 	bl	8000b52 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00b      	beq.n	8001344 <HAL_GPIO_Init+0x100>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d007      	beq.n	8001344 <HAL_GPIO_Init+0x100>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x100>
 800133c:	21b6      	movs	r1, #182	; 0xb6
 800133e:	4809      	ldr	r0, [pc, #36]	; (8001364 <HAL_GPIO_Init+0x120>)
 8001340:	f7ff fc07 	bl	8000b52 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	e211      	b.n	800176e <HAL_GPIO_Init+0x52a>
 800134a:	bf00      	nop
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40021c00 	.word	0x40021c00
 8001364:	08005c00 	.word	0x08005c00
 8001368:	10110000 	.word	0x10110000
 800136c:	10210000 	.word	0x10210000
 8001370:	10310000 	.word	0x10310000
 8001374:	10120000 	.word	0x10120000
 8001378:	10220000 	.word	0x10220000
 800137c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 81e5 	bne.w	8001768 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d00b      	beq.n	80013be <HAL_GPIO_Init+0x17a>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b2:	2b11      	cmp	r3, #17
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d144      	bne.n	8001448 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00f      	beq.n	80013e6 <HAL_GPIO_Init+0x1a2>
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d00b      	beq.n	80013e6 <HAL_GPIO_Init+0x1a2>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x1a2>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x1a2>
 80013de:	21c8      	movs	r1, #200	; 0xc8
 80013e0:	489f      	ldr	r0, [pc, #636]	; (8001660 <HAL_GPIO_Init+0x41c>)
 80013e2:	f7ff fbb6 	bl	8000b52 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 0201 	and.w	r2, r3, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d004      	beq.n	800148a <HAL_GPIO_Init+0x246>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b12      	cmp	r3, #18
 8001486:	f040 80a0 	bne.w	80015ca <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d077      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b09      	cmp	r3, #9
 8001498:	d073      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d06f      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d06b      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d067      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d063      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d05f      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d05b      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d057      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d053      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d04f      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d04b      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d047      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d043      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d03f      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b05      	cmp	r3, #5
 8001508:	d03b      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b05      	cmp	r3, #5
 8001510:	d037      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b06      	cmp	r3, #6
 8001518:	d033      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b06      	cmp	r3, #6
 8001520:	d02f      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d02b      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b06      	cmp	r3, #6
 8001530:	d027      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b07      	cmp	r3, #7
 8001538:	d023      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b07      	cmp	r3, #7
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b07      	cmp	r3, #7
 8001548:	d01b      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b08      	cmp	r3, #8
 8001550:	d017      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b0a      	cmp	r3, #10
 8001558:	d013      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	2b09      	cmp	r3, #9
 8001560:	d00f      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b09      	cmp	r3, #9
 8001568:	d00b      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b0c      	cmp	r3, #12
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b0f      	cmp	r3, #15
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x33e>
 800157a:	21e0      	movs	r1, #224	; 0xe0
 800157c:	4838      	ldr	r0, [pc, #224]	; (8001660 <HAL_GPIO_Init+0x41c>)
 800157e:	f7ff fae8 	bl	8000b52 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	691a      	ldr	r2, [r3, #16]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	69b9      	ldr	r1, [r7, #24]
 80015c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0203 	and.w	r2, r3, #3
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80ae 	beq.w	8001768 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_GPIO_Init+0x420>)
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	4a13      	ldr	r2, [pc, #76]	; (8001664 <HAL_GPIO_Init+0x420>)
 8001616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161a:	6453      	str	r3, [r2, #68]	; 0x44
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_GPIO_Init+0x420>)
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001628:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <HAL_GPIO_Init+0x424>)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3302      	adds	r3, #2
 8001630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_GPIO_Init+0x428>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d025      	beq.n	80016a0 <HAL_GPIO_Init+0x45c>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a06      	ldr	r2, [pc, #24]	; (8001670 <HAL_GPIO_Init+0x42c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d01f      	beq.n	800169c <HAL_GPIO_Init+0x458>
 800165c:	e00a      	b.n	8001674 <HAL_GPIO_Init+0x430>
 800165e:	bf00      	nop
 8001660:	08005c00 	.word	0x08005c00
 8001664:	40023800 	.word	0x40023800
 8001668:	40013800 	.word	0x40013800
 800166c:	40020000 	.word	0x40020000
 8001670:	40020400 	.word	0x40020400
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a42      	ldr	r2, [pc, #264]	; (8001780 <HAL_GPIO_Init+0x53c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d00d      	beq.n	8001698 <HAL_GPIO_Init+0x454>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a41      	ldr	r2, [pc, #260]	; (8001784 <HAL_GPIO_Init+0x540>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d007      	beq.n	8001694 <HAL_GPIO_Init+0x450>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a40      	ldr	r2, [pc, #256]	; (8001788 <HAL_GPIO_Init+0x544>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d101      	bne.n	8001690 <HAL_GPIO_Init+0x44c>
 800168c:	2304      	movs	r3, #4
 800168e:	e008      	b.n	80016a2 <HAL_GPIO_Init+0x45e>
 8001690:	2307      	movs	r3, #7
 8001692:	e006      	b.n	80016a2 <HAL_GPIO_Init+0x45e>
 8001694:	2303      	movs	r3, #3
 8001696:	e004      	b.n	80016a2 <HAL_GPIO_Init+0x45e>
 8001698:	2302      	movs	r3, #2
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0x45e>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_GPIO_Init+0x45e>
 80016a0:	2300      	movs	r3, #0
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	f002 0203 	and.w	r2, r2, #3
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	4093      	lsls	r3, r2
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016b2:	4936      	ldr	r1, [pc, #216]	; (800178c <HAL_GPIO_Init+0x548>)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <HAL_GPIO_Init+0x54c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e4:	4a2a      	ldr	r2, [pc, #168]	; (8001790 <HAL_GPIO_Init+0x54c>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016ea:	4b29      	ldr	r3, [pc, #164]	; (8001790 <HAL_GPIO_Init+0x54c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800170e:	4a20      	ldr	r2, [pc, #128]	; (8001790 <HAL_GPIO_Init+0x54c>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_GPIO_Init+0x54c>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001738:	4a15      	ldr	r2, [pc, #84]	; (8001790 <HAL_GPIO_Init+0x54c>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800173e:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_GPIO_Init+0x54c>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <HAL_GPIO_Init+0x54c>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3301      	adds	r3, #1
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	f67f ae05 	bls.w	8001380 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40020800 	.word	0x40020800
 8001784:	40020c00 	.word	0x40020c00
 8001788:	40021000 	.word	0x40021000
 800178c:	40013800 	.word	0x40013800
 8001790:	40013c00 	.word	0x40013c00

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <HAL_GPIO_WritePin+0x20>
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	0c1b      	lsrs	r3, r3, #16
 80017ae:	041b      	lsls	r3, r3, #16
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_GPIO_WritePin+0x2a>
 80017b4:	f240 119f 	movw	r1, #415	; 0x19f
 80017b8:	480e      	ldr	r0, [pc, #56]	; (80017f4 <HAL_GPIO_WritePin+0x60>)
 80017ba:	f7ff f9ca 	bl	8000b52 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80017be:	787b      	ldrb	r3, [r7, #1]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_WritePin+0x40>
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d004      	beq.n	80017d4 <HAL_GPIO_WritePin+0x40>
 80017ca:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80017ce:	4809      	ldr	r0, [pc, #36]	; (80017f4 <HAL_GPIO_WritePin+0x60>)
 80017d0:	f7ff f9bf 	bl	8000b52 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e0:	e003      	b.n	80017ea <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	041a      	lsls	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	619a      	str	r2, [r3, #24]
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08005c00 	.word	0x08005c00

080017f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e1b1      	b.n	8001b6e <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4aa2      	ldr	r2, [pc, #648]	; (8001a98 <HAL_I2C_Init+0x2a0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00e      	beq.n	8001832 <HAL_I2C_Init+0x3a>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4aa0      	ldr	r2, [pc, #640]	; (8001a9c <HAL_I2C_Init+0x2a4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d009      	beq.n	8001832 <HAL_I2C_Init+0x3a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a9f      	ldr	r2, [pc, #636]	; (8001aa0 <HAL_I2C_Init+0x2a8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d004      	beq.n	8001832 <HAL_I2C_Init+0x3a>
 8001828:	f240 11bf 	movw	r1, #447	; 0x1bf
 800182c:	489d      	ldr	r0, [pc, #628]	; (8001aa4 <HAL_I2C_Init+0x2ac>)
 800182e:	f7ff f990 	bl	8000b52 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <HAL_I2C_Init+0x4c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4a9a      	ldr	r2, [pc, #616]	; (8001aa8 <HAL_I2C_Init+0x2b0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d904      	bls.n	800184e <HAL_I2C_Init+0x56>
 8001844:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001848:	4896      	ldr	r0, [pc, #600]	; (8001aa4 <HAL_I2C_Init+0x2ac>)
 800184a:	f7ff f982 	bl	8000b52 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_I2C_Init+0x72>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800185e:	d004      	beq.n	800186a <HAL_I2C_Init+0x72>
 8001860:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001864:	488f      	ldr	r0, [pc, #572]	; (8001aa4 <HAL_I2C_Init+0x2ac>)
 8001866:	f7ff f974 	bl	8000b52 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001872:	f023 0303 	bic.w	r3, r3, #3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <HAL_I2C_Init+0x8c>
 800187a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800187e:	4889      	ldr	r0, [pc, #548]	; (8001aa4 <HAL_I2C_Init+0x2ac>)
 8001880:	f7ff f967 	bl	8000b52 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800188c:	d009      	beq.n	80018a2 <HAL_I2C_Init+0xaa>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001896:	d004      	beq.n	80018a2 <HAL_I2C_Init+0xaa>
 8001898:	f240 11c3 	movw	r1, #451	; 0x1c3
 800189c:	4881      	ldr	r0, [pc, #516]	; (8001aa4 <HAL_I2C_Init+0x2ac>)
 800189e:	f7ff f958 	bl	8000b52 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <HAL_I2C_Init+0xc4>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d004      	beq.n	80018bc <HAL_I2C_Init+0xc4>
 80018b2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80018b6:	487b      	ldr	r0, [pc, #492]	; (8001aa4 <HAL_I2C_Init+0x2ac>)
 80018b8:	f7ff f94b 	bl	8000b52 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <HAL_I2C_Init+0xda>
 80018c8:	f240 11c5 	movw	r1, #453	; 0x1c5
 80018cc:	4875      	ldr	r0, [pc, #468]	; (8001aa4 <HAL_I2C_Init+0x2ac>)
 80018ce:	f7ff f940 	bl	8000b52 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d008      	beq.n	80018ec <HAL_I2C_Init+0xf4>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	2b40      	cmp	r3, #64	; 0x40
 80018e0:	d004      	beq.n	80018ec <HAL_I2C_Init+0xf4>
 80018e2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80018e6:	486f      	ldr	r0, [pc, #444]	; (8001aa4 <HAL_I2C_Init+0x2ac>)
 80018e8:	f7ff f933 	bl	8000b52 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <HAL_I2C_Init+0x10e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	2b80      	cmp	r3, #128	; 0x80
 80018fa:	d004      	beq.n	8001906 <HAL_I2C_Init+0x10e>
 80018fc:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001900:	4868      	ldr	r0, [pc, #416]	; (8001aa4 <HAL_I2C_Init+0x2ac>)
 8001902:	f7ff f926 	bl	8000b52 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7fe fe7c 	bl	8000618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2224      	movs	r2, #36	; 0x24
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0201 	bic.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001946:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001956:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001958:	f002 fc98 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 800195c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4a52      	ldr	r2, [pc, #328]	; (8001aac <HAL_I2C_Init+0x2b4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d807      	bhi.n	8001978 <HAL_I2C_Init+0x180>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4a51      	ldr	r2, [pc, #324]	; (8001ab0 <HAL_I2C_Init+0x2b8>)
 800196c:	4293      	cmp	r3, r2
 800196e:	bf94      	ite	ls
 8001970:	2301      	movls	r3, #1
 8001972:	2300      	movhi	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	e006      	b.n	8001986 <HAL_I2C_Init+0x18e>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4a4e      	ldr	r2, [pc, #312]	; (8001ab4 <HAL_I2C_Init+0x2bc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	bf94      	ite	ls
 8001980:	2301      	movls	r3, #1
 8001982:	2300      	movhi	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0ef      	b.n	8001b6e <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <HAL_I2C_Init+0x2c0>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0c9b      	lsrs	r3, r3, #18
 8001998:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4a3b      	ldr	r2, [pc, #236]	; (8001aac <HAL_I2C_Init+0x2b4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d802      	bhi.n	80019c8 <HAL_I2C_Init+0x1d0>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3301      	adds	r3, #1
 80019c6:	e009      	b.n	80019dc <HAL_I2C_Init+0x1e4>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	4a3a      	ldr	r2, [pc, #232]	; (8001abc <HAL_I2C_Init+0x2c4>)
 80019d4:	fba2 2303 	umull	r2, r3, r2, r3
 80019d8:	099b      	lsrs	r3, r3, #6
 80019da:	3301      	adds	r3, #1
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	492d      	ldr	r1, [pc, #180]	; (8001aac <HAL_I2C_Init+0x2b4>)
 80019f8:	428b      	cmp	r3, r1
 80019fa:	d80d      	bhi.n	8001a18 <HAL_I2C_Init+0x220>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1e59      	subs	r1, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	bf38      	it	cc
 8001a14:	2304      	movcc	r3, #4
 8001a16:	e063      	b.n	8001ae0 <HAL_I2C_Init+0x2e8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d111      	bne.n	8001a44 <HAL_I2C_Init+0x24c>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1e58      	subs	r0, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	440b      	add	r3, r1
 8001a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e012      	b.n	8001a6a <HAL_I2C_Init+0x272>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1e58      	subs	r0, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	0099      	lsls	r1, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_Init+0x27a>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e036      	b.n	8001ae0 <HAL_I2C_Init+0x2e8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d122      	bne.n	8001ac0 <HAL_I2C_Init+0x2c8>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1e58      	subs	r0, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6859      	ldr	r1, [r3, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	440b      	add	r3, r1
 8001a88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a96:	e023      	b.n	8001ae0 <HAL_I2C_Init+0x2e8>
 8001a98:	40005400 	.word	0x40005400
 8001a9c:	40005800 	.word	0x40005800
 8001aa0:	40005c00 	.word	0x40005c00
 8001aa4:	08005c3c 	.word	0x08005c3c
 8001aa8:	00061a80 	.word	0x00061a80
 8001aac:	000186a0 	.word	0x000186a0
 8001ab0:	001e847f 	.word	0x001e847f
 8001ab4:	003d08ff 	.word	0x003d08ff
 8001ab8:	431bde83 	.word	0x431bde83
 8001abc:	10624dd3 	.word	0x10624dd3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1e58      	subs	r0, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	0099      	lsls	r1, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	6809      	ldr	r1, [r1, #0]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69da      	ldr	r2, [r3, #28]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6911      	ldr	r1, [r2, #16]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68d2      	ldr	r2, [r2, #12]
 8001b1a:	4311      	orrs	r1, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop

08001b78 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	4613      	mov	r3, r2
 8001b86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d01b      	beq.n	8001bc6 <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d018      	beq.n	8001bc6 <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d015      	beq.n	8001bc6 <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d012      	beq.n	8001bc6 <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d00f      	beq.n	8001bc6 <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b10      	cmp	r3, #16
 8001baa:	d00c      	beq.n	8001bc6 <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001bb2:	d008      	beq.n	8001bc6 <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001bba:	d004      	beq.n	8001bc6 <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001bbc:	f640 71cd 	movw	r1, #4045	; 0xfcd
 8001bc0:	4835      	ldr	r0, [pc, #212]	; (8001c98 <HAL_I2C_Slave_Seq_Transmit_IT+0x120>)
 8001bc2:	f7fe ffc6 	bl	8000b52 <assert_failed>

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001bd2:	2b28      	cmp	r3, #40	; 0x28
 8001bd4:	d15b      	bne.n	8001c8e <HAL_I2C_Slave_Seq_Transmit_IT+0x116>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_I2C_Slave_Seq_Transmit_IT+0x6a>
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_I2C_Slave_Seq_Transmit_IT+0x6e>
    {
      return  HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e054      	b.n	8001c90 <HAL_I2C_Slave_Seq_Transmit_IT+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_I2C_Slave_Seq_Transmit_IT+0x7c>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e04d      	b.n	8001c90 <HAL_I2C_Slave_Seq_Transmit_IT+0x118>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d007      	beq.n	8001c1a <HAL_I2C_Slave_Seq_Transmit_IT+0xa2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c28:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2229      	movs	r2, #41	; 0x29
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2220      	movs	r2, #32
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	88fa      	ldrh	r2, [r7, #6]
 8001c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001c88:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_I2C_Slave_Seq_Transmit_IT+0x118>
  }
  else
  {
    return HAL_BUSY;
 8001c8e:	2302      	movs	r3, #2
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	08005c3c 	.word	0x08005c3c

08001c9c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d01b      	beq.n	8001cea <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d018      	beq.n	8001cea <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d015      	beq.n	8001cea <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d012      	beq.n	8001cea <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d00f      	beq.n	8001cea <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d00c      	beq.n	8001cea <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001cd6:	d008      	beq.n	8001cea <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001cde:	d004      	beq.n	8001cea <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001ce0:	f241 01ac 	movw	r1, #4268	; 0x10ac
 8001ce4:	4835      	ldr	r0, [pc, #212]	; (8001dbc <HAL_I2C_Slave_Seq_Receive_IT+0x120>)
 8001ce6:	f7fe ff34 	bl	8000b52 <assert_failed>

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001cf6:	2b28      	cmp	r3, #40	; 0x28
 8001cf8:	d15b      	bne.n	8001db2 <HAL_I2C_Slave_Seq_Receive_IT+0x116>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_I2C_Slave_Seq_Receive_IT+0x6a>
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_I2C_Slave_Seq_Receive_IT+0x6e>
    {
      return  HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e054      	b.n	8001db4 <HAL_I2C_Slave_Seq_Receive_IT+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_I2C_Slave_Seq_Receive_IT+0x7c>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e04d      	b.n	8001db4 <HAL_I2C_Slave_Seq_Receive_IT+0x118>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d007      	beq.n	8001d3e <HAL_I2C_Slave_Seq_Receive_IT+0xa2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d4c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	222a      	movs	r2, #42	; 0x2a
 8001d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001dac:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_I2C_Slave_Seq_Receive_IT+0x118>
  }
  else
  {
    return HAL_BUSY;
 8001db2:	2302      	movs	r3, #2
  }
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	08005c3c 	.word	0x08005c3c

08001dc0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	d124      	bne.n	8001e1e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2228      	movs	r2, #40	; 0x28
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d007      	beq.n	8001dfa <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e08:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001e18:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
  }
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e54:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	2b10      	cmp	r3, #16
 8001e5a:	d003      	beq.n	8001e64 <HAL_I2C_EV_IRQHandler+0x38>
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	2b40      	cmp	r3, #64	; 0x40
 8001e60:	f040 80bd 	bne.w	8001fde <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10d      	bne.n	8001e9a <HAL_I2C_EV_IRQHandler+0x6e>
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001e84:	d003      	beq.n	8001e8e <HAL_I2C_EV_IRQHandler+0x62>
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2C_EV_IRQHandler+0x66>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_I2C_EV_IRQHandler+0x68>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	f000 812e 	beq.w	80020f6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00c      	beq.n	8001ebe <HAL_I2C_EV_IRQHandler+0x92>
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	0a5b      	lsrs	r3, r3, #9
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f001 fc3d 	bl	8003730 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fd4a 	bl	8002950 <I2C_Master_SB>
 8001ebc:	e08e      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	08db      	lsrs	r3, r3, #3
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_I2C_EV_IRQHandler+0xb2>
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	0a5b      	lsrs	r3, r3, #9
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fdc0 	bl	8002a5c <I2C_Master_ADD10>
 8001edc:	e07e      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <HAL_I2C_EV_IRQHandler+0xd2>
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	0a5b      	lsrs	r3, r3, #9
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fdda 	bl	8002ab0 <I2C_Master_ADDR>
 8001efc:	e06e      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d037      	beq.n	8001f7a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f18:	f000 80ef 	beq.w	80020fa <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	09db      	lsrs	r3, r3, #7
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00f      	beq.n	8001f48 <HAL_I2C_EV_IRQHandler+0x11c>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	0a9b      	lsrs	r3, r3, #10
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d009      	beq.n	8001f48 <HAL_I2C_EV_IRQHandler+0x11c>
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d103      	bne.n	8001f48 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f9d7 	bl	80022f4 <I2C_MasterTransmit_TXE>
 8001f46:	e049      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80d2 	beq.w	80020fa <HAL_I2C_EV_IRQHandler+0x2ce>
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	0a5b      	lsrs	r3, r3, #9
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80cb 	beq.w	80020fa <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d103      	bne.n	8001f72 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fa5e 	bl	800242c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f70:	e0c3      	b.n	80020fa <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fac2 	bl	80024fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f78:	e0bf      	b.n	80020fa <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f88:	f000 80b7 	beq.w	80020fa <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	099b      	lsrs	r3, r3, #6
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00f      	beq.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x18c>
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	0a9b      	lsrs	r3, r3, #10
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x18c>
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d103      	bne.n	8001fb8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fb32 	bl	800261a <I2C_MasterReceive_RXNE>
 8001fb6:	e011      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 809a 	beq.w	80020fa <HAL_I2C_EV_IRQHandler+0x2ce>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	0a5b      	lsrs	r3, r3, #9
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8093 	beq.w	80020fa <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fbd1 	bl	800277c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fda:	e08e      	b.n	80020fa <HAL_I2C_EV_IRQHandler+0x2ce>
 8001fdc:	e08d      	b.n	80020fa <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e007      	b.n	8002000 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	085b      	lsrs	r3, r3, #1
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d012      	beq.n	8002032 <HAL_I2C_EV_IRQHandler+0x206>
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	0a5b      	lsrs	r3, r3, #9
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00c      	beq.n	8002032 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002028:	69b9      	ldr	r1, [r7, #24]
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 ff8f 	bl	8002f4e <I2C_Slave_ADDR>
 8002030:	e066      	b.n	8002100 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <HAL_I2C_EV_IRQHandler+0x226>
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	0a5b      	lsrs	r3, r3, #9
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 ffc4 	bl	8002fd8 <I2C_Slave_STOPF>
 8002050:	e056      	b.n	8002100 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	2b21      	cmp	r3, #33	; 0x21
 8002056:	d002      	beq.n	800205e <HAL_I2C_EV_IRQHandler+0x232>
 8002058:	7bbb      	ldrb	r3, [r7, #14]
 800205a:	2b29      	cmp	r3, #41	; 0x29
 800205c:	d125      	bne.n	80020aa <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	09db      	lsrs	r3, r3, #7
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00f      	beq.n	800208a <HAL_I2C_EV_IRQHandler+0x25e>
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	0a9b      	lsrs	r3, r3, #10
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_I2C_EV_IRQHandler+0x25e>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d103      	bne.n	800208a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fea5 	bl	8002dd2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002088:	e039      	b.n	80020fe <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d033      	beq.n	80020fe <HAL_I2C_EV_IRQHandler+0x2d2>
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	0a5b      	lsrs	r3, r3, #9
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d02d      	beq.n	80020fe <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fed2 	bl	8002e4c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020a8:	e029      	b.n	80020fe <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00f      	beq.n	80020d6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	0a9b      	lsrs	r3, r3, #10
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d103      	bne.n	80020d6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fedd 	bl	8002e8e <I2C_SlaveReceive_RXNE>
 80020d4:	e014      	b.n	8002100 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00e      	beq.n	8002100 <HAL_I2C_EV_IRQHandler+0x2d4>
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	0a5b      	lsrs	r3, r3, #9
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 ff0b 	bl	8002f0a <I2C_SlaveReceive_BTF>
 80020f4:	e004      	b.n	8002100 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80020f6:	bf00      	nop
 80020f8:	e002      	b.n	8002100 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020fa:	bf00      	nop
 80020fc:	e000      	b.n	8002100 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b08a      	sub	sp, #40	; 0x28
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002128:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00e      	beq.n	8002154 <HAL_I2C_ER_IRQHandler+0x4e>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002152:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	0a5b      	lsrs	r3, r3, #9
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00e      	beq.n	800217e <HAL_I2C_ER_IRQHandler+0x78>
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	f043 0302 	orr.w	r3, r3, #2
 8002172:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800217c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	0a9b      	lsrs	r3, r3, #10
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d03f      	beq.n	800220a <HAL_I2C_ER_IRQHandler+0x104>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d039      	beq.n	800220a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002196:	7efb      	ldrb	r3, [r7, #27]
 8002198:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80021b0:	7ebb      	ldrb	r3, [r7, #26]
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d112      	bne.n	80021dc <HAL_I2C_ER_IRQHandler+0xd6>
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10f      	bne.n	80021dc <HAL_I2C_ER_IRQHandler+0xd6>
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	2b21      	cmp	r3, #33	; 0x21
 80021c0:	d008      	beq.n	80021d4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80021c2:	7cfb      	ldrb	r3, [r7, #19]
 80021c4:	2b29      	cmp	r3, #41	; 0x29
 80021c6:	d005      	beq.n	80021d4 <HAL_I2C_ER_IRQHandler+0xce>
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	2b28      	cmp	r3, #40	; 0x28
 80021cc:	d106      	bne.n	80021dc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b21      	cmp	r3, #33	; 0x21
 80021d2:	d103      	bne.n	80021dc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f001 f82f 	bl	8003238 <I2C_Slave_AF>
 80021da:	e016      	b.n	800220a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80021ee:	7efb      	ldrb	r3, [r7, #27]
 80021f0:	2b10      	cmp	r3, #16
 80021f2:	d002      	beq.n	80021fa <HAL_I2C_ER_IRQHandler+0xf4>
 80021f4:	7efb      	ldrb	r3, [r7, #27]
 80021f6:	2b40      	cmp	r3, #64	; 0x40
 80021f8:	d107      	bne.n	800220a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002208:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	0adb      	lsrs	r3, r3, #11
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00e      	beq.n	8002234 <HAL_I2C_ER_IRQHandler+0x12e>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	f043 0308 	orr.w	r3, r3, #8
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002232:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f001 f866 	bl	8003318 <I2C_ITError>
  }
}
 800224c:	bf00      	nop
 800224e:	3728      	adds	r7, #40	; 0x28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002302:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800230a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	2b00      	cmp	r3, #0
 8002318:	d150      	bne.n	80023bc <I2C_MasterTransmit_TXE+0xc8>
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b21      	cmp	r3, #33	; 0x21
 800231e:	d14d      	bne.n	80023bc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b08      	cmp	r3, #8
 8002324:	d01d      	beq.n	8002362 <I2C_MasterTransmit_TXE+0x6e>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b20      	cmp	r3, #32
 800232a:	d01a      	beq.n	8002362 <I2C_MasterTransmit_TXE+0x6e>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002332:	d016      	beq.n	8002362 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002342:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2211      	movs	r2, #17
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ff7a 	bl	8002254 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002360:	e060      	b.n	8002424 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002370:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002380:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d107      	bne.n	80023ac <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff7d 	bl	80022a4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023aa:	e03b      	b.n	8002424 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff4d 	bl	8002254 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023ba:	e033      	b.n	8002424 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	2b21      	cmp	r3, #33	; 0x21
 80023c0:	d005      	beq.n	80023ce <I2C_MasterTransmit_TXE+0xda>
 80023c2:	7bbb      	ldrb	r3, [r7, #14]
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d12d      	bne.n	8002424 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b22      	cmp	r3, #34	; 0x22
 80023cc:	d12a      	bne.n	8002424 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d108      	bne.n	80023ea <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80023e8:	e01c      	b.n	8002424 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b40      	cmp	r3, #64	; 0x40
 80023f4:	d103      	bne.n	80023fe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f880 	bl	80024fc <I2C_MemoryTransmit_TXE_BTF>
}
 80023fc:	e012      	b.n	8002424 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002422:	e7ff      	b.n	8002424 <I2C_MasterTransmit_TXE+0x130>
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b21      	cmp	r3, #33	; 0x21
 8002444:	d156      	bne.n	80024f4 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d012      	beq.n	8002476 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002474:	e03e      	b.n	80024f4 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d01d      	beq.n	80024b8 <I2C_MasterTransmit_BTF+0x8c>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b20      	cmp	r3, #32
 8002480:	d01a      	beq.n	80024b8 <I2C_MasterTransmit_BTF+0x8c>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002488:	d016      	beq.n	80024b8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002498:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2211      	movs	r2, #17
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fecf 	bl	8002254 <HAL_I2C_MasterTxCpltCallback>
}
 80024b6:	e01d      	b.n	80024f4 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024c6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff feb0 	bl	8002254 <HAL_I2C_MasterTxCpltCallback>
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11d      	bne.n	8002550 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	2b01      	cmp	r3, #1
 800251a:	d10b      	bne.n	8002534 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002520:	b2da      	uxtb	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252c:	1c9a      	adds	r2, r3, #2
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002532:	e06e      	b.n	8002612 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002538:	b29b      	uxth	r3, r3
 800253a:	121b      	asrs	r3, r3, #8
 800253c:	b2da      	uxtb	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800254e:	e060      	b.n	8002612 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10b      	bne.n	8002570 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255c:	b2da      	uxtb	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800256e:	e050      	b.n	8002612 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002574:	2b02      	cmp	r3, #2
 8002576:	d14c      	bne.n	8002612 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b22      	cmp	r3, #34	; 0x22
 800257c:	d108      	bne.n	8002590 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	e040      	b.n	8002612 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d015      	beq.n	80025c6 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	2b21      	cmp	r3, #33	; 0x21
 800259e:	d112      	bne.n	80025c6 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025c4:	e025      	b.n	8002612 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d120      	bne.n	8002612 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2b21      	cmp	r3, #33	; 0x21
 80025d4:	d11d      	bne.n	8002612 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025e4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff fe49 	bl	80022a4 <HAL_I2C_MemTxCpltCallback>
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b22      	cmp	r3, #34	; 0x22
 800262c:	f040 80a2 	bne.w	8002774 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b03      	cmp	r3, #3
 800263c:	d921      	bls.n	8002682 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b03      	cmp	r3, #3
 800266c:	f040 8082 	bne.w	8002774 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002680:	e078      	b.n	8002774 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	2b02      	cmp	r3, #2
 8002688:	d074      	beq.n	8002774 <I2C_MasterReceive_RXNE+0x15a>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d002      	beq.n	8002696 <I2C_MasterReceive_RXNE+0x7c>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d16e      	bne.n	8002774 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f001 f818 	bl	80036cc <I2C_WaitOnSTOPRequestThroughIT>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d142      	bne.n	8002728 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d10a      	bne.n	8002712 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fdd4 	bl	80022b8 <HAL_I2C_MemRxCpltCallback>
}
 8002710:	e030      	b.n	8002774 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2212      	movs	r2, #18
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fda1 	bl	8002268 <HAL_I2C_MasterRxCpltCallback>
}
 8002726:	e025      	b.n	8002774 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002736:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff fdac 	bl	80022cc <HAL_I2C_ErrorCallback>
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b04      	cmp	r3, #4
 8002792:	d11b      	bne.n	80027cc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80027ca:	e0bd      	b.n	8002948 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d129      	bne.n	800282a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d00a      	beq.n	8002802 <I2C_MasterReceive_BTF+0x86>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d007      	beq.n	8002802 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002800:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002828:	e08e      	b.n	8002948 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d176      	bne.n	8002922 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d002      	beq.n	8002840 <I2C_MasterReceive_BTF+0xc4>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b10      	cmp	r3, #16
 800283e:	d108      	bne.n	8002852 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e019      	b.n	8002886 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d002      	beq.n	800285e <I2C_MasterReceive_BTF+0xe2>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d108      	bne.n	8002870 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	e00a      	b.n	8002886 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b10      	cmp	r3, #16
 8002874:	d007      	beq.n	8002886 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002884:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028e0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b40      	cmp	r3, #64	; 0x40
 80028f4:	d10a      	bne.n	800290c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fcd7 	bl	80022b8 <HAL_I2C_MemRxCpltCallback>
}
 800290a:	e01d      	b.n	8002948 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2212      	movs	r2, #18
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff fca4 	bl	8002268 <HAL_I2C_MasterRxCpltCallback>
}
 8002920:	e012      	b.n	8002948 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d117      	bne.n	8002994 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800297c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800297e:	e067      	b.n	8002a50 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	611a      	str	r2, [r3, #16]
}
 8002992:	e05d      	b.n	8002a50 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800299c:	d133      	bne.n	8002a06 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b21      	cmp	r3, #33	; 0x21
 80029a8:	d109      	bne.n	80029be <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029ba:	611a      	str	r2, [r3, #16]
 80029bc:	e008      	b.n	80029d0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d004      	beq.n	80029e2 <I2C_Master_SB+0x92>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d108      	bne.n	80029f4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d032      	beq.n	8002a50 <I2C_Master_SB+0x100>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02d      	beq.n	8002a50 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a02:	605a      	str	r2, [r3, #4]
}
 8002a04:	e024      	b.n	8002a50 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10e      	bne.n	8002a2c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	11db      	asrs	r3, r3, #7
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 0306 	and.w	r3, r3, #6
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f063 030f 	orn	r3, r3, #15
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	611a      	str	r2, [r3, #16]
}
 8002a2a:	e011      	b.n	8002a50 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d10d      	bne.n	8002a50 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	11db      	asrs	r3, r3, #7
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f003 0306 	and.w	r3, r3, #6
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f063 030e 	orn	r3, r3, #14
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	611a      	str	r2, [r3, #16]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d103      	bne.n	8002a80 <I2C_Master_ADD10+0x24>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d011      	beq.n	8002aa4 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <I2C_Master_ADD10+0x38>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa2:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b091      	sub	sp, #68	; 0x44
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002abe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b22      	cmp	r3, #34	; 0x22
 8002ad8:	f040 8169 	bne.w	8002dae <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10f      	bne.n	8002b04 <I2C_Master_ADDR+0x54>
 8002ae4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d10b      	bne.n	8002b04 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aec:	2300      	movs	r3, #0
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	633b      	str	r3, [r7, #48]	; 0x30
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	633b      	str	r3, [r7, #48]	; 0x30
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	e160      	b.n	8002dc6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d11d      	bne.n	8002b48 <I2C_Master_ADDR+0x98>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b14:	d118      	bne.n	8002b48 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b16:	2300      	movs	r3, #0
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b3a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	651a      	str	r2, [r3, #80]	; 0x50
 8002b46:	e13e      	b.n	8002dc6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d113      	bne.n	8002b7a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b52:	2300      	movs	r3, #0
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	e115      	b.n	8002da6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	f040 808a 	bne.w	8002c9a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b8c:	d137      	bne.n	8002bfe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bac:	d113      	bne.n	8002bd6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bbc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	e0e7      	b.n	8002da6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	623b      	str	r3, [r7, #32]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	623b      	str	r3, [r7, #32]
 8002bea:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e0d3      	b.n	8002da6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d02e      	beq.n	8002c62 <I2C_Master_ADDR+0x1b2>
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d02b      	beq.n	8002c62 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0c:	2b12      	cmp	r3, #18
 8002c0e:	d102      	bne.n	8002c16 <I2C_Master_ADDR+0x166>
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d125      	bne.n	8002c62 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d00e      	beq.n	8002c3a <I2C_Master_ADDR+0x18a>
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d00b      	beq.n	8002c3a <I2C_Master_ADDR+0x18a>
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d008      	beq.n	8002c3a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e007      	b.n	8002c4a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c48:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	e0a1      	b.n	8002da6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c70:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e085      	b.n	8002da6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d14d      	bne.n	8002d40 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d016      	beq.n	8002cd8 <I2C_Master_ADDR+0x228>
 8002caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d013      	beq.n	8002cd8 <I2C_Master_ADDR+0x228>
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d010      	beq.n	8002cd8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e007      	b.n	8002ce8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ce6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf6:	d117      	bne.n	8002d28 <I2C_Master_ADDR+0x278>
 8002cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cfe:	d00b      	beq.n	8002d18 <I2C_Master_ADDR+0x268>
 8002d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d008      	beq.n	8002d18 <I2C_Master_ADDR+0x268>
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d005      	beq.n	8002d18 <I2C_Master_ADDR+0x268>
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d002      	beq.n	8002d18 <I2C_Master_ADDR+0x268>
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d107      	bne.n	8002d28 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d26:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	e032      	b.n	8002da6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d4e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d5e:	d117      	bne.n	8002d90 <I2C_Master_ADDR+0x2e0>
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d66:	d00b      	beq.n	8002d80 <I2C_Master_ADDR+0x2d0>
 8002d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d008      	beq.n	8002d80 <I2C_Master_ADDR+0x2d0>
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d005      	beq.n	8002d80 <I2C_Master_ADDR+0x2d0>
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d002      	beq.n	8002d80 <I2C_Master_ADDR+0x2d0>
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d107      	bne.n	8002d90 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d8e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002dac:	e00b      	b.n	8002dc6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	e7ff      	b.n	8002dc6 <I2C_Master_ADDR+0x316>
 8002dc6:	bf00      	nop
 8002dc8:	3744      	adds	r7, #68	; 0x44
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d02b      	beq.n	8002e44 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	781a      	ldrb	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d114      	bne.n	8002e44 <I2C_SlaveTransmit_TXE+0x72>
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	2b29      	cmp	r3, #41	; 0x29
 8002e1e:	d111      	bne.n	8002e44 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2221      	movs	r2, #33	; 0x21
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2228      	movs	r2, #40	; 0x28
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff fa1c 	bl	800227c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d011      	beq.n	8002e82 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	781a      	ldrb	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d02c      	beq.n	8002f02 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d114      	bne.n	8002f02 <I2C_SlaveReceive_RXNE+0x74>
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	2b2a      	cmp	r3, #42	; 0x2a
 8002edc:	d111      	bne.n	8002f02 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2222      	movs	r2, #34	; 0x22
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2228      	movs	r2, #40	; 0x28
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff f9c7 	bl	8002290 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d012      	beq.n	8002f42 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f68:	2b28      	cmp	r3, #40	; 0x28
 8002f6a:	d127      	bne.n	8002fbc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	09db      	lsrs	r3, r3, #7
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d103      	bne.n	8002fa0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	81bb      	strh	r3, [r7, #12]
 8002f9e:	e002      	b.n	8002fa6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002fae:	89ba      	ldrh	r2, [r7, #12]
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7fd fc87 	bl	80008c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fba:	e008      	b.n	8002fce <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0202 	mvn.w	r2, #2
 8002fc4:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ff6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003024:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003034:	d172      	bne.n	800311c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	2b22      	cmp	r3, #34	; 0x22
 800303a:	d002      	beq.n	8003042 <I2C_Slave_STOPF+0x6a>
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b2a      	cmp	r3, #42	; 0x2a
 8003040:	d135      	bne.n	80030ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0204 	orr.w	r2, r3, #4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003074:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe f8d4 	bl	8001228 <HAL_DMA_GetState>
 8003080:	4603      	mov	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d049      	beq.n	800311a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	4a69      	ldr	r2, [pc, #420]	; (8003230 <I2C_Slave_STOPF+0x258>)
 800308c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe f8a6 	bl	80011e4 <HAL_DMA_Abort_IT>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d03d      	beq.n	800311a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030a8:	4610      	mov	r0, r2
 80030aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030ac:	e035      	b.n	800311a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f043 0204 	orr.w	r2, r3, #4
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe f89e 	bl	8001228 <HAL_DMA_GetState>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d014      	beq.n	800311c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	4a4e      	ldr	r2, [pc, #312]	; (8003230 <I2C_Slave_STOPF+0x258>)
 80030f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe f870 	bl	80011e4 <HAL_DMA_Abort_IT>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003114:	4610      	mov	r0, r2
 8003116:	4798      	blx	r3
 8003118:	e000      	b.n	800311c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800311a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d03e      	beq.n	80031a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b04      	cmp	r3, #4
 8003132:	d112      	bne.n	800315a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b40      	cmp	r3, #64	; 0x40
 8003166:	d112      	bne.n	800318e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f043 0204 	orr.w	r2, r3, #4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f8b3 	bl	8003318 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80031b2:	e039      	b.n	8003228 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b2a      	cmp	r3, #42	; 0x2a
 80031b8:	d109      	bne.n	80031ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2228      	movs	r2, #40	; 0x28
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff f861 	bl	8002290 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b28      	cmp	r3, #40	; 0x28
 80031d8:	d111      	bne.n	80031fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a15      	ldr	r2, [pc, #84]	; (8003234 <I2C_Slave_STOPF+0x25c>)
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd fbb2 	bl	8000960 <HAL_I2C_ListenCpltCallback>
}
 80031fc:	e014      	b.n	8003228 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	2b22      	cmp	r3, #34	; 0x22
 8003204:	d002      	beq.n	800320c <I2C_Slave_STOPF+0x234>
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	2b22      	cmp	r3, #34	; 0x22
 800320a:	d10d      	bne.n	8003228 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff f834 	bl	8002290 <HAL_I2C_SlaveRxCpltCallback>
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	0800357d 	.word	0x0800357d
 8003234:	ffff0000 	.word	0xffff0000

08003238 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003246:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d002      	beq.n	800325a <I2C_Slave_AF+0x22>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b20      	cmp	r3, #32
 8003258:	d129      	bne.n	80032ae <I2C_Slave_AF+0x76>
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b28      	cmp	r3, #40	; 0x28
 800325e:	d126      	bne.n	80032ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a2c      	ldr	r2, [pc, #176]	; (8003314 <I2C_Slave_AF+0xdc>)
 8003264:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003274:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800327e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd fb5a 	bl	8000960 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80032ac:	e02e      	b.n	800330c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2b21      	cmp	r3, #33	; 0x21
 80032b2:	d126      	bne.n	8003302 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <I2C_Slave_AF+0xdc>)
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2221      	movs	r2, #33	; 0x21
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fe ffbe 	bl	800227c <HAL_I2C_SlaveTxCpltCallback>
}
 8003300:	e004      	b.n	800330c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800330a:	615a      	str	r2, [r3, #20]
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	ffff0000 	.word	0xffff0000

08003318 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003326:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003330:	7bbb      	ldrb	r3, [r7, #14]
 8003332:	2b10      	cmp	r3, #16
 8003334:	d002      	beq.n	800333c <I2C_ITError+0x24>
 8003336:	7bbb      	ldrb	r3, [r7, #14]
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d10a      	bne.n	8003352 <I2C_ITError+0x3a>
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b22      	cmp	r3, #34	; 0x22
 8003340:	d107      	bne.n	8003352 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003350:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003358:	2b28      	cmp	r3, #40	; 0x28
 800335a:	d107      	bne.n	800336c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2228      	movs	r2, #40	; 0x28
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800336a:	e015      	b.n	8003398 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337a:	d00a      	beq.n	8003392 <I2C_ITError+0x7a>
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	2b60      	cmp	r3, #96	; 0x60
 8003380:	d007      	beq.n	8003392 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a6:	d162      	bne.n	800346e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d020      	beq.n	8003408 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ca:	4a6a      	ldr	r2, [pc, #424]	; (8003574 <I2C_ITError+0x25c>)
 80033cc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd ff06 	bl	80011e4 <HAL_DMA_Abort_IT>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8089 	beq.w	80034f2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003402:	4610      	mov	r0, r2
 8003404:	4798      	blx	r3
 8003406:	e074      	b.n	80034f2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	4a59      	ldr	r2, [pc, #356]	; (8003574 <I2C_ITError+0x25c>)
 800340e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd fee5 	bl	80011e4 <HAL_DMA_Abort_IT>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d068      	beq.n	80034f2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d10b      	bne.n	8003446 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0201 	bic.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003468:	4610      	mov	r0, r2
 800346a:	4798      	blx	r3
 800346c:	e041      	b.n	80034f2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b60      	cmp	r3, #96	; 0x60
 8003478:	d125      	bne.n	80034c6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d10b      	bne.n	80034ae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fe ff0e 	bl	80022e0 <HAL_I2C_AbortCpltCallback>
 80034c4:	e015      	b.n	80034f2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d10b      	bne.n	80034ec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fe feed 	bl	80022cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10e      	bne.n	8003520 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800352e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b04      	cmp	r3, #4
 8003542:	d113      	bne.n	800356c <I2C_ITError+0x254>
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b28      	cmp	r3, #40	; 0x28
 8003548:	d110      	bne.n	800356c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <I2C_ITError+0x260>)
 800354e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fd f9fa 	bl	8000960 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	0800357d 	.word	0x0800357d
 8003578:	ffff0000 	.word	0xffff0000

0800357c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003594:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003596:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <I2C_DMAAbort+0x148>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	08db      	lsrs	r3, r3, #3
 800359c:	4a4a      	ldr	r2, [pc, #296]	; (80036c8 <I2C_DMAAbort+0x14c>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	0a1a      	lsrs	r2, r3, #8
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00da      	lsls	r2, r3, #3
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f043 0220 	orr.w	r2, r3, #32
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80035c2:	e00a      	b.n	80035da <I2C_DMAAbort+0x5e>
    }
    count--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d8:	d0ea      	beq.n	80035b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	2200      	movs	r2, #0
 80035e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	2200      	movs	r2, #0
 80035f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003608:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2200      	movs	r2, #0
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361c:	2200      	movs	r2, #0
 800361e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	2200      	movs	r2, #0
 800362e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b60      	cmp	r3, #96	; 0x60
 800364a:	d10e      	bne.n	800366a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2200      	movs	r2, #0
 8003660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7fe fe3c 	bl	80022e0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003668:	e027      	b.n	80036ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003670:	2b28      	cmp	r3, #40	; 0x28
 8003672:	d117      	bne.n	80036a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003692:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2200      	movs	r2, #0
 8003698:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2228      	movs	r2, #40	; 0x28
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80036a2:	e007      	b.n	80036b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80036b4:	6978      	ldr	r0, [r7, #20]
 80036b6:	f7fe fe09 	bl	80022cc <HAL_I2C_ErrorCallback>
}
 80036ba:	bf00      	nop
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000000 	.word	0x20000000
 80036c8:	14f8b589 	.word	0x14f8b589

080036cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	08db      	lsrs	r3, r3, #3
 80036de:	4a13      	ldr	r2, [pc, #76]	; (800372c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	0a1a      	lsrs	r2, r3, #8
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d107      	bne.n	800370a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e008      	b.n	800371c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003718:	d0e9      	beq.n	80036ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	20000000 	.word	0x20000000
 800372c:	14f8b589 	.word	0x14f8b589

08003730 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003740:	d103      	bne.n	800374a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003748:	e007      	b.n	800375a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003752:	d102      	bne.n	800375a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2208      	movs	r2, #8
 8003758:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e30d      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b0f      	cmp	r3, #15
 8003780:	d903      	bls.n	800378a <HAL_RCC_OscConfig+0x22>
 8003782:	21e8      	movs	r1, #232	; 0xe8
 8003784:	48a3      	ldr	r0, [pc, #652]	; (8003a14 <HAL_RCC_OscConfig+0x2ac>)
 8003786:	f7fd f9e4 	bl	8000b52 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8088 	beq.w	80038a8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00d      	beq.n	80037bc <HAL_RCC_OscConfig+0x54>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d008      	beq.n	80037bc <HAL_RCC_OscConfig+0x54>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b2:	d003      	beq.n	80037bc <HAL_RCC_OscConfig+0x54>
 80037b4:	21ed      	movs	r1, #237	; 0xed
 80037b6:	4897      	ldr	r0, [pc, #604]	; (8003a14 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	f7fd f9cb 	bl	8000b52 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037bc:	4b96      	ldr	r3, [pc, #600]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d00c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c8:	4b93      	ldr	r3, [pc, #588]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d112      	bne.n	80037fa <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d4:	4b90      	ldr	r3, [pc, #576]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e0:	d10b      	bne.n	80037fa <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e2:	4b8d      	ldr	r3, [pc, #564]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d05b      	beq.n	80038a6 <HAL_RCC_OscConfig+0x13e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d157      	bne.n	80038a6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e2cd      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003802:	d106      	bne.n	8003812 <HAL_RCC_OscConfig+0xaa>
 8003804:	4b84      	ldr	r3, [pc, #528]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a83      	ldr	r2, [pc, #524]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 800380a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	e01d      	b.n	800384e <HAL_RCC_OscConfig+0xe6>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381a:	d10c      	bne.n	8003836 <HAL_RCC_OscConfig+0xce>
 800381c:	4b7e      	ldr	r3, [pc, #504]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a7d      	ldr	r2, [pc, #500]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 8003822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	4b7b      	ldr	r3, [pc, #492]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a7a      	ldr	r2, [pc, #488]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 800382e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	e00b      	b.n	800384e <HAL_RCC_OscConfig+0xe6>
 8003836:	4b78      	ldr	r3, [pc, #480]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a77      	ldr	r2, [pc, #476]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 800383c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4b75      	ldr	r3, [pc, #468]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a74      	ldr	r2, [pc, #464]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 8003848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d013      	beq.n	800387e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003856:	f7fd fb79 	bl	8000f4c <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800385e:	f7fd fb75 	bl	8000f4c <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b64      	cmp	r3, #100	; 0x64
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e292      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003870:	4b69      	ldr	r3, [pc, #420]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0xf6>
 800387c:	e014      	b.n	80038a8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387e:	f7fd fb65 	bl	8000f4c <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003886:	f7fd fb61 	bl	8000f4c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b64      	cmp	r3, #100	; 0x64
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e27e      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003898:	4b5f      	ldr	r3, [pc, #380]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f0      	bne.n	8003886 <HAL_RCC_OscConfig+0x11e>
 80038a4:	e000      	b.n	80038a8 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d079      	beq.n	80039a8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_OscConfig+0x166>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d004      	beq.n	80038ce <HAL_RCC_OscConfig+0x166>
 80038c4:	f240 111f 	movw	r1, #287	; 0x11f
 80038c8:	4852      	ldr	r0, [pc, #328]	; (8003a14 <HAL_RCC_OscConfig+0x2ac>)
 80038ca:	f7fd f942 	bl	8000b52 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b1f      	cmp	r3, #31
 80038d4:	d904      	bls.n	80038e0 <HAL_RCC_OscConfig+0x178>
 80038d6:	f44f 7190 	mov.w	r1, #288	; 0x120
 80038da:	484e      	ldr	r0, [pc, #312]	; (8003a14 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	f7fd f939 	bl	8000b52 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038e0:	4b4d      	ldr	r3, [pc, #308]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 030c 	and.w	r3, r3, #12
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00b      	beq.n	8003904 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ec:	4b4a      	ldr	r3, [pc, #296]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d11c      	bne.n	8003932 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f8:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d116      	bne.n	8003932 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003904:	4b44      	ldr	r3, [pc, #272]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_OscConfig+0x1b4>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d001      	beq.n	800391c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e23c      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	4b3e      	ldr	r3, [pc, #248]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	493b      	ldr	r1, [pc, #236]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003930:	e03a      	b.n	80039a8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d020      	beq.n	800397c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800393a:	4b38      	ldr	r3, [pc, #224]	; (8003a1c <HAL_RCC_OscConfig+0x2b4>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fd fb04 	bl	8000f4c <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003948:	f7fd fb00 	bl	8000f4c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e21d      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395a:	4b2f      	ldr	r3, [pc, #188]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003966:	4b2c      	ldr	r3, [pc, #176]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4928      	ldr	r1, [pc, #160]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]
 800397a:	e015      	b.n	80039a8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397c:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <HAL_RCC_OscConfig+0x2b4>)
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fd fae3 	bl	8000f4c <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398a:	f7fd fadf 	bl	8000f4c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1fc      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399c:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f0      	bne.n	800398a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d046      	beq.n	8003a42 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_OscConfig+0x266>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d004      	beq.n	80039ce <HAL_RCC_OscConfig+0x266>
 80039c4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80039c8:	4812      	ldr	r0, [pc, #72]	; (8003a14 <HAL_RCC_OscConfig+0x2ac>)
 80039ca:	f7fd f8c2 	bl	8000b52 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d016      	beq.n	8003a04 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_RCC_OscConfig+0x2b8>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fd fab6 	bl	8000f4c <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fd fab2 	bl	8000f4c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e1cf      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 80039f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x27c>
 8003a02:	e01e      	b.n	8003a42 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_RCC_OscConfig+0x2b8>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0a:	f7fd fa9f 	bl	8000f4c <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a10:	e011      	b.n	8003a36 <HAL_RCC_OscConfig+0x2ce>
 8003a12:	bf00      	nop
 8003a14:	08005c74 	.word	0x08005c74
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	42470000 	.word	0x42470000
 8003a20:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a24:	f7fd fa92 	bl	8000f4c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1af      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a36:	4b97      	ldr	r3, [pc, #604]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 80a8 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a50:	2300      	movs	r3, #0
 8003a52:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00c      	beq.n	8003a76 <HAL_RCC_OscConfig+0x30e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_OscConfig+0x30e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b05      	cmp	r3, #5
 8003a6a:	d004      	beq.n	8003a76 <HAL_RCC_OscConfig+0x30e>
 8003a6c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003a70:	4889      	ldr	r0, [pc, #548]	; (8003c98 <HAL_RCC_OscConfig+0x530>)
 8003a72:	f7fd f86e 	bl	8000b52 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a76:	4b87      	ldr	r3, [pc, #540]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10f      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	4b83      	ldr	r3, [pc, #524]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	4a82      	ldr	r2, [pc, #520]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	; 0x40
 8003a92:	4b80      	ldr	r3, [pc, #512]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa2:	4b7e      	ldr	r3, [pc, #504]	; (8003c9c <HAL_RCC_OscConfig+0x534>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aae:	4b7b      	ldr	r3, [pc, #492]	; (8003c9c <HAL_RCC_OscConfig+0x534>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a7a      	ldr	r2, [pc, #488]	; (8003c9c <HAL_RCC_OscConfig+0x534>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7fd fa47 	bl	8000f4c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fd fa43 	bl	8000f4c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e160      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	4b71      	ldr	r3, [pc, #452]	; (8003c9c <HAL_RCC_OscConfig+0x534>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x38e>
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	4a69      	ldr	r2, [pc, #420]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6713      	str	r3, [r2, #112]	; 0x70
 8003af4:	e01c      	b.n	8003b30 <HAL_RCC_OscConfig+0x3c8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x3b0>
 8003afe:	4b65      	ldr	r3, [pc, #404]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	4a64      	ldr	r2, [pc, #400]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0a:	4b62      	ldr	r3, [pc, #392]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4a61      	ldr	r2, [pc, #388]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6713      	str	r3, [r2, #112]	; 0x70
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0x3c8>
 8003b18:	4b5e      	ldr	r3, [pc, #376]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	4a5d      	ldr	r2, [pc, #372]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	; 0x70
 8003b24:	4b5b      	ldr	r3, [pc, #364]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b28:	4a5a      	ldr	r2, [pc, #360]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fd fa08 	bl	8000f4c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fd fa04 	bl	8000f4c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e11f      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	4b4f      	ldr	r3, [pc, #316]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ee      	beq.n	8003b40 <HAL_RCC_OscConfig+0x3d8>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b64:	f7fd f9f2 	bl	8000f4c <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b6c:	f7fd f9ee 	bl	8000f4c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e109      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b82:	4b44      	ldr	r3, [pc, #272]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ee      	bne.n	8003b6c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b94:	4b3f      	ldr	r3, [pc, #252]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	4a3e      	ldr	r2, [pc, #248]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00c      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x45a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x45a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x45a>
 8003bb8:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003bbc:	4836      	ldr	r0, [pc, #216]	; (8003c98 <HAL_RCC_OscConfig+0x530>)
 8003bbe:	f7fc ffc8 	bl	8000b52 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80e4 	beq.w	8003d94 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bcc:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <HAL_RCC_OscConfig+0x52c>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	f000 80ae 	beq.w	8003d36 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	f040 8092 	bne.w	8003d08 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d009      	beq.n	8003c00 <HAL_RCC_OscConfig+0x498>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf4:	d004      	beq.n	8003c00 <HAL_RCC_OscConfig+0x498>
 8003bf6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003bfa:	4827      	ldr	r0, [pc, #156]	; (8003c98 <HAL_RCC_OscConfig+0x530>)
 8003bfc:	f7fc ffa9 	bl	8000b52 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	2b3f      	cmp	r3, #63	; 0x3f
 8003c06:	d904      	bls.n	8003c12 <HAL_RCC_OscConfig+0x4aa>
 8003c08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003c0c:	4822      	ldr	r0, [pc, #136]	; (8003c98 <HAL_RCC_OscConfig+0x530>)
 8003c0e:	f7fc ffa0 	bl	8000b52 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	2bbf      	cmp	r3, #191	; 0xbf
 8003c18:	d904      	bls.n	8003c24 <HAL_RCC_OscConfig+0x4bc>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003c22:	d904      	bls.n	8003c2e <HAL_RCC_OscConfig+0x4c6>
 8003c24:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003c28:	481b      	ldr	r0, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x530>)
 8003c2a:	f7fc ff92 	bl	8000b52 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d010      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4f0>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d00c      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4f0>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	2b06      	cmp	r3, #6
 8003c44:	d008      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4f0>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d004      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4f0>
 8003c4e:	f240 11db 	movw	r1, #475	; 0x1db
 8003c52:	4811      	ldr	r0, [pc, #68]	; (8003c98 <HAL_RCC_OscConfig+0x530>)
 8003c54:	f7fc ff7d 	bl	8000b52 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d903      	bls.n	8003c68 <HAL_RCC_OscConfig+0x500>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	2b0f      	cmp	r3, #15
 8003c66:	d904      	bls.n	8003c72 <HAL_RCC_OscConfig+0x50a>
 8003c68:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003c6c:	480a      	ldr	r0, [pc, #40]	; (8003c98 <HAL_RCC_OscConfig+0x530>)
 8003c6e:	f7fc ff70 	bl	8000b52 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c72:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_OscConfig+0x538>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fd f968 	bl	8000f4c <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7e:	e011      	b.n	8003ca4 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fd f964 	bl	8000f4c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d90a      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e081      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	08005c74 	.word	0x08005c74
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca4:	4b3e      	ldr	r3, [pc, #248]	; (8003da0 <HAL_RCC_OscConfig+0x638>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e7      	bne.n	8003c80 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	019b      	lsls	r3, r3, #6
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	061b      	lsls	r3, r3, #24
 8003cd4:	4932      	ldr	r1, [pc, #200]	; (8003da0 <HAL_RCC_OscConfig+0x638>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cda:	4b32      	ldr	r3, [pc, #200]	; (8003da4 <HAL_RCC_OscConfig+0x63c>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fd f934 	bl	8000f4c <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fd f930 	bl	8000f4c <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e04d      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfa:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <HAL_RCC_OscConfig+0x638>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x580>
 8003d06:	e045      	b.n	8003d94 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d08:	4b26      	ldr	r3, [pc, #152]	; (8003da4 <HAL_RCC_OscConfig+0x63c>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0e:	f7fd f91d 	bl	8000f4c <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d16:	f7fd f919 	bl	8000f4c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e036      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <HAL_RCC_OscConfig+0x638>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f0      	bne.n	8003d16 <HAL_RCC_OscConfig+0x5ae>
 8003d34:	e02e      	b.n	8003d94 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e029      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_RCC_OscConfig+0x638>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d11c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d115      	bne.n	8003d90 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d10d      	bne.n	8003d90 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d106      	bne.n	8003d90 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	42470060 	.word	0x42470060

08003da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e174      	b.n	80040a6 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x24>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b0f      	cmp	r3, #15
 8003dca:	d904      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x2e>
 8003dcc:	f240 2151 	movw	r1, #593	; 0x251
 8003dd0:	487b      	ldr	r0, [pc, #492]	; (8003fc0 <HAL_RCC_ClockConfig+0x218>)
 8003dd2:	f7fc febe 	bl	8000b52 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d019      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x68>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d016      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x68>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d013      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x68>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d010      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x68>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d00d      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x68>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b05      	cmp	r3, #5
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x68>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b06      	cmp	r3, #6
 8003dfe:	d007      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x68>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b07      	cmp	r3, #7
 8003e04:	d004      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x68>
 8003e06:	f240 2152 	movw	r1, #594	; 0x252
 8003e0a:	486d      	ldr	r0, [pc, #436]	; (8003fc0 <HAL_RCC_ClockConfig+0x218>)
 8003e0c:	f7fc fea1 	bl	8000b52 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e10:	4b6c      	ldr	r3, [pc, #432]	; (8003fc4 <HAL_RCC_ClockConfig+0x21c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d90c      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b69      	ldr	r3, [pc, #420]	; (8003fc4 <HAL_RCC_ClockConfig+0x21c>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b67      	ldr	r3, [pc, #412]	; (8003fc4 <HAL_RCC_ClockConfig+0x21c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e136      	b.n	80040a6 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d049      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e50:	4b5d      	ldr	r3, [pc, #372]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a5c      	ldr	r2, [pc, #368]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003e56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e68:	4b57      	ldr	r3, [pc, #348]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4a56      	ldr	r2, [pc, #344]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003e6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d024      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x11e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d020      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x11e>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b90      	cmp	r3, #144	; 0x90
 8003e8a:	d01c      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x11e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2ba0      	cmp	r3, #160	; 0xa0
 8003e92:	d018      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x11e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2bb0      	cmp	r3, #176	; 0xb0
 8003e9a:	d014      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x11e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2bc0      	cmp	r3, #192	; 0xc0
 8003ea2:	d010      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x11e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2bd0      	cmp	r3, #208	; 0xd0
 8003eaa:	d00c      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x11e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2be0      	cmp	r3, #224	; 0xe0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x11e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2bf0      	cmp	r3, #240	; 0xf0
 8003eba:	d004      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x11e>
 8003ebc:	f240 2175 	movw	r1, #629	; 0x275
 8003ec0:	483f      	ldr	r0, [pc, #252]	; (8003fc0 <HAL_RCC_ClockConfig+0x218>)
 8003ec2:	f7fc fe46 	bl	8000b52 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec6:	4b40      	ldr	r3, [pc, #256]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	493d      	ldr	r1, [pc, #244]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d059      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d010      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x166>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d00c      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x166>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d008      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x166>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d004      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x166>
 8003f04:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8003f08:	482d      	ldr	r0, [pc, #180]	; (8003fc0 <HAL_RCC_ClockConfig+0x218>)
 8003f0a:	f7fc fe22 	bl	8000b52 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d107      	bne.n	8003f26 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	4b2c      	ldr	r3, [pc, #176]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d119      	bne.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e0bf      	b.n	80040a6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f36:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e0af      	b.n	80040a6 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0a7      	b.n	80040a6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f56:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f023 0203 	bic.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4919      	ldr	r1, [pc, #100]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f68:	f7fc fff0 	bl	8000f4c <HAL_GetTick>
 8003f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f70:	f7fc ffec 	bl	8000f4c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e08f      	b.n	80040a6 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 020c 	and.w	r2, r3, #12
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d1eb      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <HAL_RCC_ClockConfig+0x21c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d212      	bcs.n	8003fcc <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <HAL_RCC_ClockConfig+0x21c>)
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCC_ClockConfig+0x21c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d007      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e072      	b.n	80040a6 <HAL_RCC_ClockConfig+0x2fe>
 8003fc0:	08005c74 	.word	0x08005c74
 8003fc4:	40023c00 	.word	0x40023c00
 8003fc8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d025      	beq.n	8004024 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d018      	beq.n	8004012 <HAL_RCC_ClockConfig+0x26a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe8:	d013      	beq.n	8004012 <HAL_RCC_ClockConfig+0x26a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ff2:	d00e      	beq.n	8004012 <HAL_RCC_ClockConfig+0x26a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003ffc:	d009      	beq.n	8004012 <HAL_RCC_ClockConfig+0x26a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004006:	d004      	beq.n	8004012 <HAL_RCC_ClockConfig+0x26a>
 8004008:	f240 21ba 	movw	r1, #698	; 0x2ba
 800400c:	4828      	ldr	r0, [pc, #160]	; (80040b0 <HAL_RCC_ClockConfig+0x308>)
 800400e:	f7fc fda0 	bl	8000b52 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004012:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_RCC_ClockConfig+0x30c>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	4925      	ldr	r1, [pc, #148]	; (80040b4 <HAL_RCC_ClockConfig+0x30c>)
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d026      	beq.n	800407e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d018      	beq.n	800406a <HAL_RCC_ClockConfig+0x2c2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004040:	d013      	beq.n	800406a <HAL_RCC_ClockConfig+0x2c2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800404a:	d00e      	beq.n	800406a <HAL_RCC_ClockConfig+0x2c2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004054:	d009      	beq.n	800406a <HAL_RCC_ClockConfig+0x2c2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800405e:	d004      	beq.n	800406a <HAL_RCC_ClockConfig+0x2c2>
 8004060:	f240 21c1 	movw	r1, #705	; 0x2c1
 8004064:	4812      	ldr	r0, [pc, #72]	; (80040b0 <HAL_RCC_ClockConfig+0x308>)
 8004066:	f7fc fd74 	bl	8000b52 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <HAL_RCC_ClockConfig+0x30c>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	490e      	ldr	r1, [pc, #56]	; (80040b4 <HAL_RCC_ClockConfig+0x30c>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800407e:	f000 f821 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 8004082:	4601      	mov	r1, r0
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_RCC_ClockConfig+0x30c>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <HAL_RCC_ClockConfig+0x310>)
 8004090:	5cd3      	ldrb	r3, [r2, r3]
 8004092:	fa21 f303 	lsr.w	r3, r1, r3
 8004096:	4a09      	ldr	r2, [pc, #36]	; (80040bc <HAL_RCC_ClockConfig+0x314>)
 8004098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <HAL_RCC_ClockConfig+0x318>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc ff10 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	08005c74 	.word	0x08005c74
 80040b4:	40023800 	.word	0x40023800
 80040b8:	08005d5c 	.word	0x08005d5c
 80040bc:	20000000 	.word	0x20000000
 80040c0:	20000004 	.word	0x20000004

080040c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	2300      	movs	r3, #0
 80040d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040da:	4b63      	ldr	r3, [pc, #396]	; (8004268 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d007      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0x32>
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d008      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0x38>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f040 80b4 	bne.w	8004258 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040f0:	4b5e      	ldr	r3, [pc, #376]	; (800426c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040f2:	60bb      	str	r3, [r7, #8]
       break;
 80040f4:	e0b3      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040f6:	4b5e      	ldr	r3, [pc, #376]	; (8004270 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80040f8:	60bb      	str	r3, [r7, #8]
      break;
 80040fa:	e0b0      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040fc:	4b5a      	ldr	r3, [pc, #360]	; (8004268 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004104:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004106:	4b58      	ldr	r3, [pc, #352]	; (8004268 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d04a      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004112:	4b55      	ldr	r3, [pc, #340]	; (8004268 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	099b      	lsrs	r3, r3, #6
 8004118:	f04f 0400 	mov.w	r4, #0
 800411c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	ea03 0501 	and.w	r5, r3, r1
 8004128:	ea04 0602 	and.w	r6, r4, r2
 800412c:	4629      	mov	r1, r5
 800412e:	4632      	mov	r2, r6
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	f04f 0400 	mov.w	r4, #0
 8004138:	0154      	lsls	r4, r2, #5
 800413a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800413e:	014b      	lsls	r3, r1, #5
 8004140:	4619      	mov	r1, r3
 8004142:	4622      	mov	r2, r4
 8004144:	1b49      	subs	r1, r1, r5
 8004146:	eb62 0206 	sbc.w	r2, r2, r6
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	f04f 0400 	mov.w	r4, #0
 8004152:	0194      	lsls	r4, r2, #6
 8004154:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004158:	018b      	lsls	r3, r1, #6
 800415a:	1a5b      	subs	r3, r3, r1
 800415c:	eb64 0402 	sbc.w	r4, r4, r2
 8004160:	f04f 0100 	mov.w	r1, #0
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	00e2      	lsls	r2, r4, #3
 800416a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800416e:	00d9      	lsls	r1, r3, #3
 8004170:	460b      	mov	r3, r1
 8004172:	4614      	mov	r4, r2
 8004174:	195b      	adds	r3, r3, r5
 8004176:	eb44 0406 	adc.w	r4, r4, r6
 800417a:	f04f 0100 	mov.w	r1, #0
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	0262      	lsls	r2, r4, #9
 8004184:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004188:	0259      	lsls	r1, r3, #9
 800418a:	460b      	mov	r3, r1
 800418c:	4614      	mov	r4, r2
 800418e:	4618      	mov	r0, r3
 8004190:	4621      	mov	r1, r4
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f04f 0400 	mov.w	r4, #0
 8004198:	461a      	mov	r2, r3
 800419a:	4623      	mov	r3, r4
 800419c:	f7fc f81c 	bl	80001d8 <__aeabi_uldivmod>
 80041a0:	4603      	mov	r3, r0
 80041a2:	460c      	mov	r4, r1
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	e049      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a8:	4b2f      	ldr	r3, [pc, #188]	; (8004268 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	099b      	lsrs	r3, r3, #6
 80041ae:	f04f 0400 	mov.w	r4, #0
 80041b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	ea03 0501 	and.w	r5, r3, r1
 80041be:	ea04 0602 	and.w	r6, r4, r2
 80041c2:	4629      	mov	r1, r5
 80041c4:	4632      	mov	r2, r6
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	f04f 0400 	mov.w	r4, #0
 80041ce:	0154      	lsls	r4, r2, #5
 80041d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041d4:	014b      	lsls	r3, r1, #5
 80041d6:	4619      	mov	r1, r3
 80041d8:	4622      	mov	r2, r4
 80041da:	1b49      	subs	r1, r1, r5
 80041dc:	eb62 0206 	sbc.w	r2, r2, r6
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	f04f 0400 	mov.w	r4, #0
 80041e8:	0194      	lsls	r4, r2, #6
 80041ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041ee:	018b      	lsls	r3, r1, #6
 80041f0:	1a5b      	subs	r3, r3, r1
 80041f2:	eb64 0402 	sbc.w	r4, r4, r2
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	00e2      	lsls	r2, r4, #3
 8004200:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004204:	00d9      	lsls	r1, r3, #3
 8004206:	460b      	mov	r3, r1
 8004208:	4614      	mov	r4, r2
 800420a:	195b      	adds	r3, r3, r5
 800420c:	eb44 0406 	adc.w	r4, r4, r6
 8004210:	f04f 0100 	mov.w	r1, #0
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	02a2      	lsls	r2, r4, #10
 800421a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800421e:	0299      	lsls	r1, r3, #10
 8004220:	460b      	mov	r3, r1
 8004222:	4614      	mov	r4, r2
 8004224:	4618      	mov	r0, r3
 8004226:	4621      	mov	r1, r4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f04f 0400 	mov.w	r4, #0
 800422e:	461a      	mov	r2, r3
 8004230:	4623      	mov	r3, r4
 8004232:	f7fb ffd1 	bl	80001d8 <__aeabi_uldivmod>
 8004236:	4603      	mov	r3, r0
 8004238:	460c      	mov	r4, r1
 800423a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	3301      	adds	r3, #1
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	60bb      	str	r3, [r7, #8]
      break;
 8004256:	e002      	b.n	800425e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800425a:	60bb      	str	r3, [r7, #8]
      break;
 800425c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800425e:	68bb      	ldr	r3, [r7, #8]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004268:	40023800 	.word	0x40023800
 800426c:	00f42400 	.word	0x00f42400
 8004270:	007a1200 	.word	0x007a1200

08004274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004278:	4b03      	ldr	r3, [pc, #12]	; (8004288 <HAL_RCC_GetHCLKFreq+0x14>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000000 	.word	0x20000000

0800428c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004290:	f7ff fff0 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 8004294:	4601      	mov	r1, r0
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	0a9b      	lsrs	r3, r3, #10
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	4a03      	ldr	r2, [pc, #12]	; (80042b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a2:	5cd3      	ldrb	r3, [r2, r3]
 80042a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40023800 	.word	0x40023800
 80042b0:	08005d6c 	.word	0x08005d6c

080042b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042b8:	f7ff ffdc 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 80042bc:	4601      	mov	r1, r0
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0b5b      	lsrs	r3, r3, #13
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4a03      	ldr	r2, [pc, #12]	; (80042d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ca:	5cd3      	ldrb	r3, [r2, r3]
 80042cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800
 80042d8:	08005d6c 	.word	0x08005d6c

080042dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x20>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b0f      	cmp	r3, #15
 80042fa:	d904      	bls.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80042fc:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8004300:	489d      	ldr	r0, [pc, #628]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004302:	f7fc fc26 	bl	8000b52 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d105      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800431a:	2b00      	cmp	r3, #0
 800431c:	d060      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d903      	bls.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	2b07      	cmp	r3, #7
 800432c:	d904      	bls.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800432e:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8004332:	4891      	ldr	r0, [pc, #580]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004334:	f7fc fc0d 	bl	8000b52 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2bbf      	cmp	r3, #191	; 0xbf
 800433e:	d904      	bls.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004348:	d904      	bls.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800434a:	f640 11e1 	movw	r1, #2529	; 0x9e1
 800434e:	488a      	ldr	r0, [pc, #552]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004350:	f7fc fbff 	bl	8000b52 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d903      	bls.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b3f      	cmp	r3, #63	; 0x3f
 8004362:	d904      	bls.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004364:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8004368:	4883      	ldr	r0, [pc, #524]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800436a:	f7fc fbf2 	bl	8000b52 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800436e:	4b83      	ldr	r3, [pc, #524]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004374:	f7fc fdea 	bl	8000f4c <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800437c:	f7fc fde6 	bl	8000f4c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e1ae      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800438e:	4b7c      	ldr	r3, [pc, #496]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	019b      	lsls	r3, r3, #6
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	071b      	lsls	r3, r3, #28
 80043ac:	4974      	ldr	r1, [pc, #464]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043b4:	4b71      	ldr	r3, [pc, #452]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ba:	f7fc fdc7 	bl	8000f4c <HAL_GetTick>
 80043be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043c2:	f7fc fdc3 	bl	8000f4c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e18b      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d4:	4b6a      	ldr	r3, [pc, #424]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8174 	beq.w	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f6:	f000 80a6 	beq.w	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004402:	f000 80a0 	beq.w	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	4a5e      	ldr	r2, [pc, #376]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	f000 809a 	beq.w	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	4a5c      	ldr	r2, [pc, #368]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004418:	4293      	cmp	r3, r2
 800441a:	f000 8094 	beq.w	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	4a5a      	ldr	r2, [pc, #360]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	f000 808e 	beq.w	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	4a58      	ldr	r2, [pc, #352]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	f000 8088 	beq.w	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	4a56      	ldr	r2, [pc, #344]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	f000 8082 	beq.w	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	4a54      	ldr	r2, [pc, #336]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d07c      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	4a52      	ldr	r2, [pc, #328]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d077      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	4a51      	ldr	r2, [pc, #324]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d072      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	4a4f      	ldr	r2, [pc, #316]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d06d      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	4a4e      	ldr	r2, [pc, #312]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d068      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	4a4c      	ldr	r2, [pc, #304]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d063      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	4a4b      	ldr	r2, [pc, #300]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d05e      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	4a49      	ldr	r2, [pc, #292]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d059      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	4a48      	ldr	r2, [pc, #288]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d054      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	4a46      	ldr	r2, [pc, #280]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d04f      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	4a45      	ldr	r2, [pc, #276]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d04a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	4a43      	ldr	r2, [pc, #268]	; (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d045      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	4a42      	ldr	r2, [pc, #264]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d040      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	4a40      	ldr	r2, [pc, #256]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d03b      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	4a3f      	ldr	r2, [pc, #252]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d036      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	4a3d      	ldr	r2, [pc, #244]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d031      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	4a3c      	ldr	r2, [pc, #240]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d02c      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	4a3a      	ldr	r2, [pc, #232]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d027      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	4a39      	ldr	r2, [pc, #228]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d022      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	4a37      	ldr	r2, [pc, #220]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01d      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	4a36      	ldr	r2, [pc, #216]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	4a34      	ldr	r2, [pc, #208]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	4a33      	ldr	r2, [pc, #204]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	4a31      	ldr	r2, [pc, #196]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	4a30      	ldr	r2, [pc, #192]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800453c:	f640 2112 	movw	r1, #2578	; 0xa12
 8004540:	480d      	ldr	r0, [pc, #52]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004542:	f7fc fb06 	bl	8000b52 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	4a0c      	ldr	r2, [pc, #48]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004554:	6413      	str	r3, [r2, #64]	; 0x40
 8004556:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004562:	4b26      	ldr	r3, [pc, #152]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a25      	ldr	r2, [pc, #148]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800456e:	f7fc fced 	bl	8000f4c <HAL_GetTick>
 8004572:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004574:	e04d      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004576:	bf00      	nop
 8004578:	08005cac 	.word	0x08005cac
 800457c:	42470068 	.word	0x42470068
 8004580:	40023800 	.word	0x40023800
 8004584:	00020300 	.word	0x00020300
 8004588:	00030300 	.word	0x00030300
 800458c:	00040300 	.word	0x00040300
 8004590:	00050300 	.word	0x00050300
 8004594:	00060300 	.word	0x00060300
 8004598:	00070300 	.word	0x00070300
 800459c:	00080300 	.word	0x00080300
 80045a0:	00090300 	.word	0x00090300
 80045a4:	000a0300 	.word	0x000a0300
 80045a8:	000b0300 	.word	0x000b0300
 80045ac:	000c0300 	.word	0x000c0300
 80045b0:	000d0300 	.word	0x000d0300
 80045b4:	000e0300 	.word	0x000e0300
 80045b8:	000f0300 	.word	0x000f0300
 80045bc:	00100300 	.word	0x00100300
 80045c0:	00110300 	.word	0x00110300
 80045c4:	00120300 	.word	0x00120300
 80045c8:	00130300 	.word	0x00130300
 80045cc:	00140300 	.word	0x00140300
 80045d0:	00150300 	.word	0x00150300
 80045d4:	00160300 	.word	0x00160300
 80045d8:	00170300 	.word	0x00170300
 80045dc:	00180300 	.word	0x00180300
 80045e0:	00190300 	.word	0x00190300
 80045e4:	001a0300 	.word	0x001a0300
 80045e8:	001b0300 	.word	0x001b0300
 80045ec:	001c0300 	.word	0x001c0300
 80045f0:	001d0300 	.word	0x001d0300
 80045f4:	001e0300 	.word	0x001e0300
 80045f8:	001f0300 	.word	0x001f0300
 80045fc:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004600:	f7fc fca4 	bl	8000f4c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e06c      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004612:	4b38      	ldr	r3, [pc, #224]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800461e:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004626:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d02f      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	429a      	cmp	r2, r3
 800463a:	d028      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800463c:	4b2e      	ldr	r3, [pc, #184]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004644:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004646:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800464c:	4b2b      	ldr	r3, [pc, #172]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x420>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004652:	4a29      	ldr	r2, [pc, #164]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004658:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d114      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004664:	f7fc fc72 	bl	8000f4c <HAL_GetTick>
 8004668:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466a:	e00a      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f7fc fc6e 	bl	8000f4c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	; 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e034      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0ee      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800469a:	d10d      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 800469c:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b0:	4911      	ldr	r1, [pc, #68]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
 80046b6:	e005      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	4a0e      	ldr	r2, [pc, #56]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80046be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046c2:	6093      	str	r3, [r2, #8]
 80046c4:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80046c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d0:	4909      	ldr	r1, [pc, #36]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	7d1a      	ldrb	r2, [r3, #20]
 80046e6:	4b06      	ldr	r3, [pc, #24]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80046e8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40007000 	.word	0x40007000
 80046f8:	40023800 	.word	0x40023800
 80046fc:	42470e40 	.word	0x42470e40
 8004700:	424711e0 	.word	0x424711e0

08004704 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800470a:	f7fc fc1f 	bl	8000f4c <HAL_GetTick>
 800470e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004710:	4b5d      	ldr	r3, [pc, #372]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a5c      	ldr	r2, [pc, #368]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800471e:	f7fc fc15 	bl	8000f4c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e0a7      	b.n	8004880 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004730:	4b55      	ldr	r3, [pc, #340]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800473c:	4b52      	ldr	r3, [pc, #328]	; (8004888 <HAL_RCC_DeInit+0x184>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a51      	ldr	r2, [pc, #324]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004746:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004748:	f7fc fc00 	bl	8000f4c <HAL_GetTick>
 800474c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800474e:	4b4e      	ldr	r3, [pc, #312]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004750:	2200      	movs	r2, #0
 8004752:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004756:	f7fc fbf9 	bl	8000f4c <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e089      	b.n	8004880 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800476c:	4b46      	ldr	r3, [pc, #280]	; (8004888 <HAL_RCC_DeInit+0x184>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ee      	bne.n	8004756 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004778:	f7fc fbe8 	bl	8000f4c <HAL_GetTick>
 800477c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800477e:	4b42      	ldr	r3, [pc, #264]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a41      	ldr	r2, [pc, #260]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004784:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8004788:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fc fbde 	bl	8000f4c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e070      	b.n	8004880 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800479e:	4b3a      	ldr	r3, [pc, #232]	; (8004888 <HAL_RCC_DeInit+0x184>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80047aa:	f7fc fbcf 	bl	8000f4c <HAL_GetTick>
 80047ae:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80047b0:	4b35      	ldr	r3, [pc, #212]	; (8004888 <HAL_RCC_DeInit+0x184>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a34      	ldr	r2, [pc, #208]	; (8004888 <HAL_RCC_DeInit+0x184>)
 80047b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ba:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047be:	f7fc fbc5 	bl	8000f4c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e057      	b.n	8004880 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80047d0:	4b2d      	ldr	r3, [pc, #180]	; (8004888 <HAL_RCC_DeInit+0x184>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f0      	bne.n	80047be <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80047dc:	f7fc fbb6 	bl	8000f4c <HAL_GetTick>
 80047e0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80047e2:	4b29      	ldr	r3, [pc, #164]	; (8004888 <HAL_RCC_DeInit+0x184>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a28      	ldr	r2, [pc, #160]	; (8004888 <HAL_RCC_DeInit+0x184>)
 80047e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ec:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047f0:	f7fc fbac 	bl	8000f4c <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e03e      	b.n	8004880 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8004802:	4b21      	ldr	r3, [pc, #132]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800480e:	4b1e      	ldr	r3, [pc, #120]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004810:	4a1e      	ldr	r2, [pc, #120]	; (800488c <HAL_RCC_DeInit+0x188>)
 8004812:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8004814:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004816:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <HAL_RCC_DeInit+0x18c>)
 8004818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800481c:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <HAL_RCC_DeInit+0x184>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4a19      	ldr	r2, [pc, #100]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004822:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004826:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8004828:	4b17      	ldr	r3, [pc, #92]	; (8004888 <HAL_RCC_DeInit+0x184>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4a16      	ldr	r2, [pc, #88]	; (8004888 <HAL_RCC_DeInit+0x184>)
 800482e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004832:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8004834:	4b14      	ldr	r3, [pc, #80]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4a13      	ldr	r2, [pc, #76]	; (8004888 <HAL_RCC_DeInit+0x184>)
 800483a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800483e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a10      	ldr	r2, [pc, #64]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800484a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800484c:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <HAL_RCC_DeInit+0x184>)
 800484e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004850:	4a0d      	ldr	r2, [pc, #52]	; (8004888 <HAL_RCC_DeInit+0x184>)
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCC_DeInit+0x184>)
 800485a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485c:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <HAL_RCC_DeInit+0x184>)
 800485e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004862:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <HAL_RCC_DeInit+0x190>)
 8004866:	4a0c      	ldr	r2, [pc, #48]	; (8004898 <HAL_RCC_DeInit+0x194>)
 8004868:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800486a:	4b0c      	ldr	r3, [pc, #48]	; (800489c <HAL_RCC_DeInit+0x198>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc fb28 	bl	8000ec4 <HAL_InitTick>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800487e:	2300      	movs	r3, #0
  }
}
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40023800 	.word	0x40023800
 800488c:	04003010 	.word	0x04003010
 8004890:	20003010 	.word	0x20003010
 8004894:	20000000 	.word	0x20000000
 8004898:	00f42400 	.word	0x00f42400
 800489c:	20000004 	.word	0x20000004

080048a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e0d6      	b.n	8004a60 <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b40      	cmp	r3, #64	; 0x40
 80048b8:	d007      	beq.n	80048ca <HAL_RTC_Init+0x2a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_RTC_Init+0x2a>
 80048c2:	21ff      	movs	r1, #255	; 0xff
 80048c4:	4868      	ldr	r0, [pc, #416]	; (8004a68 <HAL_RTC_Init+0x1c8>)
 80048c6:	f7fc f944 	bl	8000b52 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b7f      	cmp	r3, #127	; 0x7f
 80048d0:	d904      	bls.n	80048dc <HAL_RTC_Init+0x3c>
 80048d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048d6:	4864      	ldr	r0, [pc, #400]	; (8004a68 <HAL_RTC_Init+0x1c8>)
 80048d8:	f7fc f93b 	bl	8000b52 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e4:	d304      	bcc.n	80048f0 <HAL_RTC_Init+0x50>
 80048e6:	f240 1101 	movw	r1, #257	; 0x101
 80048ea:	485f      	ldr	r0, [pc, #380]	; (8004a68 <HAL_RTC_Init+0x1c8>)
 80048ec:	f7fc f931 	bl	8000b52 <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d013      	beq.n	8004920 <HAL_RTC_Init+0x80>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004900:	d00e      	beq.n	8004920 <HAL_RTC_Init+0x80>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490a:	d009      	beq.n	8004920 <HAL_RTC_Init+0x80>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004914:	d004      	beq.n	8004920 <HAL_RTC_Init+0x80>
 8004916:	f44f 7181 	mov.w	r1, #258	; 0x102
 800491a:	4853      	ldr	r0, [pc, #332]	; (8004a68 <HAL_RTC_Init+0x1c8>)
 800491c:	f7fc f919 	bl	8000b52 <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d009      	beq.n	800493c <HAL_RTC_Init+0x9c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004930:	d004      	beq.n	800493c <HAL_RTC_Init+0x9c>
 8004932:	f240 1103 	movw	r1, #259	; 0x103
 8004936:	484c      	ldr	r0, [pc, #304]	; (8004a68 <HAL_RTC_Init+0x1c8>)
 8004938:	f7fc f90b 	bl	8000b52 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d009      	beq.n	8004958 <HAL_RTC_Init+0xb8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800494c:	d004      	beq.n	8004958 <HAL_RTC_Init+0xb8>
 800494e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004952:	4845      	ldr	r0, [pc, #276]	; (8004a68 <HAL_RTC_Init+0x1c8>)
 8004954:	f7fc f8fd 	bl	8000b52 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	7f5b      	ldrb	r3, [r3, #29]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7fc f957 	bl	8000c1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	22ca      	movs	r2, #202	; 0xca
 800497a:	625a      	str	r2, [r3, #36]	; 0x24
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2253      	movs	r2, #83	; 0x53
 8004982:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fbfd 	bl	8005184 <RTC_EnterInitMode>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	22ff      	movs	r2, #255	; 0xff
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2204      	movs	r2, #4
 800499c:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e05e      	b.n	8004a60 <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80049b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6899      	ldr	r1, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	68d2      	ldr	r2, [r2, #12]
 80049dc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6919      	ldr	r1, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	041a      	lsls	r2, r3, #16
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a00:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10e      	bne.n	8004a2e <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fb8f 	bl	8005134 <HAL_RTC_WaitForSynchro>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	22ff      	movs	r2, #255	; 0xff
 8004a22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2204      	movs	r2, #4
 8004a28:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e018      	b.n	8004a60 <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	22ff      	movs	r2, #255	; 0xff
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
  }
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	08005ce8 	.word	0x08005ce8

08004a6c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d007      	beq.n	8004a92 <HAL_RTC_SetTime+0x26>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d004      	beq.n	8004a92 <HAL_RTC_SetTime+0x26>
 8004a88:	f240 21da 	movw	r1, #730	; 0x2da
 8004a8c:	48a4      	ldr	r0, [pc, #656]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004a8e:	f7fc f860 	bl	8000b52 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a9a:	d00d      	beq.n	8004ab8 <HAL_RTC_SetTime+0x4c>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa4:	d008      	beq.n	8004ab8 <HAL_RTC_SetTime+0x4c>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d004      	beq.n	8004ab8 <HAL_RTC_SetTime+0x4c>
 8004aae:	f240 21db 	movw	r1, #731	; 0x2db
 8004ab2:	489b      	ldr	r0, [pc, #620]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004ab4:	f7fc f84d 	bl	8000b52 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d009      	beq.n	8004ad4 <HAL_RTC_SetTime+0x68>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ac8:	d004      	beq.n	8004ad4 <HAL_RTC_SetTime+0x68>
 8004aca:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8004ace:	4894      	ldr	r0, [pc, #592]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004ad0:	f7fc f83f 	bl	8000b52 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	7f1b      	ldrb	r3, [r3, #28]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_RTC_SetTime+0x74>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e12c      	b.n	8004d3a <HAL_RTC_SetTime+0x2ce>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d15c      	bne.n	8004bac <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01a      	beq.n	8004b36 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_RTC_SetTime+0xa4>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	d904      	bls.n	8004b1a <HAL_RTC_SetTime+0xae>
 8004b10:	f240 21e7 	movw	r1, #743	; 0x2e7
 8004b14:	4882      	ldr	r0, [pc, #520]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004b16:	f7fc f81c 	bl	8000b52 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	78db      	ldrb	r3, [r3, #3]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d015      	beq.n	8004b4e <HAL_RTC_SetTime+0xe2>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	78db      	ldrb	r3, [r3, #3]
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d011      	beq.n	8004b4e <HAL_RTC_SetTime+0xe2>
 8004b2a:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8004b2e:	487c      	ldr	r0, [pc, #496]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004b30:	f7fc f80f 	bl	8000b52 <assert_failed>
 8004b34:	e00b      	b.n	8004b4e <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b17      	cmp	r3, #23
 8004b42:	d904      	bls.n	8004b4e <HAL_RTC_SetTime+0xe2>
 8004b44:	f240 21ed 	movw	r1, #749	; 0x2ed
 8004b48:	4875      	ldr	r0, [pc, #468]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004b4a:	f7fc f802 	bl	8000b52 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	2b3b      	cmp	r3, #59	; 0x3b
 8004b54:	d904      	bls.n	8004b60 <HAL_RTC_SetTime+0xf4>
 8004b56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004b5a:	4871      	ldr	r0, [pc, #452]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004b5c:	f7fb fff9 	bl	8000b52 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	789b      	ldrb	r3, [r3, #2]
 8004b64:	2b3b      	cmp	r3, #59	; 0x3b
 8004b66:	d904      	bls.n	8004b72 <HAL_RTC_SetTime+0x106>
 8004b68:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8004b6c:	486c      	ldr	r0, [pc, #432]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004b6e:	f7fb fff0 	bl	8000b52 <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fb30 	bl	80051dc <RTC_ByteToBcd2>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fb29 	bl	80051dc <RTC_ByteToBcd2>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004b8e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	789b      	ldrb	r3, [r3, #2]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fb21 	bl	80051dc <RTC_ByteToBcd2>
 8004b9a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004b9c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	78db      	ldrb	r3, [r3, #3]
 8004ba4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	e062      	b.n	8004c72 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d022      	beq.n	8004c00 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fb2a 	bl	8005218 <RTC_Bcd2ToByte>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d007      	beq.n	8004bda <HAL_RTC_SetTime+0x16e>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fb22 	bl	8005218 <RTC_Bcd2ToByte>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	d904      	bls.n	8004be4 <HAL_RTC_SetTime+0x178>
 8004bda:	f240 21fb 	movw	r1, #763	; 0x2fb
 8004bde:	4850      	ldr	r0, [pc, #320]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004be0:	f7fb ffb7 	bl	8000b52 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	78db      	ldrb	r3, [r3, #3]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d019      	beq.n	8004c20 <HAL_RTC_SetTime+0x1b4>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	78db      	ldrb	r3, [r3, #3]
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d015      	beq.n	8004c20 <HAL_RTC_SetTime+0x1b4>
 8004bf4:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8004bf8:	4849      	ldr	r0, [pc, #292]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004bfa:	f7fb ffaa 	bl	8000b52 <assert_failed>
 8004bfe:	e00f      	b.n	8004c20 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2200      	movs	r2, #0
 8004c04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fb04 	bl	8005218 <RTC_Bcd2ToByte>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b17      	cmp	r3, #23
 8004c14:	d904      	bls.n	8004c20 <HAL_RTC_SetTime+0x1b4>
 8004c16:	f240 3101 	movw	r1, #769	; 0x301
 8004c1a:	4841      	ldr	r0, [pc, #260]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004c1c:	f7fb ff99 	bl	8000b52 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 faf7 	bl	8005218 <RTC_Bcd2ToByte>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b3b      	cmp	r3, #59	; 0x3b
 8004c2e:	d904      	bls.n	8004c3a <HAL_RTC_SetTime+0x1ce>
 8004c30:	f240 3103 	movw	r1, #771	; 0x303
 8004c34:	483a      	ldr	r0, [pc, #232]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004c36:	f7fb ff8c 	bl	8000b52 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	789b      	ldrb	r3, [r3, #2]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 faea 	bl	8005218 <RTC_Bcd2ToByte>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b3b      	cmp	r3, #59	; 0x3b
 8004c48:	d904      	bls.n	8004c54 <HAL_RTC_SetTime+0x1e8>
 8004c4a:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004c4e:	4834      	ldr	r0, [pc, #208]	; (8004d20 <HAL_RTC_SetTime+0x2b4>)
 8004c50:	f7fb ff7f 	bl	8000b52 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	785b      	ldrb	r3, [r3, #1]
 8004c5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c60:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c66:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	78db      	ldrb	r3, [r3, #3]
 8004c6c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	22ca      	movs	r2, #202	; 0xca
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2253      	movs	r2, #83	; 0x53
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fa7e 	bl	8005184 <RTC_EnterInitMode>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	22ff      	movs	r2, #255	; 0xff
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2204      	movs	r2, #4
 8004c9a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e049      	b.n	8004d3a <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004cb0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004cb4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cc4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6899      	ldr	r1, [r3, #8]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d113      	bne.n	8004d24 <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fa19 	bl	8005134 <HAL_RTC_WaitForSynchro>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00d      	beq.n	8004d24 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	22ff      	movs	r2, #255	; 0xff
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2204      	movs	r2, #4
 8004d14:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e00c      	b.n	8004d3a <HAL_RTC_SetTime+0x2ce>
 8004d20:	08005ce8 	.word	0x08005ce8
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	22ff      	movs	r2, #255	; 0xff
 8004d2a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004d38:	2300      	movs	r3, #0
  }
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd90      	pop	{r4, r7, pc}
 8004d42:	bf00      	nop

08004d44 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <HAL_RTC_GetTime+0x26>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d004      	beq.n	8004d6a <HAL_RTC_GetTime+0x26>
 8004d60:	f240 315d 	movw	r1, #861	; 0x35d
 8004d64:	482c      	ldr	r0, [pc, #176]	; (8004e18 <HAL_RTC_GetTime+0xd4>)
 8004d66:	f7fb fef4 	bl	8000b52 <assert_failed>

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d8c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d90:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	0c1b      	lsrs	r3, r3, #16
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	0a1b      	lsrs	r3, r3, #8
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	0c1b      	lsrs	r3, r3, #16
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d11a      	bne.n	8004e0c <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fa1c 	bl	8005218 <RTC_Bcd2ToByte>
 8004de0:	4603      	mov	r3, r0
 8004de2:	461a      	mov	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fa13 	bl	8005218 <RTC_Bcd2ToByte>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	789b      	ldrb	r3, [r3, #2]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fa0a 	bl	8005218 <RTC_Bcd2ToByte>
 8004e04:	4603      	mov	r3, r0
 8004e06:	461a      	mov	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	08005ce8 	.word	0x08005ce8

08004e1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <HAL_RTC_SetDate+0x26>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d004      	beq.n	8004e42 <HAL_RTC_SetDate+0x26>
 8004e38:	f240 318a 	movw	r1, #906	; 0x38a
 8004e3c:	488e      	ldr	r0, [pc, #568]	; (8005078 <HAL_RTC_SetDate+0x25c>)
 8004e3e:	f7fb fe88 	bl	8000b52 <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	7f1b      	ldrb	r3, [r3, #28]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_RTC_SetDate+0x32>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e10f      	b.n	800506e <HAL_RTC_SetDate+0x252>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2202      	movs	r2, #2
 8004e58:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10e      	bne.n	8004e7e <HAL_RTC_SetDate+0x62>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	f023 0310 	bic.w	r3, r3, #16
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	330a      	adds	r3, #10
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d01c      	beq.n	8004ec0 <HAL_RTC_SetDate+0xa4>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d018      	beq.n	8004ec0 <HAL_RTC_SetDate+0xa4>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d014      	beq.n	8004ec0 <HAL_RTC_SetDate+0xa4>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d010      	beq.n	8004ec0 <HAL_RTC_SetDate+0xa4>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d00c      	beq.n	8004ec0 <HAL_RTC_SetDate+0xa4>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b06      	cmp	r3, #6
 8004eac:	d008      	beq.n	8004ec0 <HAL_RTC_SetDate+0xa4>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b07      	cmp	r3, #7
 8004eb4:	d004      	beq.n	8004ec0 <HAL_RTC_SetDate+0xa4>
 8004eb6:	f240 3196 	movw	r1, #918	; 0x396
 8004eba:	486f      	ldr	r0, [pc, #444]	; (8005078 <HAL_RTC_SetDate+0x25c>)
 8004ebc:	f7fb fe49 	bl	8000b52 <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d13f      	bne.n	8004f46 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	2b63      	cmp	r3, #99	; 0x63
 8004ecc:	d904      	bls.n	8004ed8 <HAL_RTC_SetDate+0xbc>
 8004ece:	f240 319a 	movw	r1, #922	; 0x39a
 8004ed2:	4869      	ldr	r0, [pc, #420]	; (8005078 <HAL_RTC_SetDate+0x25c>)
 8004ed4:	f7fb fe3d 	bl	8000b52 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_RTC_SetDate+0xcc>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d904      	bls.n	8004ef2 <HAL_RTC_SetDate+0xd6>
 8004ee8:	f240 319b 	movw	r1, #923	; 0x39b
 8004eec:	4862      	ldr	r0, [pc, #392]	; (8005078 <HAL_RTC_SetDate+0x25c>)
 8004eee:	f7fb fe30 	bl	8000b52 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	789b      	ldrb	r3, [r3, #2]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_RTC_SetDate+0xe6>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	789b      	ldrb	r3, [r3, #2]
 8004efe:	2b1f      	cmp	r3, #31
 8004f00:	d904      	bls.n	8004f0c <HAL_RTC_SetDate+0xf0>
 8004f02:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004f06:	485c      	ldr	r0, [pc, #368]	; (8005078 <HAL_RTC_SetDate+0x25c>)
 8004f08:	f7fb fe23 	bl	8000b52 <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	78db      	ldrb	r3, [r3, #3]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f963 	bl	80051dc <RTC_ByteToBcd2>
 8004f16:	4603      	mov	r3, r0
 8004f18:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f95c 	bl	80051dc <RTC_ByteToBcd2>
 8004f24:	4603      	mov	r3, r0
 8004f26:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f28:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	789b      	ldrb	r3, [r3, #2]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f954 	bl	80051dc <RTC_ByteToBcd2>
 8004f34:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f36:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e045      	b.n	8004fd2 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	78db      	ldrb	r3, [r3, #3]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 f964 	bl	8005218 <RTC_Bcd2ToByte>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b63      	cmp	r3, #99	; 0x63
 8004f54:	d904      	bls.n	8004f60 <HAL_RTC_SetDate+0x144>
 8004f56:	f240 31a5 	movw	r1, #933	; 0x3a5
 8004f5a:	4847      	ldr	r0, [pc, #284]	; (8005078 <HAL_RTC_SetDate+0x25c>)
 8004f5c:	f7fb fdf9 	bl	8000b52 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	785b      	ldrb	r3, [r3, #1]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 f957 	bl	8005218 <RTC_Bcd2ToByte>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <HAL_RTC_SetDate+0x164>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 f94f 	bl	8005218 <RTC_Bcd2ToByte>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d904      	bls.n	8004f8a <HAL_RTC_SetDate+0x16e>
 8004f80:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004f84:	483c      	ldr	r0, [pc, #240]	; (8005078 <HAL_RTC_SetDate+0x25c>)
 8004f86:	f7fb fde4 	bl	8000b52 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	789b      	ldrb	r3, [r3, #2]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f942 	bl	8005218 <RTC_Bcd2ToByte>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <HAL_RTC_SetDate+0x18e>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	789b      	ldrb	r3, [r3, #2]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f93a 	bl	8005218 <RTC_Bcd2ToByte>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b1f      	cmp	r3, #31
 8004fa8:	d904      	bls.n	8004fb4 <HAL_RTC_SetDate+0x198>
 8004faa:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004fae:	4832      	ldr	r0, [pc, #200]	; (8005078 <HAL_RTC_SetDate+0x25c>)
 8004fb0:	f7fb fdcf 	bl	8000b52 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	78db      	ldrb	r3, [r3, #3]
 8004fb8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	785b      	ldrb	r3, [r3, #1]
 8004fbe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004fc0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004fc6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	22ca      	movs	r2, #202	; 0xca
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2253      	movs	r2, #83	; 0x53
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f8ce 	bl	8005184 <RTC_EnterInitMode>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	22ff      	movs	r2, #255	; 0xff
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e033      	b.n	800506e <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005010:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005014:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005024:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d111      	bne.n	8005058 <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f87d 	bl	8005134 <HAL_RTC_WaitForSynchro>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	22ff      	movs	r2, #255	; 0xff
 8005046:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2204      	movs	r2, #4
 800504c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e00a      	b.n	800506e <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	22ff      	movs	r2, #255	; 0xff
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800506c:	2300      	movs	r3, #0
  }
}
 800506e:	4618      	mov	r0, r3
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	bd90      	pop	{r4, r7, pc}
 8005076:	bf00      	nop
 8005078:	08005ce8 	.word	0x08005ce8

0800507c <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <HAL_RTC_GetDate+0x26>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d004      	beq.n	80050a2 <HAL_RTC_GetDate+0x26>
 8005098:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800509c:	4824      	ldr	r0, [pc, #144]	; (8005130 <HAL_RTC_GetDate+0xb4>)
 800509e:	f7fb fd58 	bl	8000b52 <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050b0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	0c1b      	lsrs	r3, r3, #16
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	0b5b      	lsrs	r3, r3, #13
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d11a      	bne.n	8005126 <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	78db      	ldrb	r3, [r3, #3]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 f88f 	bl	8005218 <RTC_Bcd2ToByte>
 80050fa:	4603      	mov	r3, r0
 80050fc:	461a      	mov	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	785b      	ldrb	r3, [r3, #1]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f886 	bl	8005218 <RTC_Bcd2ToByte>
 800510c:	4603      	mov	r3, r0
 800510e:	461a      	mov	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	789b      	ldrb	r3, [r3, #2]
 8005118:	4618      	mov	r0, r3
 800511a:	f000 f87d 	bl	8005218 <RTC_Bcd2ToByte>
 800511e:	4603      	mov	r3, r0
 8005120:	461a      	mov	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	08005ce8 	.word	0x08005ce8

08005134 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800514e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005150:	f7fb fefc 	bl	8000f4c <HAL_GetTick>
 8005154:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005156:	e009      	b.n	800516c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005158:	f7fb fef8 	bl	8000f4c <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005166:	d901      	bls.n	800516c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e007      	b.n	800517c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0ee      	beq.n	8005158 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d119      	bne.n	80051d2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051a8:	f7fb fed0 	bl	8000f4c <HAL_GetTick>
 80051ac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051ae:	e009      	b.n	80051c4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051b0:	f7fb fecc 	bl	8000f4c <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051be:	d901      	bls.n	80051c4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e007      	b.n	80051d4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0ee      	beq.n	80051b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80051ea:	e005      	b.n	80051f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3301      	adds	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	3b0a      	subs	r3, #10
 80051f6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	2b09      	cmp	r3, #9
 80051fc:	d8f6      	bhi.n	80051ec <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	b2da      	uxtb	r2, r3
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	4313      	orrs	r3, r2
 800520a:	b2db      	uxtb	r3, r3
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	b2db      	uxtb	r3, r3
 800522c:	461a      	mov	r2, r3
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	4413      	add	r3, r2
 8005246:	b2db      	uxtb	r3, r3
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e0a0      	b.n	80053a8 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d02c      	beq.n	80052c8 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a4f      	ldr	r2, [pc, #316]	; (80053b0 <HAL_UART_Init+0x15c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00e      	beq.n	8005296 <HAL_UART_Init+0x42>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a4d      	ldr	r2, [pc, #308]	; (80053b4 <HAL_UART_Init+0x160>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d009      	beq.n	8005296 <HAL_UART_Init+0x42>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a4c      	ldr	r2, [pc, #304]	; (80053b8 <HAL_UART_Init+0x164>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d004      	beq.n	8005296 <HAL_UART_Init+0x42>
 800528c:	f240 114b 	movw	r1, #331	; 0x14b
 8005290:	484a      	ldr	r0, [pc, #296]	; (80053bc <HAL_UART_Init+0x168>)
 8005292:	f7fb fc5e 	bl	8000b52 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d028      	beq.n	80052f0 <HAL_UART_Init+0x9c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a6:	d023      	beq.n	80052f0 <HAL_UART_Init+0x9c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b0:	d01e      	beq.n	80052f0 <HAL_UART_Init+0x9c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ba:	d019      	beq.n	80052f0 <HAL_UART_Init+0x9c>
 80052bc:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80052c0:	483e      	ldr	r0, [pc, #248]	; (80053bc <HAL_UART_Init+0x168>)
 80052c2:	f7fb fc46 	bl	8000b52 <assert_failed>
 80052c6:	e013      	b.n	80052f0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a38      	ldr	r2, [pc, #224]	; (80053b0 <HAL_UART_Init+0x15c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00e      	beq.n	80052f0 <HAL_UART_Init+0x9c>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a37      	ldr	r2, [pc, #220]	; (80053b4 <HAL_UART_Init+0x160>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_UART_Init+0x9c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a35      	ldr	r2, [pc, #212]	; (80053b8 <HAL_UART_Init+0x164>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_UART_Init+0x9c>
 80052e6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80052ea:	4834      	ldr	r0, [pc, #208]	; (80053bc <HAL_UART_Init+0x168>)
 80052ec:	f7fb fc31 	bl	8000b52 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d009      	beq.n	800530c <HAL_UART_Init+0xb8>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005300:	d004      	beq.n	800530c <HAL_UART_Init+0xb8>
 8005302:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8005306:	482d      	ldr	r0, [pc, #180]	; (80053bc <HAL_UART_Init+0x168>)
 8005308:	f7fb fc23 	bl	8000b52 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d009      	beq.n	8005328 <HAL_UART_Init+0xd4>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531c:	d004      	beq.n	8005328 <HAL_UART_Init+0xd4>
 800531e:	f240 1153 	movw	r1, #339	; 0x153
 8005322:	4826      	ldr	r0, [pc, #152]	; (80053bc <HAL_UART_Init+0x168>)
 8005324:	f7fb fc15 	bl	8000b52 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7fb fd2d 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2224      	movs	r2, #36	; 0x24
 8005346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005358:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f830 	bl	80053c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800536e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800537e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800538e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40011000 	.word	0x40011000
 80053b4:	40004400 	.word	0x40004400
 80053b8:	40011400 	.word	0x40011400
 80053bc:	08005d20 	.word	0x08005d20

080053c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	4a9a      	ldr	r2, [pc, #616]	; (8005638 <UART_SetConfig+0x278>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d904      	bls.n	80053de <UART_SetConfig+0x1e>
 80053d4:	f640 31fb 	movw	r1, #3067	; 0xbfb
 80053d8:	4898      	ldr	r0, [pc, #608]	; (800563c <UART_SetConfig+0x27c>)
 80053da:	f7fb fbba 	bl	8000b52 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <UART_SetConfig+0x3a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ee:	d004      	beq.n	80053fa <UART_SetConfig+0x3a>
 80053f0:	f640 31fc 	movw	r1, #3068	; 0xbfc
 80053f4:	4891      	ldr	r0, [pc, #580]	; (800563c <UART_SetConfig+0x27c>)
 80053f6:	f7fb fbac 	bl	8000b52 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00e      	beq.n	8005420 <UART_SetConfig+0x60>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540a:	d009      	beq.n	8005420 <UART_SetConfig+0x60>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005414:	d004      	beq.n	8005420 <UART_SetConfig+0x60>
 8005416:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800541a:	4888      	ldr	r0, [pc, #544]	; (800563c <UART_SetConfig+0x27c>)
 800541c:	f7fb fb99 	bl	8000b52 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8005428:	4013      	ands	r3, r2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d103      	bne.n	8005436 <UART_SetConfig+0x76>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <UART_SetConfig+0x80>
 8005436:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800543a:	4880      	ldr	r0, [pc, #512]	; (800563c <UART_SetConfig+0x27c>)
 800543c:	f7fb fb89 	bl	8000b52 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005478:	f023 030c 	bic.w	r3, r3, #12
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	68f9      	ldr	r1, [r7, #12]
 8005482:	430b      	orrs	r3, r1
 8005484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699a      	ldr	r2, [r3, #24]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a4:	f040 818f 	bne.w	80057c6 <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a64      	ldr	r2, [pc, #400]	; (8005640 <UART_SetConfig+0x280>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d005      	beq.n	80054be <UART_SetConfig+0xfe>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a63      	ldr	r2, [pc, #396]	; (8005644 <UART_SetConfig+0x284>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	f040 80c7 	bne.w	800564c <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054be:	f7fe fef9 	bl	80042b4 <HAL_RCC_GetPCLK2Freq>
 80054c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	461d      	mov	r5, r3
 80054c8:	f04f 0600 	mov.w	r6, #0
 80054cc:	46a8      	mov	r8, r5
 80054ce:	46b1      	mov	r9, r6
 80054d0:	eb18 0308 	adds.w	r3, r8, r8
 80054d4:	eb49 0409 	adc.w	r4, r9, r9
 80054d8:	4698      	mov	r8, r3
 80054da:	46a1      	mov	r9, r4
 80054dc:	eb18 0805 	adds.w	r8, r8, r5
 80054e0:	eb49 0906 	adc.w	r9, r9, r6
 80054e4:	f04f 0100 	mov.w	r1, #0
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054f8:	4688      	mov	r8, r1
 80054fa:	4691      	mov	r9, r2
 80054fc:	eb18 0005 	adds.w	r0, r8, r5
 8005500:	eb49 0106 	adc.w	r1, r9, r6
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	461d      	mov	r5, r3
 800550a:	f04f 0600 	mov.w	r6, #0
 800550e:	196b      	adds	r3, r5, r5
 8005510:	eb46 0406 	adc.w	r4, r6, r6
 8005514:	461a      	mov	r2, r3
 8005516:	4623      	mov	r3, r4
 8005518:	f7fa fe5e 	bl	80001d8 <__aeabi_uldivmod>
 800551c:	4603      	mov	r3, r0
 800551e:	460c      	mov	r4, r1
 8005520:	461a      	mov	r2, r3
 8005522:	4b49      	ldr	r3, [pc, #292]	; (8005648 <UART_SetConfig+0x288>)
 8005524:	fba3 2302 	umull	r2, r3, r3, r2
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	461d      	mov	r5, r3
 8005532:	f04f 0600 	mov.w	r6, #0
 8005536:	46a9      	mov	r9, r5
 8005538:	46b2      	mov	sl, r6
 800553a:	eb19 0309 	adds.w	r3, r9, r9
 800553e:	eb4a 040a 	adc.w	r4, sl, sl
 8005542:	4699      	mov	r9, r3
 8005544:	46a2      	mov	sl, r4
 8005546:	eb19 0905 	adds.w	r9, r9, r5
 800554a:	eb4a 0a06 	adc.w	sl, sl, r6
 800554e:	f04f 0100 	mov.w	r1, #0
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800555a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800555e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005562:	4689      	mov	r9, r1
 8005564:	4692      	mov	sl, r2
 8005566:	eb19 0005 	adds.w	r0, r9, r5
 800556a:	eb4a 0106 	adc.w	r1, sl, r6
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	461d      	mov	r5, r3
 8005574:	f04f 0600 	mov.w	r6, #0
 8005578:	196b      	adds	r3, r5, r5
 800557a:	eb46 0406 	adc.w	r4, r6, r6
 800557e:	461a      	mov	r2, r3
 8005580:	4623      	mov	r3, r4
 8005582:	f7fa fe29 	bl	80001d8 <__aeabi_uldivmod>
 8005586:	4603      	mov	r3, r0
 8005588:	460c      	mov	r4, r1
 800558a:	461a      	mov	r2, r3
 800558c:	4b2e      	ldr	r3, [pc, #184]	; (8005648 <UART_SetConfig+0x288>)
 800558e:	fba3 1302 	umull	r1, r3, r3, r2
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	2164      	movs	r1, #100	; 0x64
 8005596:	fb01 f303 	mul.w	r3, r1, r3
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	3332      	adds	r3, #50	; 0x32
 80055a0:	4a29      	ldr	r2, [pc, #164]	; (8005648 <UART_SetConfig+0x288>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055ae:	4498      	add	r8, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	461d      	mov	r5, r3
 80055b4:	f04f 0600 	mov.w	r6, #0
 80055b8:	46a9      	mov	r9, r5
 80055ba:	46b2      	mov	sl, r6
 80055bc:	eb19 0309 	adds.w	r3, r9, r9
 80055c0:	eb4a 040a 	adc.w	r4, sl, sl
 80055c4:	4699      	mov	r9, r3
 80055c6:	46a2      	mov	sl, r4
 80055c8:	eb19 0905 	adds.w	r9, r9, r5
 80055cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80055d0:	f04f 0100 	mov.w	r1, #0
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055e4:	4689      	mov	r9, r1
 80055e6:	4692      	mov	sl, r2
 80055e8:	eb19 0005 	adds.w	r0, r9, r5
 80055ec:	eb4a 0106 	adc.w	r1, sl, r6
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	461d      	mov	r5, r3
 80055f6:	f04f 0600 	mov.w	r6, #0
 80055fa:	196b      	adds	r3, r5, r5
 80055fc:	eb46 0406 	adc.w	r4, r6, r6
 8005600:	461a      	mov	r2, r3
 8005602:	4623      	mov	r3, r4
 8005604:	f7fa fde8 	bl	80001d8 <__aeabi_uldivmod>
 8005608:	4603      	mov	r3, r0
 800560a:	460c      	mov	r4, r1
 800560c:	461a      	mov	r2, r3
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <UART_SetConfig+0x288>)
 8005610:	fba3 1302 	umull	r1, r3, r3, r2
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	2164      	movs	r1, #100	; 0x64
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	3332      	adds	r3, #50	; 0x32
 8005622:	4a09      	ldr	r2, [pc, #36]	; (8005648 <UART_SetConfig+0x288>)
 8005624:	fba2 2303 	umull	r2, r3, r2, r3
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	f003 0207 	and.w	r2, r3, #7
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4442      	add	r2, r8
 8005634:	609a      	str	r2, [r3, #8]
 8005636:	e27a      	b.n	8005b2e <UART_SetConfig+0x76e>
 8005638:	00a037a0 	.word	0x00a037a0
 800563c:	08005d20 	.word	0x08005d20
 8005640:	40011000 	.word	0x40011000
 8005644:	40011400 	.word	0x40011400
 8005648:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800564c:	f7fe fe1e 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 8005650:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	461d      	mov	r5, r3
 8005656:	f04f 0600 	mov.w	r6, #0
 800565a:	46a8      	mov	r8, r5
 800565c:	46b1      	mov	r9, r6
 800565e:	eb18 0308 	adds.w	r3, r8, r8
 8005662:	eb49 0409 	adc.w	r4, r9, r9
 8005666:	4698      	mov	r8, r3
 8005668:	46a1      	mov	r9, r4
 800566a:	eb18 0805 	adds.w	r8, r8, r5
 800566e:	eb49 0906 	adc.w	r9, r9, r6
 8005672:	f04f 0100 	mov.w	r1, #0
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800567e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005682:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005686:	4688      	mov	r8, r1
 8005688:	4691      	mov	r9, r2
 800568a:	eb18 0005 	adds.w	r0, r8, r5
 800568e:	eb49 0106 	adc.w	r1, r9, r6
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	461d      	mov	r5, r3
 8005698:	f04f 0600 	mov.w	r6, #0
 800569c:	196b      	adds	r3, r5, r5
 800569e:	eb46 0406 	adc.w	r4, r6, r6
 80056a2:	461a      	mov	r2, r3
 80056a4:	4623      	mov	r3, r4
 80056a6:	f7fa fd97 	bl	80001d8 <__aeabi_uldivmod>
 80056aa:	4603      	mov	r3, r0
 80056ac:	460c      	mov	r4, r1
 80056ae:	461a      	mov	r2, r3
 80056b0:	4bb3      	ldr	r3, [pc, #716]	; (8005980 <UART_SetConfig+0x5c0>)
 80056b2:	fba3 2302 	umull	r2, r3, r3, r2
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	461d      	mov	r5, r3
 80056c0:	f04f 0600 	mov.w	r6, #0
 80056c4:	46a9      	mov	r9, r5
 80056c6:	46b2      	mov	sl, r6
 80056c8:	eb19 0309 	adds.w	r3, r9, r9
 80056cc:	eb4a 040a 	adc.w	r4, sl, sl
 80056d0:	4699      	mov	r9, r3
 80056d2:	46a2      	mov	sl, r4
 80056d4:	eb19 0905 	adds.w	r9, r9, r5
 80056d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80056dc:	f04f 0100 	mov.w	r1, #0
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056f0:	4689      	mov	r9, r1
 80056f2:	4692      	mov	sl, r2
 80056f4:	eb19 0005 	adds.w	r0, r9, r5
 80056f8:	eb4a 0106 	adc.w	r1, sl, r6
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	461d      	mov	r5, r3
 8005702:	f04f 0600 	mov.w	r6, #0
 8005706:	196b      	adds	r3, r5, r5
 8005708:	eb46 0406 	adc.w	r4, r6, r6
 800570c:	461a      	mov	r2, r3
 800570e:	4623      	mov	r3, r4
 8005710:	f7fa fd62 	bl	80001d8 <__aeabi_uldivmod>
 8005714:	4603      	mov	r3, r0
 8005716:	460c      	mov	r4, r1
 8005718:	461a      	mov	r2, r3
 800571a:	4b99      	ldr	r3, [pc, #612]	; (8005980 <UART_SetConfig+0x5c0>)
 800571c:	fba3 1302 	umull	r1, r3, r3, r2
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	2164      	movs	r1, #100	; 0x64
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	3332      	adds	r3, #50	; 0x32
 800572e:	4a94      	ldr	r2, [pc, #592]	; (8005980 <UART_SetConfig+0x5c0>)
 8005730:	fba2 2303 	umull	r2, r3, r2, r3
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800573c:	4498      	add	r8, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	461d      	mov	r5, r3
 8005742:	f04f 0600 	mov.w	r6, #0
 8005746:	46a9      	mov	r9, r5
 8005748:	46b2      	mov	sl, r6
 800574a:	eb19 0309 	adds.w	r3, r9, r9
 800574e:	eb4a 040a 	adc.w	r4, sl, sl
 8005752:	4699      	mov	r9, r3
 8005754:	46a2      	mov	sl, r4
 8005756:	eb19 0905 	adds.w	r9, r9, r5
 800575a:	eb4a 0a06 	adc.w	sl, sl, r6
 800575e:	f04f 0100 	mov.w	r1, #0
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800576a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800576e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005772:	4689      	mov	r9, r1
 8005774:	4692      	mov	sl, r2
 8005776:	eb19 0005 	adds.w	r0, r9, r5
 800577a:	eb4a 0106 	adc.w	r1, sl, r6
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	461d      	mov	r5, r3
 8005784:	f04f 0600 	mov.w	r6, #0
 8005788:	196b      	adds	r3, r5, r5
 800578a:	eb46 0406 	adc.w	r4, r6, r6
 800578e:	461a      	mov	r2, r3
 8005790:	4623      	mov	r3, r4
 8005792:	f7fa fd21 	bl	80001d8 <__aeabi_uldivmod>
 8005796:	4603      	mov	r3, r0
 8005798:	460c      	mov	r4, r1
 800579a:	461a      	mov	r2, r3
 800579c:	4b78      	ldr	r3, [pc, #480]	; (8005980 <UART_SetConfig+0x5c0>)
 800579e:	fba3 1302 	umull	r1, r3, r3, r2
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	2164      	movs	r1, #100	; 0x64
 80057a6:	fb01 f303 	mul.w	r3, r1, r3
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	3332      	adds	r3, #50	; 0x32
 80057b0:	4a73      	ldr	r2, [pc, #460]	; (8005980 <UART_SetConfig+0x5c0>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	f003 0207 	and.w	r2, r3, #7
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4442      	add	r2, r8
 80057c2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80057c4:	e1b3      	b.n	8005b2e <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a6e      	ldr	r2, [pc, #440]	; (8005984 <UART_SetConfig+0x5c4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d005      	beq.n	80057dc <UART_SetConfig+0x41c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a6c      	ldr	r2, [pc, #432]	; (8005988 <UART_SetConfig+0x5c8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	f040 80d8 	bne.w	800598c <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 80057dc:	f7fe fd6a 	bl	80042b4 <HAL_RCC_GetPCLK2Freq>
 80057e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	469a      	mov	sl, r3
 80057e6:	f04f 0b00 	mov.w	fp, #0
 80057ea:	46d0      	mov	r8, sl
 80057ec:	46d9      	mov	r9, fp
 80057ee:	eb18 0308 	adds.w	r3, r8, r8
 80057f2:	eb49 0409 	adc.w	r4, r9, r9
 80057f6:	4698      	mov	r8, r3
 80057f8:	46a1      	mov	r9, r4
 80057fa:	eb18 080a 	adds.w	r8, r8, sl
 80057fe:	eb49 090b 	adc.w	r9, r9, fp
 8005802:	f04f 0100 	mov.w	r1, #0
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800580e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005812:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005816:	4688      	mov	r8, r1
 8005818:	4691      	mov	r9, r2
 800581a:	eb1a 0508 	adds.w	r5, sl, r8
 800581e:	eb4b 0609 	adc.w	r6, fp, r9
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	4619      	mov	r1, r3
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	f04f 0400 	mov.w	r4, #0
 8005834:	0094      	lsls	r4, r2, #2
 8005836:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800583a:	008b      	lsls	r3, r1, #2
 800583c:	461a      	mov	r2, r3
 800583e:	4623      	mov	r3, r4
 8005840:	4628      	mov	r0, r5
 8005842:	4631      	mov	r1, r6
 8005844:	f7fa fcc8 	bl	80001d8 <__aeabi_uldivmod>
 8005848:	4603      	mov	r3, r0
 800584a:	460c      	mov	r4, r1
 800584c:	461a      	mov	r2, r3
 800584e:	4b4c      	ldr	r3, [pc, #304]	; (8005980 <UART_SetConfig+0x5c0>)
 8005850:	fba3 2302 	umull	r2, r3, r3, r2
 8005854:	095b      	lsrs	r3, r3, #5
 8005856:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	469b      	mov	fp, r3
 800585e:	f04f 0c00 	mov.w	ip, #0
 8005862:	46d9      	mov	r9, fp
 8005864:	46e2      	mov	sl, ip
 8005866:	eb19 0309 	adds.w	r3, r9, r9
 800586a:	eb4a 040a 	adc.w	r4, sl, sl
 800586e:	4699      	mov	r9, r3
 8005870:	46a2      	mov	sl, r4
 8005872:	eb19 090b 	adds.w	r9, r9, fp
 8005876:	eb4a 0a0c 	adc.w	sl, sl, ip
 800587a:	f04f 0100 	mov.w	r1, #0
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005886:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800588a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800588e:	4689      	mov	r9, r1
 8005890:	4692      	mov	sl, r2
 8005892:	eb1b 0509 	adds.w	r5, fp, r9
 8005896:	eb4c 060a 	adc.w	r6, ip, sl
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4619      	mov	r1, r3
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	f04f 0400 	mov.w	r4, #0
 80058ac:	0094      	lsls	r4, r2, #2
 80058ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058b2:	008b      	lsls	r3, r1, #2
 80058b4:	461a      	mov	r2, r3
 80058b6:	4623      	mov	r3, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	4631      	mov	r1, r6
 80058bc:	f7fa fc8c 	bl	80001d8 <__aeabi_uldivmod>
 80058c0:	4603      	mov	r3, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	461a      	mov	r2, r3
 80058c6:	4b2e      	ldr	r3, [pc, #184]	; (8005980 <UART_SetConfig+0x5c0>)
 80058c8:	fba3 1302 	umull	r1, r3, r3, r2
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	2164      	movs	r1, #100	; 0x64
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	3332      	adds	r3, #50	; 0x32
 80058da:	4a29      	ldr	r2, [pc, #164]	; (8005980 <UART_SetConfig+0x5c0>)
 80058dc:	fba2 2303 	umull	r2, r3, r2, r3
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058e6:	4498      	add	r8, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	469b      	mov	fp, r3
 80058ec:	f04f 0c00 	mov.w	ip, #0
 80058f0:	46d9      	mov	r9, fp
 80058f2:	46e2      	mov	sl, ip
 80058f4:	eb19 0309 	adds.w	r3, r9, r9
 80058f8:	eb4a 040a 	adc.w	r4, sl, sl
 80058fc:	4699      	mov	r9, r3
 80058fe:	46a2      	mov	sl, r4
 8005900:	eb19 090b 	adds.w	r9, r9, fp
 8005904:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005908:	f04f 0100 	mov.w	r1, #0
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005914:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005918:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800591c:	4689      	mov	r9, r1
 800591e:	4692      	mov	sl, r2
 8005920:	eb1b 0509 	adds.w	r5, fp, r9
 8005924:	eb4c 060a 	adc.w	r6, ip, sl
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4619      	mov	r1, r3
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f04f 0300 	mov.w	r3, #0
 8005936:	f04f 0400 	mov.w	r4, #0
 800593a:	0094      	lsls	r4, r2, #2
 800593c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005940:	008b      	lsls	r3, r1, #2
 8005942:	461a      	mov	r2, r3
 8005944:	4623      	mov	r3, r4
 8005946:	4628      	mov	r0, r5
 8005948:	4631      	mov	r1, r6
 800594a:	f7fa fc45 	bl	80001d8 <__aeabi_uldivmod>
 800594e:	4603      	mov	r3, r0
 8005950:	460c      	mov	r4, r1
 8005952:	461a      	mov	r2, r3
 8005954:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <UART_SetConfig+0x5c0>)
 8005956:	fba3 1302 	umull	r1, r3, r3, r2
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	2164      	movs	r1, #100	; 0x64
 800595e:	fb01 f303 	mul.w	r3, r1, r3
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	3332      	adds	r3, #50	; 0x32
 8005968:	4a05      	ldr	r2, [pc, #20]	; (8005980 <UART_SetConfig+0x5c0>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	f003 020f 	and.w	r2, r3, #15
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4442      	add	r2, r8
 800597a:	609a      	str	r2, [r3, #8]
 800597c:	e0d7      	b.n	8005b2e <UART_SetConfig+0x76e>
 800597e:	bf00      	nop
 8005980:	51eb851f 	.word	0x51eb851f
 8005984:	40011000 	.word	0x40011000
 8005988:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800598c:	f7fe fc7e 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 8005990:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	469a      	mov	sl, r3
 8005996:	f04f 0b00 	mov.w	fp, #0
 800599a:	46d0      	mov	r8, sl
 800599c:	46d9      	mov	r9, fp
 800599e:	eb18 0308 	adds.w	r3, r8, r8
 80059a2:	eb49 0409 	adc.w	r4, r9, r9
 80059a6:	4698      	mov	r8, r3
 80059a8:	46a1      	mov	r9, r4
 80059aa:	eb18 080a 	adds.w	r8, r8, sl
 80059ae:	eb49 090b 	adc.w	r9, r9, fp
 80059b2:	f04f 0100 	mov.w	r1, #0
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059c6:	4688      	mov	r8, r1
 80059c8:	4691      	mov	r9, r2
 80059ca:	eb1a 0508 	adds.w	r5, sl, r8
 80059ce:	eb4b 0609 	adc.w	r6, fp, r9
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	4619      	mov	r1, r3
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	f04f 0400 	mov.w	r4, #0
 80059e4:	0094      	lsls	r4, r2, #2
 80059e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059ea:	008b      	lsls	r3, r1, #2
 80059ec:	461a      	mov	r2, r3
 80059ee:	4623      	mov	r3, r4
 80059f0:	4628      	mov	r0, r5
 80059f2:	4631      	mov	r1, r6
 80059f4:	f7fa fbf0 	bl	80001d8 <__aeabi_uldivmod>
 80059f8:	4603      	mov	r3, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b4e      	ldr	r3, [pc, #312]	; (8005b38 <UART_SetConfig+0x778>)
 8005a00:	fba3 2302 	umull	r2, r3, r3, r2
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	469b      	mov	fp, r3
 8005a0e:	f04f 0c00 	mov.w	ip, #0
 8005a12:	46d9      	mov	r9, fp
 8005a14:	46e2      	mov	sl, ip
 8005a16:	eb19 0309 	adds.w	r3, r9, r9
 8005a1a:	eb4a 040a 	adc.w	r4, sl, sl
 8005a1e:	4699      	mov	r9, r3
 8005a20:	46a2      	mov	sl, r4
 8005a22:	eb19 090b 	adds.w	r9, r9, fp
 8005a26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a2a:	f04f 0100 	mov.w	r1, #0
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a3e:	4689      	mov	r9, r1
 8005a40:	4692      	mov	sl, r2
 8005a42:	eb1b 0509 	adds.w	r5, fp, r9
 8005a46:	eb4c 060a 	adc.w	r6, ip, sl
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	f04f 0400 	mov.w	r4, #0
 8005a5c:	0094      	lsls	r4, r2, #2
 8005a5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a62:	008b      	lsls	r3, r1, #2
 8005a64:	461a      	mov	r2, r3
 8005a66:	4623      	mov	r3, r4
 8005a68:	4628      	mov	r0, r5
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	f7fa fbb4 	bl	80001d8 <__aeabi_uldivmod>
 8005a70:	4603      	mov	r3, r0
 8005a72:	460c      	mov	r4, r1
 8005a74:	461a      	mov	r2, r3
 8005a76:	4b30      	ldr	r3, [pc, #192]	; (8005b38 <UART_SetConfig+0x778>)
 8005a78:	fba3 1302 	umull	r1, r3, r3, r2
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	2164      	movs	r1, #100	; 0x64
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	3332      	adds	r3, #50	; 0x32
 8005a8a:	4a2b      	ldr	r2, [pc, #172]	; (8005b38 <UART_SetConfig+0x778>)
 8005a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a90:	095b      	lsrs	r3, r3, #5
 8005a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a96:	4498      	add	r8, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	469b      	mov	fp, r3
 8005a9c:	f04f 0c00 	mov.w	ip, #0
 8005aa0:	46d9      	mov	r9, fp
 8005aa2:	46e2      	mov	sl, ip
 8005aa4:	eb19 0309 	adds.w	r3, r9, r9
 8005aa8:	eb4a 040a 	adc.w	r4, sl, sl
 8005aac:	4699      	mov	r9, r3
 8005aae:	46a2      	mov	sl, r4
 8005ab0:	eb19 090b 	adds.w	r9, r9, fp
 8005ab4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ab8:	f04f 0100 	mov.w	r1, #0
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ac4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ac8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005acc:	4689      	mov	r9, r1
 8005ace:	4692      	mov	sl, r2
 8005ad0:	eb1b 0509 	adds.w	r5, fp, r9
 8005ad4:	eb4c 060a 	adc.w	r6, ip, sl
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	4619      	mov	r1, r3
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	f04f 0400 	mov.w	r4, #0
 8005aea:	0094      	lsls	r4, r2, #2
 8005aec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005af0:	008b      	lsls	r3, r1, #2
 8005af2:	461a      	mov	r2, r3
 8005af4:	4623      	mov	r3, r4
 8005af6:	4628      	mov	r0, r5
 8005af8:	4631      	mov	r1, r6
 8005afa:	f7fa fb6d 	bl	80001d8 <__aeabi_uldivmod>
 8005afe:	4603      	mov	r3, r0
 8005b00:	460c      	mov	r4, r1
 8005b02:	461a      	mov	r2, r3
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <UART_SetConfig+0x778>)
 8005b06:	fba3 1302 	umull	r1, r3, r3, r2
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	2164      	movs	r1, #100	; 0x64
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	3332      	adds	r3, #50	; 0x32
 8005b18:	4a07      	ldr	r2, [pc, #28]	; (8005b38 <UART_SetConfig+0x778>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	f003 020f 	and.w	r2, r3, #15
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4442      	add	r2, r8
 8005b2a:	609a      	str	r2, [r3, #8]
}
 8005b2c:	e7ff      	b.n	8005b2e <UART_SetConfig+0x76e>
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b38:	51eb851f 	.word	0x51eb851f

08005b3c <__libc_init_array>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	4e0d      	ldr	r6, [pc, #52]	; (8005b74 <__libc_init_array+0x38>)
 8005b40:	4c0d      	ldr	r4, [pc, #52]	; (8005b78 <__libc_init_array+0x3c>)
 8005b42:	1ba4      	subs	r4, r4, r6
 8005b44:	10a4      	asrs	r4, r4, #2
 8005b46:	2500      	movs	r5, #0
 8005b48:	42a5      	cmp	r5, r4
 8005b4a:	d109      	bne.n	8005b60 <__libc_init_array+0x24>
 8005b4c:	4e0b      	ldr	r6, [pc, #44]	; (8005b7c <__libc_init_array+0x40>)
 8005b4e:	4c0c      	ldr	r4, [pc, #48]	; (8005b80 <__libc_init_array+0x44>)
 8005b50:	f000 f82c 	bl	8005bac <_init>
 8005b54:	1ba4      	subs	r4, r4, r6
 8005b56:	10a4      	asrs	r4, r4, #2
 8005b58:	2500      	movs	r5, #0
 8005b5a:	42a5      	cmp	r5, r4
 8005b5c:	d105      	bne.n	8005b6a <__libc_init_array+0x2e>
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
 8005b60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b64:	4798      	blx	r3
 8005b66:	3501      	adds	r5, #1
 8005b68:	e7ee      	b.n	8005b48 <__libc_init_array+0xc>
 8005b6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b6e:	4798      	blx	r3
 8005b70:	3501      	adds	r5, #1
 8005b72:	e7f2      	b.n	8005b5a <__libc_init_array+0x1e>
 8005b74:	08005d7c 	.word	0x08005d7c
 8005b78:	08005d7c 	.word	0x08005d7c
 8005b7c:	08005d7c 	.word	0x08005d7c
 8005b80:	08005d80 	.word	0x08005d80

08005b84 <memcpy>:
 8005b84:	b510      	push	{r4, lr}
 8005b86:	1e43      	subs	r3, r0, #1
 8005b88:	440a      	add	r2, r1
 8005b8a:	4291      	cmp	r1, r2
 8005b8c:	d100      	bne.n	8005b90 <memcpy+0xc>
 8005b8e:	bd10      	pop	{r4, pc}
 8005b90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b98:	e7f7      	b.n	8005b8a <memcpy+0x6>

08005b9a <memset>:
 8005b9a:	4402      	add	r2, r0
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d100      	bne.n	8005ba4 <memset+0xa>
 8005ba2:	4770      	bx	lr
 8005ba4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba8:	e7f9      	b.n	8005b9e <memset+0x4>
	...

08005bac <_init>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	bf00      	nop
 8005bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb2:	bc08      	pop	{r3}
 8005bb4:	469e      	mov	lr, r3
 8005bb6:	4770      	bx	lr

08005bb8 <_fini>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr
