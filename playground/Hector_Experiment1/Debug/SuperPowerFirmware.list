
SuperPowerFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000364c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003994  08003994  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800399c  0800399c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039a0  080039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080039a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000018  080039bc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080039bc  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001162a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002786  00000000  00000000  00031672  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000890  00000000  00000000  00033df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ab8  00000000  00000000  00034688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b75  00000000  00000000  00036140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c087  00000000  00000000  0004ccb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c456  00000000  00000000  00058d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5192  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ccc  00000000  00000000  000e5210  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00009881  00000000  00000000  000e6edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080037cc 	.word	0x080037cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	080037cc 	.word	0x080037cc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	2400      	movs	r4, #0
{
 80004dc:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80004e2:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b23      	ldr	r3, [pc, #140]	; (8000574 <MX_GPIO_Init+0x9c>)
 80004e8:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ee:	4d22      	ldr	r5, [pc, #136]	; (8000578 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f0:	f042 0204 	orr.w	r2, r2, #4
 80004f4:	631a      	str	r2, [r3, #48]	; 0x30
 80004f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f8:	f002 0204 	and.w	r2, r2, #4
 80004fc:	9201      	str	r2, [sp, #4]
 80004fe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000500:	9402      	str	r4, [sp, #8]
 8000502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000504:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000508:	631a      	str	r2, [r3, #48]	; 0x30
 800050a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800050c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000510:	9202      	str	r2, [sp, #8]
 8000512:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	9403      	str	r4, [sp, #12]
 8000516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000518:	f042 0201 	orr.w	r2, r2, #1
 800051c:	631a      	str	r2, [r3, #48]	; 0x30
 800051e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000520:	f002 0201 	and.w	r2, r2, #1
 8000524:	9203      	str	r2, [sp, #12]
 8000526:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000528:	9404      	str	r4, [sp, #16]
 800052a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800052c:	f042 0202 	orr.w	r2, r2, #2
 8000530:	631a      	str	r2, [r3, #48]	; 0x30
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	f003 0302 	and.w	r3, r3, #2
 8000538:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800053a:	4622      	mov	r2, r4
 800053c:	4628      	mov	r0, r5
 800053e:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000540:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000542:	f000 fd59 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <MX_GPIO_Init+0xa4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <MX_GPIO_Init+0xa8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800054c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = B1_Pin;
 800054e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000552:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000556:	f000 fc01 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800055a:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800055e:	a905      	add	r1, sp, #20
 8000560:	4628      	mov	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	e9cd 4407 	strd	r4, r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800056a:	f000 fbf7 	bl	8000d5c <HAL_GPIO_Init>

}
 800056e:	b00b      	add	sp, #44	; 0x2c
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800
 8000578:	40020000 	.word	0x40020000
 800057c:	10210000 	.word	0x10210000
 8000580:	40020800 	.word	0x40020800

08000584 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000584:	b538      	push	{r3, r4, r5, lr}

  hi2c1.Instance = I2C1;
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <MX_I2C1_Init+0x38>)
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <MX_I2C1_Init+0x3c>)
  hi2c1.Init.ClockSpeed = 100000;
 800058a:	480e      	ldr	r0, [pc, #56]	; (80005c4 <MX_I2C1_Init+0x40>)
  hi2c1.Instance = I2C1;
 800058c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 40;
 800058e:	2228      	movs	r2, #40	; 0x28
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000590:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 8000594:	2401      	movs	r4, #1
  hi2c1.Init.OwnAddress2 = 42;
 8000596:	212a      	movs	r1, #42	; 0x2a
  hi2c1.Init.ClockSpeed = 100000;
 8000598:	6058      	str	r0, [r3, #4]
  hi2c1.Init.OwnAddress1 = 40;
 800059a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800059c:	4618      	mov	r0, r3
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800059e:	2200      	movs	r2, #0
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80005a0:	e9c3 5404 	strd	r5, r4, [r3, #16]
  hi2c1.Init.OwnAddress2 = 42;
 80005a4:	6199      	str	r1, [r3, #24]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005a6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005a8:	e9c3 2207 	strd	r2, r2, [r3, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ac:	f000 fd3e 	bl	800102c <HAL_I2C_Init>
 80005b0:	b900      	cbnz	r0, 80005b4 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 80005b2:	bd38      	pop	{r3, r4, r5, pc}
 80005b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80005b8:	f000 b9c8 	b.w	800094c <Error_Handler>
 80005bc:	20000038 	.word	0x20000038
 80005c0:	40005400 	.word	0x40005400
 80005c4:	000186a0 	.word	0x000186a0

080005c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005c8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 80005ca:	6802      	ldr	r2, [r0, #0]
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <HAL_I2C_MspInit+0x88>)
{
 80005ce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 80005d2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80005d8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80005dc:	9407      	str	r4, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80005de:	d001      	beq.n	80005e4 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005e0:	b008      	add	sp, #32
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	4d1b      	ldr	r5, [pc, #108]	; (8000654 <HAL_I2C_MspInit+0x8c>)
 80005e6:	9401      	str	r4, [sp, #4]
 80005e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	481b      	ldr	r0, [pc, #108]	; (8000658 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	632b      	str	r3, [r5, #48]	; 0x30
 80005f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005fa:	23c0      	movs	r3, #192	; 0xc0
 80005fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005fe:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000600:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000602:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000604:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000606:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800060a:	2304      	movs	r3, #4
 800060c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000610:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000612:	f000 fba3 	bl	8000d5c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000616:	9402      	str	r4, [sp, #8]
 8000618:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800061a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800061e:	642b      	str	r3, [r5, #64]	; 0x40
 8000620:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000626:	4622      	mov	r2, r4
 8000628:	4621      	mov	r1, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 800062a:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800062c:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 800062e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000630:	f000 fb0a 	bl	8000c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000634:	201f      	movs	r0, #31
 8000636:	f000 fb4d 	bl	8000cd4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800063a:	4622      	mov	r2, r4
 800063c:	4621      	mov	r1, r4
 800063e:	2020      	movs	r0, #32
 8000640:	f000 fb02 	bl	8000c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000644:	2020      	movs	r0, #32
 8000646:	f000 fb45 	bl	8000cd4 <HAL_NVIC_EnableIRQ>
}
 800064a:	b008      	add	sp, #32
 800064c:	bd70      	pop	{r4, r5, r6, pc}
 800064e:	bf00      	nop
 8000650:	40005400 	.word	0x40005400
 8000654:	40023800 	.word	0x40023800
 8000658:	40020400 	.word	0x40020400

0800065c <HAL_I2C_AddrCallback>:
	return HAL_OK;
}



void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 800065c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	UNUSED(hi2c);
	switch(TransferDirection){
 8000660:	460b      	mov	r3, r1
 8000662:	b179      	cbz	r1, 8000684 <HAL_I2C_AddrCallback+0x28>
 8000664:	2901      	cmp	r1, #1
 8000666:	d10b      	bne.n	8000680 <HAL_I2C_AddrCallback+0x24>
 8000668:	4614      	mov	r4, r2
	case I2C_DIRECTION_TRANSMIT:
		addr = AddrMatchCode;
		test.addres = addr;
 800066a:	4d1f      	ldr	r5, [pc, #124]	; (80006e8 <HAL_I2C_AddrCallback+0x8c>)
		addr = AddrMatchCode;
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <HAL_I2C_AddrCallback+0x90>)
		test.addres = addr;
 800066e:	802c      	strh	r4, [r5, #0]
		addr = AddrMatchCode;
 8000670:	8014      	strh	r4, [r2, #0]
		HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, slaveReceiveBuffer, SLAVE_BUFFER_SIZE, I2C_FIRST_FRAME);
 8000672:	491f      	ldr	r1, [pc, #124]	; (80006f0 <HAL_I2C_AddrCallback+0x94>)
 8000674:	481f      	ldr	r0, [pc, #124]	; (80006f4 <HAL_I2C_AddrCallback+0x98>)
 8000676:	2220      	movs	r2, #32

		break;
	default:
		break;
	}
}
 8000678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, slaveReceiveBuffer, SLAVE_BUFFER_SIZE, I2C_FIRST_FRAME);
 800067c:	f000 be78 	b.w	8001370 <HAL_I2C_Slave_Seq_Receive_IT>
}
 8000680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BCD);
 8000684:	4e1c      	ldr	r6, [pc, #112]	; (80006f8 <HAL_I2C_AddrCallback+0x9c>)
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BCD);
 8000686:	4d1d      	ldr	r5, [pc, #116]	; (80006fc <HAL_I2C_AddrCallback+0xa0>)
		slaveTransmitBuffer = (uint8_t*)getRegister(slaveReceiveBuffer[0]);
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <HAL_I2C_AddrCallback+0x94>)
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BCD);
 800068a:	481d      	ldr	r0, [pc, #116]	; (8000700 <HAL_I2C_AddrCallback+0xa4>)
		slaveTransmitBuffer = (uint8_t*)getRegister(slaveReceiveBuffer[0]);
 800068c:	781f      	ldrb	r7, [r3, #0]
 800068e:	460c      	mov	r4, r1
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BCD);
 8000690:	2201      	movs	r2, #1
 8000692:	4631      	mov	r1, r6
 8000694:	f002 fda4 	bl	80031e0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BCD);
 8000698:	4629      	mov	r1, r5
 800069a:	2201      	movs	r2, #1
 800069c:	4818      	ldr	r0, [pc, #96]	; (8000700 <HAL_I2C_AddrCallback+0xa4>)
 800069e:	f002 fefb 	bl	8003498 <HAL_RTC_GetDate>
	timebuffer[0] = time.Seconds;
 80006a2:	4a18      	ldr	r2, [pc, #96]	; (8000704 <HAL_I2C_AddrCallback+0xa8>)
 80006a4:	78b1      	ldrb	r1, [r6, #2]
	timebuffer[1] = time.Minutes;
 80006a6:	7873      	ldrb	r3, [r6, #1]
	timebuffer[0] = time.Seconds;
 80006a8:	7011      	strb	r1, [r2, #0]
	timebuffer[1] = time.Minutes;
 80006aa:	7053      	strb	r3, [r2, #1]
	timebuffer[5] = date.Month;
 80006ac:	7869      	ldrb	r1, [r5, #1]
	timebuffer[4] = date.Date;
 80006ae:	78a8      	ldrb	r0, [r5, #2]
	timebuffer[6] = date.Year;
 80006b0:	78eb      	ldrb	r3, [r5, #3]
	timebuffer[2] = time.Hours;
 80006b2:	f896 c000 	ldrb.w	ip, [r6]
	timebuffer[3] = date.WeekDay;
 80006b6:	782e      	ldrb	r6, [r5, #0]
	timebuffer[5] = date.Month;
 80006b8:	7151      	strb	r1, [r2, #5]
	if(reg <= 6){
 80006ba:	2f06      	cmp	r7, #6
	timebuffer[2] = time.Hours;
 80006bc:	f882 c002 	strb.w	ip, [r2, #2]
	timebuffer[3] = date.WeekDay;
 80006c0:	70d6      	strb	r6, [r2, #3]
	timebuffer[4] = date.Date;
 80006c2:	7110      	strb	r0, [r2, #4]
	timebuffer[6] = date.Year;
 80006c4:	7193      	strb	r3, [r2, #6]
	  ptr = &timebuffer[(uint8_t)reg];
 80006c6:	bf98      	it	ls
 80006c8:	19d1      	addls	r1, r2, r7
		slaveTransmitBuffer = (uint8_t*)getRegister(slaveReceiveBuffer[0]);
 80006ca:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <HAL_I2C_AddrCallback+0xac>)
		sizeOfData = 8;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <HAL_I2C_AddrCallback+0xb0>)
		HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, slaveTransmitBuffer, sizeOfData, I2C_LAST_FRAME);
 80006ce:	4809      	ldr	r0, [pc, #36]	; (80006f4 <HAL_I2C_AddrCallback+0x98>)
	char* ptr = NULL;
 80006d0:	bf88      	it	hi
 80006d2:	4621      	movhi	r1, r4
		slaveTransmitBuffer = (uint8_t*)getRegister(slaveReceiveBuffer[0]);
 80006d4:	6011      	str	r1, [r2, #0]
		sizeOfData = 8;
 80006d6:	2208      	movs	r2, #8
 80006d8:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, slaveTransmitBuffer, sizeOfData, I2C_LAST_FRAME);
 80006da:	881a      	ldrh	r2, [r3, #0]
}
 80006dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, slaveTransmitBuffer, sizeOfData, I2C_LAST_FRAME);
 80006e0:	2320      	movs	r3, #32
 80006e2:	f000 bde9 	b.w	80012b8 <HAL_I2C_Slave_Seq_Transmit_IT>
 80006e6:	bf00      	nop
 80006e8:	20000094 	.word	0x20000094
 80006ec:	20000034 	.word	0x20000034
 80006f0:	200000b8 	.word	0x200000b8
 80006f4:	20000038 	.word	0x20000038
 80006f8:	200000d8 	.word	0x200000d8
 80006fc:	200000ec 	.word	0x200000ec
 8000700:	200000f0 	.word	0x200000f0
 8000704:	20000000 	.word	0x20000000
 8000708:	2000008c 	.word	0x2000008c
 800070c:	20000090 	.word	0x20000090

08000710 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 8000710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000712:	4604      	mov	r4, r0
 8000714:	b091      	sub	sp, #68	; 0x44
	HAL_I2C_EnableListen_IT(&hi2c1); // Restart
 8000716:	4855      	ldr	r0, [pc, #340]	; (800086c <HAL_I2C_ListenCpltCallback+0x15c>)
		test.cmd_size = (uint8_t)(SLAVE_BUFFER_SIZE + 1 - hi2c->XferCount);
 8000718:	4d55      	ldr	r5, [pc, #340]	; (8000870 <HAL_I2C_ListenCpltCallback+0x160>)
	HAL_I2C_EnableListen_IT(&hi2c1); // Restart
 800071a:	f000 fe85 	bl	8001428 <HAL_I2C_EnableListen_IT>
		test.cmd_size = (uint8_t)(SLAVE_BUFFER_SIZE + 1 - hi2c->XferCount);
 800071e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000720:	b2db      	uxtb	r3, r3
 8000722:	f1c3 0621 	rsb	r6, r3, #33	; 0x21
		if(test.cmd_size > 0 && test.cmd_size <= SLAVE_BUFFER_SIZE){
 8000726:	f1c3 0320 	rsb	r3, r3, #32
 800072a:	b2dc      	uxtb	r4, r3
		test.cmd_size = (uint8_t)(SLAVE_BUFFER_SIZE + 1 - hi2c->XferCount);
 800072c:	b2f6      	uxtb	r6, r6
		if(test.cmd_size > 0 && test.cmd_size <= SLAVE_BUFFER_SIZE){
 800072e:	2c1f      	cmp	r4, #31
		test.cmd_size = (uint8_t)(SLAVE_BUFFER_SIZE + 1 - hi2c->XferCount);
 8000730:	70ae      	strb	r6, [r5, #2]
		if(test.cmd_size > 0 && test.cmd_size <= SLAVE_BUFFER_SIZE){
 8000732:	d901      	bls.n	8000738 <HAL_I2C_ListenCpltCallback+0x28>
			memcpy(test.data, slaveReceiveBuffer, test.cmd_size);
			ds3231_cmd_decode(test);
			memset(slaveReceiveBuffer, 0, SLAVE_BUFFER_SIZE);
		}

}
 8000734:	b011      	add	sp, #68	; 0x44
 8000736:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memcpy(test.data, slaveReceiveBuffer, test.cmd_size);
 8000738:	4632      	mov	r2, r6
 800073a:	494e      	ldr	r1, [pc, #312]	; (8000874 <HAL_I2C_ListenCpltCallback+0x164>)
 800073c:	1ce8      	adds	r0, r5, #3
 800073e:	f003 f831 	bl	80037a4 <memcpy>
 8000742:	f105 0e20 	add.w	lr, r5, #32
 8000746:	f10d 0c1c 	add.w	ip, sp, #28
 800074a:	6828      	ldr	r0, [r5, #0]
 800074c:	6869      	ldr	r1, [r5, #4]
 800074e:	68aa      	ldr	r2, [r5, #8]
 8000750:	68eb      	ldr	r3, [r5, #12]
 8000752:	4667      	mov	r7, ip
 8000754:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000756:	3510      	adds	r5, #16
 8000758:	4575      	cmp	r5, lr
 800075a:	46bc      	mov	ip, r7
 800075c:	d1f5      	bne.n	800074a <HAL_I2C_ListenCpltCallback+0x3a>
 800075e:	6828      	ldr	r0, [r5, #0]
 8000760:	6038      	str	r0, [r7, #0]
	switch (msg.data[0]) {
 8000762:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8000766:	2b06      	cmp	r3, #6
 8000768:	d80d      	bhi.n	8000786 <HAL_I2C_ListenCpltCallback+0x76>
 800076a:	e8df f003 	tbb	[pc, r3]
 800076e:	486d      	.short	0x486d
 8000770:	1e2b3965 	.word	0x1e2b3965
 8000774:	04          	.byte	0x04
 8000775:	00          	.byte	0x00
 8000776:	2301      	movs	r3, #1
		if(size-- > 0){
 8000778:	b12e      	cbz	r6, 8000786 <HAL_I2C_ListenCpltCallback+0x76>
			date.Year= msg.data[i];
 800077a:	aa10      	add	r2, sp, #64	; 0x40
 800077c:	4413      	add	r3, r2
 800077e:	f813 3c21 	ldrb.w	r3, [r3, #-33]
 8000782:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD);
 8000786:	a902      	add	r1, sp, #8
 8000788:	2201      	movs	r2, #1
 800078a:	483b      	ldr	r0, [pc, #236]	; (8000878 <HAL_I2C_ListenCpltCallback+0x168>)
 800078c:	f002 fbca 	bl	8002f24 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BCD);
 8000790:	a901      	add	r1, sp, #4
 8000792:	2201      	movs	r2, #1
 8000794:	4838      	ldr	r0, [pc, #224]	; (8000878 <HAL_I2C_ListenCpltCallback+0x168>)
 8000796:	f002 fd63 	bl	8003260 <HAL_RTC_SetDate>
			memset(slaveReceiveBuffer, 0, SLAVE_BUFFER_SIZE);
 800079a:	4836      	ldr	r0, [pc, #216]	; (8000874 <HAL_I2C_ListenCpltCallback+0x164>)
 800079c:	2220      	movs	r2, #32
 800079e:	2100      	movs	r1, #0
}
 80007a0:	b011      	add	sp, #68	; 0x44
 80007a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			memset(slaveReceiveBuffer, 0, SLAVE_BUFFER_SIZE);
 80007a6:	f003 b808 	b.w	80037ba <memset>
	switch (msg.data[0]) {
 80007aa:	2302      	movs	r3, #2
 80007ac:	2201      	movs	r2, #1
		if(size-- > 0){
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d0e9      	beq.n	8000786 <HAL_I2C_ListenCpltCallback+0x76>
			date.Month= msg.data[i];
 80007b2:	a910      	add	r1, sp, #64	; 0x40
 80007b4:	440a      	add	r2, r1
		if(size-- > 0){
 80007b6:	3e01      	subs	r6, #1
			date.Month= msg.data[i];
 80007b8:	f812 2c21 	ldrb.w	r2, [r2, #-33]
 80007bc:	f88d 2005 	strb.w	r2, [sp, #5]
		if(size-- > 0){
 80007c0:	b2f6      	uxtb	r6, r6
 80007c2:	e7d9      	b.n	8000778 <HAL_I2C_ListenCpltCallback+0x68>
	switch (msg.data[0]) {
 80007c4:	2303      	movs	r3, #3
 80007c6:	2202      	movs	r2, #2
 80007c8:	2101      	movs	r1, #1
		if(size-- > 0){
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d0db      	beq.n	8000786 <HAL_I2C_ListenCpltCallback+0x76>
			date.Date= msg.data[i];
 80007ce:	a810      	add	r0, sp, #64	; 0x40
 80007d0:	4401      	add	r1, r0
		if(size-- > 0){
 80007d2:	3e01      	subs	r6, #1
			date.Date= msg.data[i];
 80007d4:	f811 1c21 	ldrb.w	r1, [r1, #-33]
 80007d8:	f88d 1006 	strb.w	r1, [sp, #6]
		if(size-- > 0){
 80007dc:	b2f6      	uxtb	r6, r6
 80007de:	e7e6      	b.n	80007ae <HAL_I2C_ListenCpltCallback+0x9e>
	switch (msg.data[0]) {
 80007e0:	2304      	movs	r3, #4
 80007e2:	2203      	movs	r2, #3
 80007e4:	2102      	movs	r1, #2
 80007e6:	2001      	movs	r0, #1
		if(size-- > 0){
 80007e8:	2e00      	cmp	r6, #0
 80007ea:	d0cc      	beq.n	8000786 <HAL_I2C_ListenCpltCallback+0x76>
			date.WeekDay = msg.data[i];
 80007ec:	ac10      	add	r4, sp, #64	; 0x40
 80007ee:	4420      	add	r0, r4
		if(size-- > 0){
 80007f0:	3e01      	subs	r6, #1
			date.WeekDay = msg.data[i];
 80007f2:	f810 0c21 	ldrb.w	r0, [r0, #-33]
 80007f6:	f88d 0004 	strb.w	r0, [sp, #4]
		if(size-- > 0){
 80007fa:	b2f6      	uxtb	r6, r6
 80007fc:	e7e5      	b.n	80007ca <HAL_I2C_ListenCpltCallback+0xba>
	switch (msg.data[0]) {
 80007fe:	2306      	movs	r3, #6
 8000800:	2205      	movs	r2, #5
 8000802:	2104      	movs	r1, #4
 8000804:	2003      	movs	r0, #3
 8000806:	2402      	movs	r4, #2
 8000808:	2501      	movs	r5, #1
		if(size-- > 0){
 800080a:	2e00      	cmp	r6, #0
 800080c:	d0bb      	beq.n	8000786 <HAL_I2C_ListenCpltCallback+0x76>
			time.Minutes = msg.data[i];
 800080e:	af10      	add	r7, sp, #64	; 0x40
 8000810:	443d      	add	r5, r7
		if(size-- > 0){
 8000812:	3e01      	subs	r6, #1
			time.Minutes = msg.data[i];
 8000814:	f815 5c21 	ldrb.w	r5, [r5, #-33]
 8000818:	f88d 5009 	strb.w	r5, [sp, #9]
		if(size-- > 0){
 800081c:	b2f6      	uxtb	r6, r6
		if(size-- > 0){
 800081e:	2e00      	cmp	r6, #0
 8000820:	d0b1      	beq.n	8000786 <HAL_I2C_ListenCpltCallback+0x76>
			time.Hours = msg.data[i];
 8000822:	ad10      	add	r5, sp, #64	; 0x40
 8000824:	442c      	add	r4, r5
		if(size-- > 0){
 8000826:	3e01      	subs	r6, #1
			time.Hours = msg.data[i];
 8000828:	f814 4c21 	ldrb.w	r4, [r4, #-33]
 800082c:	f88d 4008 	strb.w	r4, [sp, #8]
		if(size-- > 0){
 8000830:	b2f6      	uxtb	r6, r6
		if(size-- > 0){
 8000832:	2e00      	cmp	r6, #0
 8000834:	d1da      	bne.n	80007ec <HAL_I2C_ListenCpltCallback+0xdc>
 8000836:	e7a6      	b.n	8000786 <HAL_I2C_ListenCpltCallback+0x76>
	switch (msg.data[0]) {
 8000838:	2305      	movs	r3, #5
 800083a:	2204      	movs	r2, #4
 800083c:	2103      	movs	r1, #3
 800083e:	2002      	movs	r0, #2
 8000840:	2401      	movs	r4, #1
		if(size-- > 0){
 8000842:	2e00      	cmp	r6, #0
 8000844:	d1ed      	bne.n	8000822 <HAL_I2C_ListenCpltCallback+0x112>
 8000846:	e79e      	b.n	8000786 <HAL_I2C_ListenCpltCallback+0x76>
		if(size-- > 0){
 8000848:	2e00      	cmp	r6, #0
 800084a:	d09c      	beq.n	8000786 <HAL_I2C_ListenCpltCallback+0x76>
			time.SecondFraction = 0;
 800084c:	2200      	movs	r2, #0
			time.Seconds = msg.data[i];
 800084e:	f89d 3020 	ldrb.w	r3, [sp, #32]
			time.SecondFraction = 0;
 8000852:	9204      	str	r2, [sp, #16]
			time.Seconds = msg.data[i];
 8000854:	4626      	mov	r6, r4
 8000856:	f88d 300a 	strb.w	r3, [sp, #10]
 800085a:	2206      	movs	r2, #6
 800085c:	2307      	movs	r3, #7
 800085e:	2105      	movs	r1, #5
 8000860:	2004      	movs	r0, #4
 8000862:	2403      	movs	r4, #3
 8000864:	2502      	movs	r5, #2
		if(size-- > 0){
 8000866:	2e00      	cmp	r6, #0
 8000868:	d1d1      	bne.n	800080e <HAL_I2C_ListenCpltCallback+0xfe>
 800086a:	e78c      	b.n	8000786 <HAL_I2C_ListenCpltCallback+0x76>
 800086c:	20000038 	.word	0x20000038
 8000870:	20000094 	.word	0x20000094
 8000874:	200000b8 	.word	0x200000b8
 8000878:	200000f0 	.word	0x200000f0

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	2400      	movs	r4, #0
{
 8000880:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000886:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800088a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800088e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8000892:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	4a21      	ldr	r2, [pc, #132]	; (800091c <SystemClock_Config+0xa0>)
 8000898:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089a:	9403      	str	r4, [sp, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800089c:	9408      	str	r4, [sp, #32]
 800089e:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a0:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80008a8:	6411      	str	r1, [r2, #64]	; 0x40
 80008aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80008ac:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80008b0:	9201      	str	r2, [sp, #4]
 80008b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b4:	9402      	str	r4, [sp, #8]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c0:	9415      	str	r4, [sp, #84]	; 0x54
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c6:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008cc:	210a      	movs	r1, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ce:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008d0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d2:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008d4:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008d6:	910e      	str	r1, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d8:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008da:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008de:	2264      	movs	r2, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008e0:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e4:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008e6:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e8:	e9cd 5318 	strd	r5, r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f001 fd78 	bl	80023e0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008f6:	2103      	movs	r1, #3
 80008f8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000902:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000904:	f002 f814 	bl	8002930 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000908:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800090c:	a808      	add	r0, sp, #32
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800090e:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000910:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000912:	f002 f935 	bl	8002b80 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000916:	b01b      	add	sp, #108	; 0x6c
 8000918:	bd30      	pop	{r4, r5, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <main>:
{
 8000924:	b508      	push	{r3, lr}
  HAL_Init();
 8000926:	f000 f947 	bl	8000bb8 <HAL_Init>
  SystemClock_Config();
 800092a:	f7ff ffa7 	bl	800087c <SystemClock_Config>
  MX_GPIO_Init();
 800092e:	f7ff fdd3 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000932:	f7ff fe27 	bl	8000584 <MX_I2C1_Init>
  MX_RTC_Init();
 8000936:	f000 f80d 	bl	8000954 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800093a:	f000 f89d 	bl	8000a78 <MX_USART2_UART_Init>
	HAL_I2C_EnableListen_IT(&hi2c1);
 800093e:	4802      	ldr	r0, [pc, #8]	; (8000948 <main+0x24>)
 8000940:	f000 fd72 	bl	8001428 <HAL_I2C_EnableListen_IT>
 8000944:	e7fe      	b.n	8000944 <main+0x20>
 8000946:	bf00      	nop
 8000948:	20000038 	.word	0x20000038

0800094c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	 /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <assert_failed>:
	 /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	 UNUSED(file);
	 UNUSED(line);
  /* USER CODE END 6 */
}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000954:	b510      	push	{r4, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000956:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <MX_RTC_Init+0x70>)
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_RTC_Init+0x74>)
 800095a:	6013      	str	r3, [r2, #0]
{
 800095c:	b086      	sub	sp, #24
  RTC_TimeTypeDef sTime = {0};
 800095e:	2300      	movs	r3, #0
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8000960:	247f      	movs	r4, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
 8000962:	21ff      	movs	r1, #255	; 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000964:	4610      	mov	r0, r2
  hrtc.Init.SynchPrediv = 255;
 8000966:	e9c2 4102 	strd	r4, r1, [r2, #8]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800096a:	6053      	str	r3, [r2, #4]
  RTC_DateTypeDef sDate = {0};
 800096c:	e9cd 3300 	strd	r3, r3, [sp]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000970:	e9c2 3304 	strd	r3, r3, [r2, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000974:	6193      	str	r3, [r2, #24]
  RTC_TimeTypeDef sTime = {0};
 8000976:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800097a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800097e:	f002 fa1b 	bl	8002db8 <HAL_RTC_Init>
 8000982:	b9e0      	cbnz	r0, 80009be <MX_RTC_Init+0x6a>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000984:	2300      	movs	r3, #0
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000986:	a901      	add	r1, sp, #4
 8000988:	2201      	movs	r2, #1
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <MX_RTC_Init+0x70>)
  sTime.Hours = 0x0;
 800098c:	f8ad 3004 	strh.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8000990:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000994:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000998:	f002 fac4 	bl	8002f24 <HAL_RTC_SetTime>
 800099c:	b960      	cbnz	r0, 80009b8 <MX_RTC_Init+0x64>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800099e:	a906      	add	r1, sp, #24
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_RTC_Init+0x78>)
 80009a2:	f841 3d18 	str.w	r3, [r1, #-24]!
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009a6:	2201      	movs	r2, #1
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MX_RTC_Init+0x70>)
 80009aa:	f002 fc59 	bl	8003260 <HAL_RTC_SetDate>
 80009ae:	b108      	cbz	r0, 80009b4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80009b0:	f7ff ffcc 	bl	800094c <Error_Handler>
  }

}
 80009b4:	b006      	add	sp, #24
 80009b6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80009b8:	f7ff ffc8 	bl	800094c <Error_Handler>
 80009bc:	e7ef      	b.n	800099e <MX_RTC_Init+0x4a>
    Error_Handler();
 80009be:	f7ff ffc5 	bl	800094c <Error_Handler>
 80009c2:	e7df      	b.n	8000984 <MX_RTC_Init+0x30>
 80009c4:	200000f0 	.word	0x200000f0
 80009c8:	40002800 	.word	0x40002800
 80009cc:	00010101 	.word	0x00010101

080009d0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80009d0:	6802      	ldr	r2, [r0, #0]
 80009d2:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_RTC_MspInit+0x10>)
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d102      	bne.n	80009de <HAL_RTC_MspInit+0xe>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <HAL_RTC_MspInit+0x14>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80009de:	4770      	bx	lr
 80009e0:	40002800 	.word	0x40002800
 80009e4:	42470e3c 	.word	0x42470e3c

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_MspInit+0x34>)
 80009ec:	2100      	movs	r1, #0
 80009ee:	9100      	str	r1, [sp, #0]
 80009f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009f6:	645a      	str	r2, [r3, #68]	; 0x44
 80009f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80009fe:	9200      	str	r2, [sp, #0]
 8000a00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	9101      	str	r1, [sp, #4]
 8000a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	b002      	add	sp, #8
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	e7fe      	b.n	8000a24 <HardFault_Handler>
 8000a26:	bf00      	nop

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler>
 8000a2a:	bf00      	nop

08000a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2c:	e7fe      	b.n	8000a2c <BusFault_Handler>
 8000a2e:	bf00      	nop

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler>
 8000a32:	bf00      	nop

08000a34 <SVC_Handler>:
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <DebugMon_Handler>:
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <PendSV_Handler>:
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 b8d4 	b.w	8000bec <HAL_IncTick>

08000a44 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a44:	4801      	ldr	r0, [pc, #4]	; (8000a4c <I2C1_EV_IRQHandler+0x8>)
 8000a46:	f000 bdf1 	b.w	800162c <HAL_I2C_EV_IRQHandler>
 8000a4a:	bf00      	nop
 8000a4c:	20000038 	.word	0x20000038

08000a50 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a50:	4801      	ldr	r0, [pc, #4]	; (8000a58 <I2C1_ER_IRQHandler+0x8>)
 8000a52:	f001 bb51 	b.w	80020f8 <HAL_I2C_ER_IRQHandler>
 8000a56:	bf00      	nop
 8000a58:	20000038 	.word	0x20000038

08000a5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <SystemInit+0x18>)
 8000a5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a62:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a66:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a6e:	6099      	str	r1, [r3, #8]
#endif
}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART2_UART_Init+0x30>)
 8000a7a:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <MX_USART2_UART_Init+0x34>)
{
 8000a7c:	b510      	push	{r4, lr}
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a7e:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 8000a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a82:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	2200      	movs	r2, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a88:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 8000a8a:	605c      	str	r4, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a8e:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a92:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a98:	f002 fd38 	bl	800350c <HAL_UART_Init>
 8000a9c:	b900      	cbnz	r0, 8000aa0 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 8000a9e:	bd10      	pop	{r4, pc}
 8000aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000aa4:	f7ff bf52 	b.w	800094c <Error_Handler>
 8000aa8:	20000110 	.word	0x20000110
 8000aac:	40004400 	.word	0x40004400

08000ab0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ab0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8000ab2:	6801      	ldr	r1, [r0, #0]
 8000ab4:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <HAL_UART_MspInit+0x64>)
{
 8000ab6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART2)
 8000aba:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000ac0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000ac4:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000ac6:	d001      	beq.n	8000acc <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ac8:	b008      	add	sp, #32
 8000aca:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000acc:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	4810      	ldr	r0, [pc, #64]	; (8000b18 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8000ada:	6411      	str	r1, [r2, #64]	; 0x40
 8000adc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000ade:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8000ae2:	9101      	str	r1, [sp, #4]
 8000ae4:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	9302      	str	r3, [sp, #8]
 8000ae8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afa:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000afe:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b08:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f000 f926 	bl	8000d5c <HAL_GPIO_Init>
}
 8000b10:	b008      	add	sp, #32
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
 8000b14:	40004400 	.word	0x40004400
 8000b18:	40020000 	.word	0x40020000

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b22:	e003      	b.n	8000b2c <LoopCopyDataInit>

08000b24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b2a:	3104      	adds	r1, #4

08000b2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b2c:	480b      	ldr	r0, [pc, #44]	; (8000b5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b34:	d3f6      	bcc.n	8000b24 <CopyDataInit>
  ldr  r2, =_sbss
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b38:	e002      	b.n	8000b40 <LoopFillZerobss>

08000b3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b3c:	f842 3b04 	str.w	r3, [r2], #4

08000b40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b44:	d3f9      	bcc.n	8000b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b46:	f7ff ff89 	bl	8000a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f002 fe07 	bl	800375c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fee9 	bl	8000924 <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b58:	080039a4 	.word	0x080039a4
  ldr  r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b60:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000b64:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000b68:	20000154 	.word	0x20000154

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_InitTick+0x3c>)
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_InitTick+0x40>)
 8000b76:	7812      	ldrb	r2, [r2, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
{
 8000b7a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b80:	fbb0 f0f2 	udiv	r0, r0, r2
 8000b84:	fbb3 f0f0 	udiv	r0, r3, r0
 8000b88:	f000 f8b8 	bl	8000cfc <HAL_SYSTICK_Config>
 8000b8c:	b908      	cbnz	r0, 8000b92 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	2d0f      	cmp	r5, #15
 8000b90:	d901      	bls.n	8000b96 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000b92:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b98:	4602      	mov	r2, r0
 8000b9a:	4629      	mov	r1, r5
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f000 f852 	bl	8000c48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_InitTick+0x44>)
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	601d      	str	r5, [r3, #0]
}
 8000baa:	bd38      	pop	{r3, r4, r5, pc}
 8000bac:	20000010 	.word	0x20000010
 8000bb0:	2000000c 	.word	0x2000000c
 8000bb4:	20000014 	.word	0x20000014

08000bb8 <HAL_Init>:
{
 8000bb8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_Init+0x30>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bc2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bd2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f81b 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff ffc8 	bl	8000b70 <HAL_InitTick>
  HAL_MspInit();
 8000be0:	f7ff ff02 	bl	80009e8 <HAL_MspInit>
}
 8000be4:	2000      	movs	r0, #0
 8000be6:	bd08      	pop	{r3, pc}
 8000be8:	40023c00 	.word	0x40023c00

08000bec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bec:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <HAL_IncTick+0x10>)
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <HAL_IncTick+0x14>)
 8000bf0:	6811      	ldr	r1, [r2, #0]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	440b      	add	r3, r1
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000150 	.word	0x20000150
 8000c00:	20000010 	.word	0x20000010

08000c04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c04:	4b01      	ldr	r3, [pc, #4]	; (8000c0c <HAL_GetTick+0x8>)
 8000c06:	6818      	ldr	r0, [r3, #0]
}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000150 	.word	0x20000150

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c10:	1ec3      	subs	r3, r0, #3
 8000c12:	2b04      	cmp	r3, #4
{
 8000c14:	b510      	push	{r4, lr}
 8000c16:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c18:	d903      	bls.n	8000c22 <HAL_NVIC_SetPriorityGrouping+0x12>
 8000c1a:	2192      	movs	r1, #146	; 0x92
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8000c1e:	f7ff fe97 	bl	8000950 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000c24:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000c2a:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	0224      	lsls	r4, r4, #8
 8000c2e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c32:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
 8000c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000c3a:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8000c3c:	60d4      	str	r4, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c3e:	bd10      	pop	{r4, pc}
 8000c40:	080037fc 	.word	0x080037fc
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000c48:	2a0f      	cmp	r2, #15
{ 
 8000c4a:	b570      	push	{r4, r5, r6, lr}
 8000c4c:	4616      	mov	r6, r2
 8000c4e:	4605      	mov	r5, r0
 8000c50:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000c52:	d834      	bhi.n	8000cbe <HAL_NVIC_SetPriority+0x76>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000c54:	2c0f      	cmp	r4, #15
 8000c56:	d82d      	bhi.n	8000cb4 <HAL_NVIC_SetPriority+0x6c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_NVIC_SetPriority+0x80>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	f1c3 0107 	rsb	r1, r3, #7
 8000c64:	2904      	cmp	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6a:	bf28      	it	cs
 8000c6c:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	2a06      	cmp	r2, #6
 8000c70:	d917      	bls.n	8000ca2 <HAL_NVIC_SetPriority+0x5a>
 8000c72:	3b03      	subs	r3, #3
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	ea26 0602 	bic.w	r6, r6, r2

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c82:	408a      	lsls	r2, r1
 8000c84:	ea24 0202 	bic.w	r2, r4, r2
 8000c88:	409a      	lsls	r2, r3
 8000c8a:	4332      	orrs	r2, r6
 8000c8c:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	db09      	blt.n	8000ca8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8000c98:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8000c9c:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ca0:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	2600      	movs	r6, #0
 8000ca4:	4633      	mov	r3, r6
 8000ca6:	e7ea      	b.n	8000c7e <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_NVIC_SetPriority+0x84>)
 8000caa:	f005 050f 	and.w	r5, r5, #15
 8000cae:	442b      	add	r3, r5
 8000cb0:	761a      	strb	r2, [r3, #24]
 8000cb2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000cb4:	21ab      	movs	r1, #171	; 0xab
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <HAL_NVIC_SetPriority+0x88>)
 8000cb8:	f7ff fe4a 	bl	8000950 <assert_failed>
 8000cbc:	e7cc      	b.n	8000c58 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000cbe:	21aa      	movs	r1, #170	; 0xaa
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <HAL_NVIC_SetPriority+0x88>)
 8000cc2:	f7ff fe45 	bl	8000950 <assert_failed>
 8000cc6:	e7c5      	b.n	8000c54 <HAL_NVIC_SetPriority+0xc>
 8000cc8:	e000ed00 	.word	0xe000ed00
 8000ccc:	e000ecfc 	.word	0xe000ecfc
 8000cd0:	080037fc 	.word	0x080037fc

08000cd4 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	db08      	blt.n	8000cea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd8:	f000 011f 	and.w	r1, r0, #31
 8000cdc:	2301      	movs	r3, #1
 8000cde:	0940      	lsrs	r0, r0, #5
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_NVIC_EnableIRQ+0x20>)
 8000ce2:	408b      	lsls	r3, r1
 8000ce4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ce8:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000cea:	21be      	movs	r1, #190	; 0xbe
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <HAL_NVIC_EnableIRQ+0x24>)
 8000cee:	f7ff be2f 	b.w	8000950 <assert_failed>
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	080037fc 	.word	0x080037fc

08000cfc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d02:	d20e      	bcs.n	8000d22 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	4c08      	ldr	r4, [pc, #32]	; (8000d2c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	20f0      	movs	r0, #240	; 0xf0
 8000d0e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d12:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d14:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d16:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d20:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2001      	movs	r0, #1
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d30:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d003      	beq.n	8000d40 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d40:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d42:	2305      	movs	r3, #5
 8000d44:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000d48:	6813      	ldr	r3, [r2, #0]
 8000d4a:	f023 0301 	bic.w	r3, r3, #1
 8000d4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000d50:	2000      	movs	r0, #0
}
 8000d52:	4770      	bx	lr

08000d54 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 8000d54:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d60:	4b9b      	ldr	r3, [pc, #620]	; (8000fd0 <HAL_GPIO_Init+0x274>)
 8000d62:	4298      	cmp	r0, r3
{
 8000d64:	b083      	sub	sp, #12
 8000d66:	4683      	mov	fp, r0
 8000d68:	468a      	mov	sl, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d6a:	d017      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
 8000d6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d70:	4298      	cmp	r0, r3
 8000d72:	d013      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
 8000d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d78:	4298      	cmp	r0, r3
 8000d7a:	d00f      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
 8000d7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d80:	4298      	cmp	r0, r3
 8000d82:	d00b      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
 8000d84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d88:	4298      	cmp	r0, r3
 8000d8a:	d007      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
 8000d8c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000d90:	4298      	cmp	r0, r3
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
 8000d94:	21b3      	movs	r1, #179	; 0xb3
 8000d96:	488f      	ldr	r0, [pc, #572]	; (8000fd4 <HAL_GPIO_Init+0x278>)
 8000d98:	f7ff fdda 	bl	8000950 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d9c:	f8da 3000 	ldr.w	r3, [sl]
 8000da0:	b299      	uxth	r1, r3
 8000da2:	2900      	cmp	r1, #0
 8000da4:	f000 80b5 	beq.w	8000f12 <HAL_GPIO_Init+0x1b6>
 8000da8:	0c1b      	lsrs	r3, r3, #16
 8000daa:	041b      	lsls	r3, r3, #16
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f040 80b0 	bne.w	8000f12 <HAL_GPIO_Init+0x1b6>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000db2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d917      	bls.n	8000dea <HAL_GPIO_Init+0x8e>
 8000dba:	f1a3 0111 	sub.w	r1, r3, #17
 8000dbe:	2901      	cmp	r1, #1
 8000dc0:	d913      	bls.n	8000dea <HAL_GPIO_Init+0x8e>
 8000dc2:	4885      	ldr	r0, [pc, #532]	; (8000fd8 <HAL_GPIO_Init+0x27c>)
 8000dc4:	f423 1100 	bic.w	r1, r3, #2097152	; 0x200000
 8000dc8:	4281      	cmp	r1, r0
 8000dca:	d00e      	beq.n	8000dea <HAL_GPIO_Init+0x8e>
 8000dcc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8000dd0:	4283      	cmp	r3, r0
 8000dd2:	d00a      	beq.n	8000dea <HAL_GPIO_Init+0x8e>
 8000dd4:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 8000dd8:	4281      	cmp	r1, r0
 8000dda:	d006      	beq.n	8000dea <HAL_GPIO_Init+0x8e>
 8000ddc:	497f      	ldr	r1, [pc, #508]	; (8000fdc <HAL_GPIO_Init+0x280>)
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x8e>
 8000de2:	21b5      	movs	r1, #181	; 0xb5
 8000de4:	487b      	ldr	r0, [pc, #492]	; (8000fd4 <HAL_GPIO_Init+0x278>)
 8000de6:	f7ff fdb3 	bl	8000950 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000dea:	f8da 3008 	ldr.w	r3, [sl, #8]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	f200 80e4 	bhi.w	8000fbc <HAL_GPIO_Init+0x260>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000df4:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8000ff4 <HAL_GPIO_Init+0x298>
{
 8000df8:	f04f 0800 	mov.w	r8, #0
 8000dfc:	e005      	b.n	8000e0a <HAL_GPIO_Init+0xae>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	f108 0801 	add.w	r8, r8, #1
 8000e02:	f1b8 0f10 	cmp.w	r8, #16
 8000e06:	f000 8081 	beq.w	8000f0c <HAL_GPIO_Init+0x1b0>
    ioposition = 0x01U << position;
 8000e0a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0c:	f8da 5000 	ldr.w	r5, [sl]
    ioposition = 0x01U << position;
 8000e10:	fa04 f408 	lsl.w	r4, r4, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e14:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000e16:	42ac      	cmp	r4, r5
 8000e18:	d1f1      	bne.n	8000dfe <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8000e1e:	f022 0110 	bic.w	r1, r2, #16
 8000e22:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8000e26:	2603      	movs	r6, #3
 8000e28:	1e4b      	subs	r3, r1, #1
 8000e2a:	40be      	lsls	r6, r7
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	ea6f 0606 	mvn.w	r6, r6
 8000e32:	d973      	bls.n	8000f1c <HAL_GPIO_Init+0x1c0>
      temp = GPIOx->PUPDR;
 8000e34:	f8db 000c 	ldr.w	r0, [fp, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e38:	f8da 3008 	ldr.w	r3, [sl, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3c:	4030      	ands	r0, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3e:	40bb      	lsls	r3, r7
 8000e40:	4303      	orrs	r3, r0
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e42:	2902      	cmp	r1, #2
      GPIOx->PUPDR = temp;
 8000e44:	f8cb 300c 	str.w	r3, [fp, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e48:	d07f      	beq.n	8000f4a <HAL_GPIO_Init+0x1ee>
      temp = GPIOx->MODER;
 8000e4a:	f8db 1000 	ldr.w	r1, [fp]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e4e:	f002 0303 	and.w	r3, r2, #3
 8000e52:	40bb      	lsls	r3, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e54:	400e      	ands	r6, r1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e56:	4333      	orrs	r3, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e58:	00d7      	lsls	r7, r2, #3
      GPIOx->MODER = temp;
 8000e5a:	f8cb 3000 	str.w	r3, [fp]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e5e:	d5ce      	bpl.n	8000dfe <HAL_GPIO_Init+0xa2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e60:	4b5f      	ldr	r3, [pc, #380]	; (8000fe0 <HAL_GPIO_Init+0x284>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e62:	4c5b      	ldr	r4, [pc, #364]	; (8000fd0 <HAL_GPIO_Init+0x274>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e64:	2100      	movs	r1, #0
 8000e66:	9101      	str	r1, [sp, #4]
 8000e68:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000e6a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000e6e:	6459      	str	r1, [r3, #68]	; 0x44
 8000e70:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000e72:	f028 0303 	bic.w	r3, r8, #3
 8000e76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e7a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000e7e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8000e82:	9101      	str	r1, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e84:	f008 0103 	and.w	r1, r8, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e88:	9801      	ldr	r0, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8a:	689e      	ldr	r6, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e8c:	0089      	lsls	r1, r1, #2
 8000e8e:	200f      	movs	r0, #15
 8000e90:	4088      	lsls	r0, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e92:	45a3      	cmp	fp, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e94:	ea26 0000 	bic.w	r0, r6, r0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e98:	d012      	beq.n	8000ec0 <HAL_GPIO_Init+0x164>
 8000e9a:	45cb      	cmp	fp, r9
 8000e9c:	f000 8084 	beq.w	8000fa8 <HAL_GPIO_Init+0x24c>
 8000ea0:	4c50      	ldr	r4, [pc, #320]	; (8000fe4 <HAL_GPIO_Init+0x288>)
 8000ea2:	45a3      	cmp	fp, r4
 8000ea4:	f000 8085 	beq.w	8000fb2 <HAL_GPIO_Init+0x256>
 8000ea8:	4c4f      	ldr	r4, [pc, #316]	; (8000fe8 <HAL_GPIO_Init+0x28c>)
 8000eaa:	45a3      	cmp	fp, r4
 8000eac:	f000 808b 	beq.w	8000fc6 <HAL_GPIO_Init+0x26a>
 8000eb0:	4c4e      	ldr	r4, [pc, #312]	; (8000fec <HAL_GPIO_Init+0x290>)
 8000eb2:	45a3      	cmp	fp, r4
 8000eb4:	bf0c      	ite	eq
 8000eb6:	2404      	moveq	r4, #4
 8000eb8:	2407      	movne	r4, #7
 8000eba:	fa04 f101 	lsl.w	r1, r4, r1
 8000ebe:	4308      	orrs	r0, r1
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec0:	494b      	ldr	r1, [pc, #300]	; (8000ff0 <HAL_GPIO_Init+0x294>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec2:	6098      	str	r0, [r3, #8]
        temp = EXTI->IMR;
 8000ec4:	680b      	ldr	r3, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000ec6:	484a      	ldr	r0, [pc, #296]	; (8000ff0 <HAL_GPIO_Init+0x294>)
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	43e9      	mvns	r1, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eca:	03d6      	lsls	r6, r2, #15
          temp |= iocurrent;
 8000ecc:	bf4c      	ite	mi
 8000ece:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	400b      	andpl	r3, r1
        EXTI->IMR = temp;
 8000ed2:	6003      	str	r3, [r0, #0]

        temp = EXTI->EMR;
 8000ed4:	6843      	ldr	r3, [r0, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000ed6:	4846      	ldr	r0, [pc, #280]	; (8000ff0 <HAL_GPIO_Init+0x294>)
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed8:	0394      	lsls	r4, r2, #14
          temp |= iocurrent;
 8000eda:	bf4c      	ite	mi
 8000edc:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8000ede:	400b      	andpl	r3, r1
        EXTI->EMR = temp;
 8000ee0:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee2:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee4:	02d0      	lsls	r0, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000ee6:	4842      	ldr	r0, [pc, #264]	; (8000ff0 <HAL_GPIO_Init+0x294>)
          temp |= iocurrent;
 8000ee8:	bf4c      	ite	mi
 8000eea:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8000eec:	400b      	andpl	r3, r1
        EXTI->RTSR = temp;
 8000eee:	6083      	str	r3, [r0, #8]

        temp = EXTI->FTSR;
 8000ef0:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef2:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8000ef4:	bf54      	ite	pl
 8000ef6:	ea01 0503 	andpl.w	r5, r1, r3
        {
          temp |= iocurrent;
 8000efa:	431d      	orrmi	r5, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efc:	f108 0801 	add.w	r8, r8, #1
        }
        EXTI->FTSR = temp;
 8000f00:	4b3b      	ldr	r3, [pc, #236]	; (8000ff0 <HAL_GPIO_Init+0x294>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	f1b8 0f10 	cmp.w	r8, #16
        EXTI->FTSR = temp;
 8000f06:	60dd      	str	r5, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f08:	f47f af7f 	bne.w	8000e0a <HAL_GPIO_Init+0xae>
      }
    }
  }
}
 8000f0c:	b003      	add	sp, #12
 8000f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000f12:	21b4      	movs	r1, #180	; 0xb4
 8000f14:	482f      	ldr	r0, [pc, #188]	; (8000fd4 <HAL_GPIO_Init+0x278>)
 8000f16:	f7ff fd1b 	bl	8000950 <assert_failed>
 8000f1a:	e74a      	b.n	8000db2 <HAL_GPIO_Init+0x56>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f1c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d836      	bhi.n	8000f92 <HAL_GPIO_Init+0x236>
        temp = GPIOx->OSPEEDR; 
 8000f24:	f8db 0008 	ldr.w	r0, [fp, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f28:	40bb      	lsls	r3, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2a:	4030      	ands	r0, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2c:	4303      	orrs	r3, r0
        GPIOx->OSPEEDR = temp;
 8000f2e:	f8cb 3008 	str.w	r3, [fp, #8]
        temp = GPIOx->OTYPER;
 8000f32:	f8db 0004 	ldr.w	r0, [fp, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f36:	f3c2 1300 	ubfx	r3, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3a:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f3e:	fa03 f408 	lsl.w	r4, r3, r8
 8000f42:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 8000f44:	f8cb 4004 	str.w	r4, [fp, #4]
 8000f48:	e774      	b.n	8000e34 <HAL_GPIO_Init+0xd8>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000f4a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	d919      	bls.n	8000f86 <HAL_GPIO_Init+0x22a>
 8000f52:	21e0      	movs	r1, #224	; 0xe0
 8000f54:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <HAL_GPIO_Init+0x278>)
 8000f56:	f7ff fcfb 	bl	8000950 <assert_failed>
 8000f5a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000f5e:	f8da 2004 	ldr.w	r2, [sl, #4]
        temp = GPIOx->AFR[position >> 3U];
 8000f62:	ea4f 00d8 	mov.w	r0, r8, lsr #3
 8000f66:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6a:	f008 0107 	and.w	r1, r8, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f6e:	6a04      	ldr	r4, [r0, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f70:	0089      	lsls	r1, r1, #2
 8000f72:	f04f 0c0f 	mov.w	ip, #15
 8000f76:	fa0c fc01 	lsl.w	ip, ip, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f7a:	408b      	lsls	r3, r1
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7c:	ea24 040c 	bic.w	r4, r4, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f80:	4323      	orrs	r3, r4
        GPIOx->AFR[position >> 3U] = temp;
 8000f82:	6203      	str	r3, [r0, #32]
 8000f84:	e761      	b.n	8000e4a <HAL_GPIO_Init+0xee>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000f86:	f249 71f7 	movw	r1, #38903	; 0x97f7
 8000f8a:	40d9      	lsrs	r1, r3
 8000f8c:	07c9      	lsls	r1, r1, #31
 8000f8e:	d4e8      	bmi.n	8000f62 <HAL_GPIO_Init+0x206>
 8000f90:	e7df      	b.n	8000f52 <HAL_GPIO_Init+0x1f6>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f92:	21c8      	movs	r1, #200	; 0xc8
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <HAL_GPIO_Init+0x278>)
 8000f96:	f7ff fcdb 	bl	8000950 <assert_failed>
 8000f9a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8000f9e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8000fa2:	f022 0110 	bic.w	r1, r2, #16
 8000fa6:	e7bd      	b.n	8000f24 <HAL_GPIO_Init+0x1c8>
 8000fa8:	2401      	movs	r4, #1
 8000faa:	fa04 f101 	lsl.w	r1, r4, r1
 8000fae:	4308      	orrs	r0, r1
 8000fb0:	e786      	b.n	8000ec0 <HAL_GPIO_Init+0x164>
 8000fb2:	2402      	movs	r4, #2
 8000fb4:	fa04 f101 	lsl.w	r1, r4, r1
 8000fb8:	4308      	orrs	r0, r1
 8000fba:	e781      	b.n	8000ec0 <HAL_GPIO_Init+0x164>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000fbc:	21b6      	movs	r1, #182	; 0xb6
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <HAL_GPIO_Init+0x278>)
 8000fc0:	f7ff fcc6 	bl	8000950 <assert_failed>
 8000fc4:	e716      	b.n	8000df4 <HAL_GPIO_Init+0x98>
 8000fc6:	2403      	movs	r4, #3
 8000fc8:	fa04 f101 	lsl.w	r1, r4, r1
 8000fcc:	4308      	orrs	r0, r1
 8000fce:	e777      	b.n	8000ec0 <HAL_GPIO_Init+0x164>
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	08003838 	.word	0x08003838
 8000fd8:	10110000 	.word	0x10110000
 8000fdc:	10220000 	.word	0x10220000
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40013c00 	.word	0x40013c00
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	4606      	mov	r6, r0
 8000ffc:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000ffe:	460c      	mov	r4, r1
 8001000:	b161      	cbz	r1, 800101c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001002:	2d01      	cmp	r5, #1
 8001004:	d803      	bhi.n	800100e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 8001006:	b905      	cbnz	r5, 800100a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001008:	0424      	lsls	r4, r4, #16
 800100a:	61b4      	str	r4, [r6, #24]
  }
}
 800100c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800100e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_GPIO_WritePin+0x30>)
 8001014:	f7ff fc9c 	bl	8000950 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001018:	61b4      	str	r4, [r6, #24]
}
 800101a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800101c:	f240 119f 	movw	r1, #415	; 0x19f
 8001020:	4801      	ldr	r0, [pc, #4]	; (8001028 <HAL_GPIO_WritePin+0x30>)
 8001022:	f7ff fc95 	bl	8000950 <assert_failed>
 8001026:	e7ec      	b.n	8001002 <HAL_GPIO_WritePin+0xa>
 8001028:	08003838 	.word	0x08003838

0800102c <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800102c:	2800      	cmp	r0, #0
 800102e:	f000 811f 	beq.w	8001270 <HAL_I2C_Init+0x244>
{
 8001032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001034:	4a98      	ldr	r2, [pc, #608]	; (8001298 <HAL_I2C_Init+0x26c>)
 8001036:	6803      	ldr	r3, [r0, #0]
 8001038:	4293      	cmp	r3, r2
 800103a:	4604      	mov	r4, r0
 800103c:	d00c      	beq.n	8001058 <HAL_I2C_Init+0x2c>
 800103e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001042:	4293      	cmp	r3, r2
 8001044:	d008      	beq.n	8001058 <HAL_I2C_Init+0x2c>
 8001046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800104a:	4293      	cmp	r3, r2
 800104c:	d004      	beq.n	8001058 <HAL_I2C_Init+0x2c>
 800104e:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001052:	4892      	ldr	r0, [pc, #584]	; (800129c <HAL_I2C_Init+0x270>)
 8001054:	f7ff fc7c 	bl	8000950 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001058:	6863      	ldr	r3, [r4, #4]
 800105a:	4a91      	ldr	r2, [pc, #580]	; (80012a0 <HAL_I2C_Init+0x274>)
 800105c:	3b01      	subs	r3, #1
 800105e:	4293      	cmp	r3, r2
 8001060:	f200 80e8 	bhi.w	8001234 <HAL_I2C_Init+0x208>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8001064:	68a3      	ldr	r3, [r4, #8]
 8001066:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800106a:	d004      	beq.n	8001076 <HAL_I2C_Init+0x4a>
 800106c:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001070:	488a      	ldr	r0, [pc, #552]	; (800129c <HAL_I2C_Init+0x270>)
 8001072:	f7ff fc6d 	bl	8000950 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001076:	68e3      	ldr	r3, [r4, #12]
 8001078:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800107c:	f023 0303 	bic.w	r3, r3, #3
 8001080:	2b00      	cmp	r3, #0
 8001082:	f040 80ca 	bne.w	800121a <HAL_I2C_Init+0x1ee>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001086:	6923      	ldr	r3, [r4, #16]
 8001088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800108c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001090:	d004      	beq.n	800109c <HAL_I2C_Init+0x70>
 8001092:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001096:	4881      	ldr	r0, [pc, #516]	; (800129c <HAL_I2C_Init+0x270>)
 8001098:	f7ff fc5a 	bl	8000950 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800109c:	6963      	ldr	r3, [r4, #20]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	f200 80b0 	bhi.w	8001204 <HAL_I2C_Init+0x1d8>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80010a4:	69a3      	ldr	r3, [r4, #24]
 80010a6:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 80010aa:	f040 80ce 	bne.w	800124a <HAL_I2C_Init+0x21e>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80010ae:	69e3      	ldr	r3, [r4, #28]
 80010b0:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 80010b4:	d004      	beq.n	80010c0 <HAL_I2C_Init+0x94>
 80010b6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80010ba:	4878      	ldr	r0, [pc, #480]	; (800129c <HAL_I2C_Init+0x270>)
 80010bc:	f7ff fc48 	bl	8000950 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80010c0:	6a23      	ldr	r3, [r4, #32]
 80010c2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80010c6:	d004      	beq.n	80010d2 <HAL_I2C_Init+0xa6>
 80010c8:	f240 11c7 	movw	r1, #455	; 0x1c7
 80010cc:	4873      	ldr	r0, [pc, #460]	; (800129c <HAL_I2C_Init+0x270>)
 80010ce:	f7ff fc3f 	bl	8000950 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80010d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80c0 	beq.w	8001260 <HAL_I2C_Init+0x234>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010e0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80010e2:	2224      	movs	r2, #36	; 0x24
 80010e4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	f022 0201 	bic.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001100:	f001 fd1e 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001104:	6861      	ldr	r1, [r4, #4]
 8001106:	4b67      	ldr	r3, [pc, #412]	; (80012a4 <HAL_I2C_Init+0x278>)
 8001108:	4299      	cmp	r1, r3
 800110a:	d84c      	bhi.n	80011a6 <HAL_I2C_Init+0x17a>
 800110c:	4b66      	ldr	r3, [pc, #408]	; (80012a8 <HAL_I2C_Init+0x27c>)
 800110e:	4298      	cmp	r0, r3
 8001110:	f240 80ac 	bls.w	800126c <HAL_I2C_Init+0x240>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001114:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001116:	4b65      	ldr	r3, [pc, #404]	; (80012ac <HAL_I2C_Init+0x280>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001118:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800111a:	fba3 6300 	umull	r6, r3, r3, r0
 800111e:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001120:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001124:	431d      	orrs	r5, r3
 8001126:	6055      	str	r5, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001128:	6a15      	ldr	r5, [r2, #32]
 800112a:	3301      	adds	r3, #1
 800112c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001130:	432b      	orrs	r3, r5
 8001132:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001134:	69d5      	ldr	r5, [r2, #28]
 8001136:	0049      	lsls	r1, r1, #1
 8001138:	1e43      	subs	r3, r0, #1
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	3301      	adds	r3, #1
 8001140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001144:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8001148:	2b04      	cmp	r3, #4
 800114a:	bf38      	it	cc
 800114c:	2304      	movcc	r3, #4
 800114e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8001152:	432b      	orrs	r3, r5
 8001154:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001156:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 800115a:	6810      	ldr	r0, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800115c:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800115e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8001162:	432b      	orrs	r3, r5
 8001164:	4303      	orrs	r3, r0
 8001166:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001168:	6890      	ldr	r0, [r2, #8]
 800116a:	68e5      	ldr	r5, [r4, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800116c:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800116e:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8001172:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8001176:	4329      	orrs	r1, r5
 8001178:	4301      	orrs	r1, r0
 800117a:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800117c:	68d1      	ldr	r1, [r2, #12]
 800117e:	69a0      	ldr	r0, [r4, #24]
 8001180:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001184:	4303      	orrs	r3, r0
 8001186:	430b      	orrs	r3, r1
 8001188:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800118a:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800118c:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 800118e:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8001192:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8001194:	6011      	str	r1, [r2, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8001196:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001198:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800119a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800119e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80011a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011a6:	4b42      	ldr	r3, [pc, #264]	; (80012b0 <HAL_I2C_Init+0x284>)
 80011a8:	4298      	cmp	r0, r3
 80011aa:	d95f      	bls.n	800126c <HAL_I2C_Init+0x240>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ac:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80011ae:	4b3f      	ldr	r3, [pc, #252]	; (80012ac <HAL_I2C_Init+0x280>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011b0:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011b2:	4f40      	ldr	r7, [pc, #256]	; (80012b4 <HAL_I2C_Init+0x288>)
  freqrange = I2C_FREQRANGE(pclk1);
 80011b4:	fba3 5300 	umull	r5, r3, r3, r0
 80011b8:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ba:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80011be:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011c4:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011c6:	fb03 f305 	mul.w	r3, r3, r5
 80011ca:	fba7 5303 	umull	r5, r3, r7, r3
 80011ce:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011d0:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011d2:	099b      	lsrs	r3, r3, #6
 80011d4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80011d8:	3301      	adds	r3, #1
 80011da:	432b      	orrs	r3, r5
 80011dc:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011de:	69d5      	ldr	r5, [r2, #28]
 80011e0:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80011e4:	3801      	subs	r0, #1
 80011e6:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80011ea:	2e00      	cmp	r6, #0
 80011ec:	d142      	bne.n	8001274 <HAL_I2C_Init+0x248>
 80011ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80011f2:	fbb0 f0f1 	udiv	r0, r0, r1
 80011f6:	3001      	adds	r0, #1
 80011f8:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d147      	bne.n	8001290 <HAL_I2C_Init+0x264>
 8001200:	2301      	movs	r3, #1
 8001202:	e7a6      	b.n	8001152 <HAL_I2C_Init+0x126>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001204:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001208:	4824      	ldr	r0, [pc, #144]	; (800129c <HAL_I2C_Init+0x270>)
 800120a:	f7ff fba1 	bl	8000950 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800120e:	69a3      	ldr	r3, [r4, #24]
 8001210:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8001214:	f43f af4b 	beq.w	80010ae <HAL_I2C_Init+0x82>
 8001218:	e017      	b.n	800124a <HAL_I2C_Init+0x21e>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800121a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800121e:	481f      	ldr	r0, [pc, #124]	; (800129c <HAL_I2C_Init+0x270>)
 8001220:	f7ff fb96 	bl	8000950 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001224:	6923      	ldr	r3, [r4, #16]
 8001226:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800122a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800122e:	f47f af30 	bne.w	8001092 <HAL_I2C_Init+0x66>
 8001232:	e733      	b.n	800109c <HAL_I2C_Init+0x70>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001234:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001238:	4818      	ldr	r0, [pc, #96]	; (800129c <HAL_I2C_Init+0x270>)
 800123a:	f7ff fb89 	bl	8000950 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800123e:	68a3      	ldr	r3, [r4, #8]
 8001240:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8001244:	f43f af17 	beq.w	8001076 <HAL_I2C_Init+0x4a>
 8001248:	e710      	b.n	800106c <HAL_I2C_Init+0x40>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800124a:	f240 11c5 	movw	r1, #453	; 0x1c5
 800124e:	4813      	ldr	r0, [pc, #76]	; (800129c <HAL_I2C_Init+0x270>)
 8001250:	f7ff fb7e 	bl	8000950 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001254:	69e3      	ldr	r3, [r4, #28]
 8001256:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800125a:	f43f af31 	beq.w	80010c0 <HAL_I2C_Init+0x94>
 800125e:	e72a      	b.n	80010b6 <HAL_I2C_Init+0x8a>
    hi2c->Lock = HAL_UNLOCKED;
 8001260:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001264:	4620      	mov	r0, r4
 8001266:	f7ff f9af 	bl	80005c8 <HAL_I2C_MspInit>
 800126a:	e739      	b.n	80010e0 <HAL_I2C_Init+0xb4>
    return HAL_ERROR;
 800126c:	2001      	movs	r0, #1
}
 800126e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
}
 8001272:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001274:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001278:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800127c:	fbb0 f0f1 	udiv	r0, r0, r1
 8001280:	3001      	adds	r0, #1
 8001282:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001286:	2800      	cmp	r0, #0
 8001288:	d0ba      	beq.n	8001200 <HAL_I2C_Init+0x1d4>
 800128a:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 800128e:	e760      	b.n	8001152 <HAL_I2C_Init+0x126>
 8001290:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8001294:	e75d      	b.n	8001152 <HAL_I2C_Init+0x126>
 8001296:	bf00      	nop
 8001298:	40005400 	.word	0x40005400
 800129c:	08003874 	.word	0x08003874
 80012a0:	00061a7f 	.word	0x00061a7f
 80012a4:	000186a0 	.word	0x000186a0
 80012a8:	001e847f 	.word	0x001e847f
 80012ac:	431bde83 	.word	0x431bde83
 80012b0:	003d08ff 	.word	0x003d08ff
 80012b4:	10624dd3 	.word	0x10624dd3

080012b8 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
 80012ba:	1e5d      	subs	r5, r3, #1
 80012bc:	2d1f      	cmp	r5, #31
{
 80012be:	b085      	sub	sp, #20
 80012c0:	4604      	mov	r4, r0
 80012c2:	460e      	mov	r6, r1
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
 80012c4:	d90f      	bls.n	80012e6 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80012c6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80012ca:	d010      	beq.n	80012ee <HAL_I2C_Slave_Seq_Transmit_IT+0x36>
 80012cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80012d0:	d00d      	beq.n	80012ee <HAL_I2C_Slave_Seq_Transmit_IT+0x36>
 80012d2:	f640 71cd 	movw	r1, #4045	; 0xfcd
 80012d6:	4824      	ldr	r0, [pc, #144]	; (8001368 <HAL_I2C_Slave_Seq_Transmit_IT+0xb0>)
 80012d8:	e9cd 2300 	strd	r2, r3, [sp]
 80012dc:	f7ff fb38 	bl	8000950 <assert_failed>
 80012e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80012e4:	e003      	b.n	80012ee <HAL_I2C_Slave_Seq_Transmit_IT+0x36>
 80012e6:	4921      	ldr	r1, [pc, #132]	; (800136c <HAL_I2C_Slave_Seq_Transmit_IT+0xb4>)
 80012e8:	40e9      	lsrs	r1, r5
 80012ea:	07cd      	lsls	r5, r1, #31
 80012ec:	d5ee      	bpl.n	80012cc <HAL_I2C_Slave_Seq_Transmit_IT+0x14>

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80012ee:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80012f2:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80012f6:	2928      	cmp	r1, #40	; 0x28
 80012f8:	d130      	bne.n	800135c <HAL_I2C_Slave_Seq_Transmit_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80012fa:	2e00      	cmp	r6, #0
 80012fc:	d031      	beq.n	8001362 <HAL_I2C_Slave_Seq_Transmit_IT+0xaa>
 80012fe:	2a00      	cmp	r2, #0
 8001300:	d02f      	beq.n	8001362 <HAL_I2C_Slave_Seq_Transmit_IT+0xaa>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001302:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8001306:	2901      	cmp	r1, #1
 8001308:	d028      	beq.n	800135c <HAL_I2C_Slave_Seq_Transmit_IT+0xa4>

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800130a:	6821      	ldr	r1, [r4, #0]
 800130c:	6808      	ldr	r0, [r1, #0]
    __HAL_LOCK(hi2c);
 800130e:	2501      	movs	r5, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001310:	07c0      	lsls	r0, r0, #31
    __HAL_LOCK(hi2c);
 8001312:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001316:	d402      	bmi.n	800131e <HAL_I2C_Slave_Seq_Transmit_IT+0x66>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001318:	6808      	ldr	r0, [r1, #0]
 800131a:	4328      	orrs	r0, r5
 800131c:	6008      	str	r0, [r1, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800131e:	6808      	ldr	r0, [r1, #0]
 8001320:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8001324:	6008      	str	r0, [r1, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001326:	2729      	movs	r7, #41	; 0x29
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001328:	2000      	movs	r0, #0
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800132a:	2520      	movs	r5, #32
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800132c:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001330:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001334:	6420      	str	r0, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8001336:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001338:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800133a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800133c:	9003      	str	r0, [sp, #12]
 800133e:	694b      	ldr	r3, [r1, #20]
 8001340:	9303      	str	r3, [sp, #12]
 8001342:	698b      	ldr	r3, [r1, #24]
 8001344:	9303      	str	r3, [sp, #12]
 8001346:	9b03      	ldr	r3, [sp, #12]
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001348:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr    = pData;
 800134a:	6266      	str	r6, [r4, #36]	; 0x24
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800134c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    hi2c->XferSize    = hi2c->XferCount;
 8001350:	8522      	strh	r2, [r4, #40]	; 0x28
    __HAL_UNLOCK(hi2c);
 8001352:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001356:	604b      	str	r3, [r1, #4]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001358:	b005      	add	sp, #20
 800135a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800135c:	2002      	movs	r0, #2
}
 800135e:	b005      	add	sp, #20
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8001362:	2001      	movs	r0, #1
}
 8001364:	b005      	add	sp, #20
 8001366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001368:	08003874 	.word	0x08003874
 800136c:	8000808b 	.word	0x8000808b

08001370 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
 8001372:	1e5d      	subs	r5, r3, #1
 8001374:	2d1f      	cmp	r5, #31
{
 8001376:	b085      	sub	sp, #20
 8001378:	4604      	mov	r4, r0
 800137a:	460e      	mov	r6, r1
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
 800137c:	d90f      	bls.n	800139e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 800137e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001382:	d010      	beq.n	80013a6 <HAL_I2C_Slave_Seq_Receive_IT+0x36>
 8001384:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001388:	d00d      	beq.n	80013a6 <HAL_I2C_Slave_Seq_Receive_IT+0x36>
 800138a:	f241 01ac 	movw	r1, #4268	; 0x10ac
 800138e:	4824      	ldr	r0, [pc, #144]	; (8001420 <HAL_I2C_Slave_Seq_Receive_IT+0xb0>)
 8001390:	e9cd 2300 	strd	r2, r3, [sp]
 8001394:	f7ff fadc 	bl	8000950 <assert_failed>
 8001398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800139c:	e003      	b.n	80013a6 <HAL_I2C_Slave_Seq_Receive_IT+0x36>
 800139e:	4921      	ldr	r1, [pc, #132]	; (8001424 <HAL_I2C_Slave_Seq_Receive_IT+0xb4>)
 80013a0:	40e9      	lsrs	r1, r5
 80013a2:	07cd      	lsls	r5, r1, #31
 80013a4:	d5ee      	bpl.n	8001384 <HAL_I2C_Slave_Seq_Receive_IT+0x14>

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80013a6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80013aa:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80013ae:	2928      	cmp	r1, #40	; 0x28
 80013b0:	d130      	bne.n	8001414 <HAL_I2C_Slave_Seq_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80013b2:	2e00      	cmp	r6, #0
 80013b4:	d031      	beq.n	800141a <HAL_I2C_Slave_Seq_Receive_IT+0xaa>
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	d02f      	beq.n	800141a <HAL_I2C_Slave_Seq_Receive_IT+0xaa>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ba:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80013be:	2901      	cmp	r1, #1
 80013c0:	d028      	beq.n	8001414 <HAL_I2C_Slave_Seq_Receive_IT+0xa4>

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013c2:	6821      	ldr	r1, [r4, #0]
 80013c4:	6808      	ldr	r0, [r1, #0]
    __HAL_LOCK(hi2c);
 80013c6:	2501      	movs	r5, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013c8:	07c0      	lsls	r0, r0, #31
    __HAL_LOCK(hi2c);
 80013ca:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013ce:	d402      	bmi.n	80013d6 <HAL_I2C_Slave_Seq_Receive_IT+0x66>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013d0:	6808      	ldr	r0, [r1, #0]
 80013d2:	4328      	orrs	r0, r5
 80013d4:	6008      	str	r0, [r1, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013d6:	6808      	ldr	r0, [r1, #0]
 80013d8:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80013dc:	6008      	str	r0, [r1, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80013de:	272a      	movs	r7, #42	; 0x2a
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e0:	2000      	movs	r0, #0
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80013e2:	2520      	movs	r5, #32
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80013e4:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80013e8:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ec:	6420      	str	r0, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 80013ee:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80013f2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013f4:	9003      	str	r0, [sp, #12]
 80013f6:	694b      	ldr	r3, [r1, #20]
 80013f8:	9303      	str	r3, [sp, #12]
 80013fa:	698b      	ldr	r3, [r1, #24]
 80013fc:	9303      	str	r3, [sp, #12]
 80013fe:	9b03      	ldr	r3, [sp, #12]
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001400:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr    = pData;
 8001402:	6266      	str	r6, [r4, #36]	; 0x24
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001404:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    hi2c->XferSize    = hi2c->XferCount;
 8001408:	8522      	strh	r2, [r4, #40]	; 0x28
    __HAL_UNLOCK(hi2c);
 800140a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800140e:	604b      	str	r3, [r1, #4]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001410:	b005      	add	sp, #20
 8001412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001414:	2002      	movs	r0, #2
}
 8001416:	b005      	add	sp, #20
 8001418:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800141a:	2001      	movs	r0, #1
}
 800141c:	b005      	add	sp, #20
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001420:	08003874 	.word	0x08003874
 8001424:	8000808b 	.word	0x8000808b

08001428 <HAL_I2C_EnableListen_IT>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001428:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800142c:	2b20      	cmp	r3, #32
 800142e:	d114      	bne.n	800145a <HAL_I2C_EnableListen_IT+0x32>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001430:	2228      	movs	r2, #40	; 0x28

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001432:	6803      	ldr	r3, [r0, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001434:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	07d2      	lsls	r2, r2, #31
 800143c:	d403      	bmi.n	8001446 <HAL_I2C_EnableListen_IT+0x1e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800144c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001454:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001456:	2000      	movs	r0, #0
 8001458:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800145a:	2002      	movs	r0, #2
  }
}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <HAL_I2C_MasterTxCpltCallback>:
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <HAL_I2C_MasterRxCpltCallback>:
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <HAL_I2C_SlaveTxCpltCallback>:
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop

0800146c <HAL_I2C_SlaveRxCpltCallback>:
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop

08001470 <HAL_I2C_MemTxCpltCallback>:
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop

08001474 <I2C_MemoryTransmit_TXE_BTF>:
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001474:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d

  if (hi2c->EventCount == 0U)
 8001478:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800147a:	b538      	push	{r3, r4, r5, lr}
 800147c:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 800147e:	b959      	cbnz	r1, 8001498 <I2C_MemoryTransmit_TXE_BTF+0x24>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001480:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001482:	6801      	ldr	r1, [r0, #0]
 8001484:	2a01      	cmp	r2, #1
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001486:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001488:	d02a      	beq.n	80014e0 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800148a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800148e:	610a      	str	r2, [r1, #16]

      hi2c->EventCount++;
 8001490:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001492:	3201      	adds	r2, #1
 8001494:	6502      	str	r2, [r0, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001496:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 8001498:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800149a:	2901      	cmp	r1, #1
 800149c:	d026      	beq.n	80014ec <I2C_MemoryTransmit_TXE_BTF+0x78>
  else if (hi2c->EventCount == 2U)
 800149e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80014a0:	2902      	cmp	r1, #2
 80014a2:	d1f8      	bne.n	8001496 <I2C_MemoryTransmit_TXE_BTF+0x22>
 80014a4:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80014a6:	2a22      	cmp	r2, #34	; 0x22
 80014a8:	d02c      	beq.n	8001504 <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80014aa:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80014ac:	b289      	uxth	r1, r1
 80014ae:	bb29      	cbnz	r1, 80014fc <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80014b0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80014b2:	b289      	uxth	r1, r1
 80014b4:	2900      	cmp	r1, #0
 80014b6:	d1ee      	bne.n	8001496 <I2C_MemoryTransmit_TXE_BTF+0x22>
 80014b8:	2a21      	cmp	r2, #33	; 0x21
 80014ba:	d1ec      	bne.n	8001496 <I2C_MemoryTransmit_TXE_BTF+0x22>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014bc:	6802      	ldr	r2, [r0, #0]
 80014be:	6854      	ldr	r4, [r2, #4]
 80014c0:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 80014c4:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c6:	6814      	ldr	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80014c8:	2520      	movs	r5, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ca:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80014ce:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80014d0:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d6:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80014da:	f7ff ffc9 	bl	8001470 <HAL_I2C_MemTxCpltCallback>
}
 80014de:	bd38      	pop	{r3, r4, r5, pc}
 80014e0:	b2d2      	uxtb	r2, r2
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80014e2:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 80014e4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80014e6:	3202      	adds	r2, #2
 80014e8:	6502      	str	r2, [r0, #80]	; 0x50
}
 80014ea:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80014ec:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80014ee:	6801      	ldr	r1, [r0, #0]
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 80014f4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80014f6:	3201      	adds	r2, #1
 80014f8:	6502      	str	r2, [r0, #80]	; 0x50
}
 80014fa:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80014fc:	2a21      	cmp	r2, #33	; 0x21
 80014fe:	d007      	beq.n	8001510 <I2C_MemoryTransmit_TXE_BTF+0x9c>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 8001502:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001504:	6802      	ldr	r2, [r0, #0]
 8001506:	6813      	ldr	r3, [r2, #0]
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]
}
 800150e:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001510:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001512:	6802      	ldr	r2, [r0, #0]
 8001514:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001518:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 800151a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800151c:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800151e:	3a01      	subs	r2, #1
 8001520:	b292      	uxth	r2, r2
 8001522:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001524:	bd38      	pop	{r3, r4, r5, pc}
 8001526:	bf00      	nop

08001528 <HAL_I2C_MemRxCpltCallback>:
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <HAL_I2C_ErrorCallback>:
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop

08001530 <HAL_I2C_AbortCpltCallback>:
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop

08001534 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001534:	b570      	push	{r4, r5, r6, lr}
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001536:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <I2C_DMAAbort+0xf0>)
 8001538:	4c3b      	ldr	r4, [pc, #236]	; (8001628 <I2C_DMAAbort+0xf4>)
 800153a:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800153c:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 800153e:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	fba4 2303 	umull	r2, r3, r4, r3
  __IO uint32_t count = 0U;
 8001546:	2200      	movs	r2, #0
 8001548:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800154a:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800154c:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
 8001550:	680a      	ldr	r2, [r1, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001552:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001556:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800155a:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800155c:	b2c0      	uxtb	r0, r0
 800155e:	e005      	b.n	800156c <I2C_DMAAbort+0x38>
    if (count == 0U)
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
    count--;
 8001560:	9b01      	ldr	r3, [sp, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	9301      	str	r3, [sp, #4]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8001566:	6813      	ldr	r3, [r2, #0]
 8001568:	059b      	lsls	r3, r3, #22
 800156a:	d506      	bpl.n	800157a <I2C_DMAAbort+0x46>
    if (count == 0U)
 800156c:	9b01      	ldr	r3, [sp, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f6      	bne.n	8001560 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001572:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001574:	f043 0320 	orr.w	r3, r3, #32
 8001578:	640b      	str	r3, [r1, #64]	; 0x40
 800157a:	e9d1 430d 	ldrd	r4, r3, [r1, #52]	; 0x34

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800157e:	b34c      	cbz	r4, 80015d4 <I2C_DMAAbort+0xa0>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8001580:	2500      	movs	r5, #0
 8001582:	63e5      	str	r5, [r4, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8001584:	b1fb      	cbz	r3, 80015c6 <I2C_DMAAbort+0x92>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001586:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8001588:	63dd      	str	r5, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800158a:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 800158e:	6016      	str	r6, [r2, #0]

  hi2c->XferCount = 0U;
 8001590:	854d      	strh	r5, [r1, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001592:	6525      	str	r5, [r4, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001594:	2400      	movs	r4, #0
 8001596:	651c      	str	r4, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8001598:	6813      	ldr	r3, [r2, #0]
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6013      	str	r3, [r2, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80015a0:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 80015a4:	2b60      	cmp	r3, #96	; 0x60
 80015a6:	d02a      	beq.n	80015fe <I2C_DMAAbort+0xca>
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80015a8:	f000 0028 	and.w	r0, r0, #40	; 0x28
 80015ac:	2828      	cmp	r0, #40	; 0x28
 80015ae:	d019      	beq.n	80015e4 <I2C_DMAAbort+0xb0>
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_LISTEN;
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80015b0:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b2:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80015b4:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b8:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80015bc:	4608      	mov	r0, r1
 80015be:	f7ff ffb5 	bl	800152c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80015c2:	b002      	add	sp, #8
 80015c4:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015c6:	6815      	ldr	r5, [r2, #0]
 80015c8:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80015cc:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 80015ce:	854b      	strh	r3, [r1, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80015d0:	6523      	str	r3, [r4, #80]	; 0x50
 80015d2:	e7e1      	b.n	8001598 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 80015d4:	b1fb      	cbz	r3, 8001616 <I2C_DMAAbort+0xe2>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015d6:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 80015d8:	63dc      	str	r4, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015da:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80015de:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 80015e0:	854c      	strh	r4, [r1, #42]	; 0x2a
 80015e2:	e7d7      	b.n	8001594 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80015e4:	6813      	ldr	r3, [r2, #0]
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ec:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80015ee:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f4:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80015f6:	630c      	str	r4, [r1, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80015f8:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
 80015fc:	e7de      	b.n	80015bc <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80015fe:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8001600:	2220      	movs	r2, #32
 8001602:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
    HAL_I2C_AbortCpltCallback(hi2c);
 8001606:	4608      	mov	r0, r1
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001608:	f881 303e 	strb.w	r3, [r1, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800160c:	640b      	str	r3, [r1, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800160e:	f7ff ff8f 	bl	8001530 <HAL_I2C_AbortCpltCallback>
}
 8001612:	b002      	add	sp, #8
 8001614:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001616:	6814      	ldr	r4, [r2, #0]
 8001618:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800161c:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 800161e:	854b      	strh	r3, [r1, #42]	; 0x2a
 8001620:	e7ba      	b.n	8001598 <I2C_DMAAbort+0x64>
 8001622:	bf00      	nop
 8001624:	2000000c 	.word	0x2000000c
 8001628:	14f8b589 	.word	0x14f8b589

0800162c <HAL_I2C_EV_IRQHandler>:
{
 800162c:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800162e:	6803      	ldr	r3, [r0, #0]
{
 8001630:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001632:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001634:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001636:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800163a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800163e:	b2d2      	uxtb	r2, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001640:	2a10      	cmp	r2, #16
{
 8001642:	b08c      	sub	sp, #48	; 0x30
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001644:	d020      	beq.n	8001688 <HAL_I2C_EV_IRQHandler+0x5c>
 8001646:	2a40      	cmp	r2, #64	; 0x40
 8001648:	d01e      	beq.n	8001688 <HAL_I2C_EV_IRQHandler+0x5c>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800164a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800164c:	b2c9      	uxtb	r1, r1
 800164e:	2a00      	cmp	r2, #0
 8001650:	f000 80bb 	beq.w	80017ca <HAL_I2C_EV_IRQHandler+0x19e>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001654:	695a      	ldr	r2, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8001656:	2600      	movs	r6, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001658:	f3c2 0540 	ubfx	r5, r2, #1, #1
 800165c:	2d00      	cmp	r5, #0
 800165e:	d078      	beq.n	8001752 <HAL_I2C_EV_IRQHandler+0x126>
 8001660:	0585      	lsls	r5, r0, #22
 8001662:	d57b      	bpl.n	800175c <HAL_I2C_EV_IRQHandler+0x130>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001664:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001666:	b102      	cbz	r2, 800166a <HAL_I2C_EV_IRQHandler+0x3e>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001668:	699e      	ldr	r6, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800166a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800166e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001672:	2a28      	cmp	r2, #40	; 0x28
 8001674:	f000 8215 	beq.w	8001aa2 <HAL_I2C_EV_IRQHandler+0x476>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001678:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 800167c:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800167e:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8001680:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8001684:	b00c      	add	sp, #48	; 0x30
 8001686:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001688:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800168a:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800168c:	f011 0f01 	tst.w	r1, #1
 8001690:	d139      	bne.n	8001706 <HAL_I2C_EV_IRQHandler+0xda>
 8001692:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8001696:	d0f5      	beq.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
 8001698:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 800169c:	d0f2      	beq.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800169e:	070d      	lsls	r5, r1, #28
 80016a0:	f140 8099 	bpl.w	80017d6 <HAL_I2C_EV_IRQHandler+0x1aa>
 80016a4:	0585      	lsls	r5, r0, #22
 80016a6:	f100 81ed 	bmi.w	8001a84 <HAL_I2C_EV_IRQHandler+0x458>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80016aa:	0776      	lsls	r6, r6, #29
 80016ac:	f140 8100 	bpl.w	80018b0 <HAL_I2C_EV_IRQHandler+0x284>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80016b0:	685d      	ldr	r5, [r3, #4]
 80016b2:	052d      	lsls	r5, r5, #20
 80016b4:	d4e6      	bmi.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
 80016b6:	f3c1 0580 	ubfx	r5, r1, #2, #1
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016ba:	0609      	lsls	r1, r1, #24
 80016bc:	f140 81a1 	bpl.w	8001a02 <HAL_I2C_EV_IRQHandler+0x3d6>
 80016c0:	0546      	lsls	r6, r0, #21
 80016c2:	f140 819e 	bpl.w	8001a02 <HAL_I2C_EV_IRQHandler+0x3d6>
 80016c6:	2d00      	cmp	r5, #0
 80016c8:	f040 819e 	bne.w	8001a08 <HAL_I2C_EV_IRQHandler+0x3dc>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016cc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80016d0:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80016d2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80016d6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016d8:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80016da:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80016dc:	2800      	cmp	r0, #0
 80016de:	f040 8378 	bne.w	8001dd2 <HAL_I2C_EV_IRQHandler+0x7a6>
 80016e2:	2a21      	cmp	r2, #33	; 0x21
 80016e4:	f000 8428 	beq.w	8001f38 <HAL_I2C_EV_IRQHandler+0x90c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80016e8:	2940      	cmp	r1, #64	; 0x40
 80016ea:	d1cb      	bne.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80016ec:	2a22      	cmp	r2, #34	; 0x22
 80016ee:	d1c9      	bne.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->XferCount == 0U)
 80016f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80016f2:	b292      	uxth	r2, r2
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	f000 8440 	beq.w	8001f7a <HAL_I2C_EV_IRQHandler+0x94e>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80016fa:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80016fe:	2a40      	cmp	r2, #64	; 0x40
 8001700:	f040 80b6 	bne.w	8001870 <HAL_I2C_EV_IRQHandler+0x244>
 8001704:	e186      	b.n	8001a14 <HAL_I2C_EV_IRQHandler+0x3e8>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001706:	0585      	lsls	r5, r0, #22
 8001708:	d562      	bpl.n	80017d0 <HAL_I2C_EV_IRQHandler+0x1a4>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800170a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800170c:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8001710:	f000 81e2 	beq.w	8001ad8 <HAL_I2C_EV_IRQHandler+0x4ac>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001714:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001716:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800171a:	bf04      	itt	eq
 800171c:	2208      	moveq	r2, #8
 800171e:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001720:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001724:	2a40      	cmp	r2, #64	; 0x40
 8001726:	f000 81d0 	beq.w	8001aca <HAL_I2C_EV_IRQHandler+0x49e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800172a:	6922      	ldr	r2, [r4, #16]
 800172c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001730:	f000 8190 	beq.w	8001a54 <HAL_I2C_EV_IRQHandler+0x428>
      if (hi2c->EventCount == 0U)
 8001734:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001736:	2a00      	cmp	r2, #0
 8001738:	f000 81d1 	beq.w	8001ade <HAL_I2C_EV_IRQHandler+0x4b2>
      else if (hi2c->EventCount == 1U)
 800173c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800173e:	2a01      	cmp	r2, #1
 8001740:	d1a0      	bne.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001742:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001744:	11d2      	asrs	r2, r2, #7
 8001746:	f002 0206 	and.w	r2, r2, #6
 800174a:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 800174e:	611a      	str	r2, [r3, #16]
 8001750:	e798      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001752:	06d6      	lsls	r6, r2, #27
 8001754:	d502      	bpl.n	800175c <HAL_I2C_EV_IRQHandler+0x130>
 8001756:	0586      	lsls	r6, r0, #22
 8001758:	f100 80d8 	bmi.w	800190c <HAL_I2C_EV_IRQHandler+0x2e0>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800175c:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8001760:	2921      	cmp	r1, #33	; 0x21
 8001762:	f3c2 0580 	ubfx	r5, r2, #2, #1
 8001766:	d04e      	beq.n	8001806 <HAL_I2C_EV_IRQHandler+0x1da>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001768:	0651      	lsls	r1, r2, #25
 800176a:	f140 808b 	bpl.w	8001884 <HAL_I2C_EV_IRQHandler+0x258>
 800176e:	0542      	lsls	r2, r0, #21
 8001770:	f140 8088 	bpl.w	8001884 <HAL_I2C_EV_IRQHandler+0x258>
 8001774:	2d00      	cmp	r5, #0
 8001776:	f040 8088 	bne.w	800188a <HAL_I2C_EV_IRQHandler+0x25e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800177a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 800177e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001780:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001782:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8001784:	2a00      	cmp	r2, #0
 8001786:	f43f af7d 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800178a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8001790:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001792:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001794:	3b01      	subs	r3, #1
 8001796:	b29b      	uxth	r3, r3
 8001798:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800179a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800179c:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800179e:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80017a0:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f47f af6e 	bne.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
 80017a8:	292a      	cmp	r1, #42	; 0x2a
 80017aa:	f47f af6b 	bne.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80017ae:	6822      	ldr	r2, [r4, #0]
 80017b0:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80017b2:	2522      	movs	r5, #34	; 0x22
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80017b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80017b8:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80017ba:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80017bc:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80017be:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80017c0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80017c4:	f7ff fe52 	bl	800146c <HAL_I2C_SlaveRxCpltCallback>
 80017c8:	e75c      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017ca:	699e      	ldr	r6, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	e743      	b.n	8001658 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017d0:	070d      	lsls	r5, r1, #28
 80017d2:	f53f af6a 	bmi.w	80016aa <HAL_I2C_EV_IRQHandler+0x7e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017d6:	078d      	lsls	r5, r1, #30
 80017d8:	f57f af67 	bpl.w	80016aa <HAL_I2C_EV_IRQHandler+0x7e>
 80017dc:	0585      	lsls	r5, r0, #22
 80017de:	f57f af64 	bpl.w	80016aa <HAL_I2C_EV_IRQHandler+0x7e>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80017e2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80017e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80017e8:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80017ea:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80017ee:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80017f0:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80017f2:	f000 8209 	beq.w	8001c08 <HAL_I2C_EV_IRQHandler+0x5dc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017f6:	2200      	movs	r2, #0
 80017f8:	9209      	str	r2, [sp, #36]	; 0x24
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	9209      	str	r2, [sp, #36]	; 0x24
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	9309      	str	r3, [sp, #36]	; 0x24
 8001802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001804:	e73e      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001806:	0612      	lsls	r2, r2, #24
 8001808:	d527      	bpl.n	800185a <HAL_I2C_EV_IRQHandler+0x22e>
 800180a:	0546      	lsls	r6, r0, #21
 800180c:	d525      	bpl.n	800185a <HAL_I2C_EV_IRQHandler+0x22e>
 800180e:	bb3d      	cbnz	r5, 8001860 <HAL_I2C_EV_IRQHandler+0x234>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001810:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8001814:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001816:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001818:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 800181a:	2a00      	cmp	r2, #0
 800181c:	f43f af32 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001820:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001822:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001826:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8001828:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800182a:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800182c:	3a01      	subs	r2, #1
 800182e:	b292      	uxth	r2, r2
 8001830:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001832:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001834:	b292      	uxth	r2, r2
 8001836:	2a00      	cmp	r2, #0
 8001838:	f47f af24 	bne.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
 800183c:	2829      	cmp	r0, #41	; 0x29
 800183e:	f47f af21 	bne.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001842:	685a      	ldr	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001844:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800184a:	605a      	str	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800184c:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800184e:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001850:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001854:	f7ff fe08 	bl	8001468 <HAL_I2C_SlaveTxCpltCallback>
 8001858:	e714      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800185a:	2d00      	cmp	r5, #0
 800185c:	f43f af12 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
 8001860:	0580      	lsls	r0, r0, #22
 8001862:	f57f af0f 	bpl.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 8001866:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001868:	b292      	uxth	r2, r2
 800186a:	2a00      	cmp	r2, #0
 800186c:	f43f af0a 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001870:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001872:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001876:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8001878:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800187a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800187c:	3b01      	subs	r3, #1
 800187e:	b29b      	uxth	r3, r3
 8001880:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001882:	e6ff      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001884:	2d00      	cmp	r5, #0
 8001886:	f43f aefd 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
 800188a:	0586      	lsls	r6, r0, #22
 800188c:	f57f aefa 	bpl.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
  if (hi2c->XferCount != 0U)
 8001890:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001892:	b292      	uxth	r2, r2
 8001894:	2a00      	cmp	r2, #0
 8001896:	f43f aef5 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800189a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80018a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80018a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80018a8:	3201      	adds	r2, #1
    hi2c->XferCount--;
 80018aa:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80018ac:	6262      	str	r2, [r4, #36]	; 0x24
 80018ae:	e6e9      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	0516      	lsls	r6, r2, #20
 80018b4:	f53f aee6 	bmi.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018b8:	064d      	lsls	r5, r1, #25
 80018ba:	f3c1 0280 	ubfx	r2, r1, #2, #1
 80018be:	f140 80af 	bpl.w	8001a20 <HAL_I2C_EV_IRQHandler+0x3f4>
 80018c2:	0541      	lsls	r1, r0, #21
 80018c4:	f140 80ac 	bpl.w	8001a20 <HAL_I2C_EV_IRQHandler+0x3f4>
 80018c8:	2a00      	cmp	r2, #0
 80018ca:	f040 80ac 	bne.w	8001a26 <HAL_I2C_EV_IRQHandler+0x3fa>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018ce:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80018d2:	2922      	cmp	r1, #34	; 0x22
 80018d4:	f47f aed6 	bne.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    tmp = hi2c->XferCount;
 80018d8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80018da:	b289      	uxth	r1, r1
    if (tmp > 3U)
 80018dc:	2903      	cmp	r1, #3
 80018de:	f240 82ea 	bls.w	8001eb6 <HAL_I2C_EV_IRQHandler+0x88a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80018e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80018ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80018f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018f4:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80018f6:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 80018f8:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 80018fa:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 80018fc:	f47f aec2 	bne.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001900:	6822      	ldr	r2, [r4, #0]
 8001902:	6853      	ldr	r3, [r2, #4]
 8001904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001908:	6053      	str	r3, [r2, #4]
 800190a:	e6bb      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800190c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001916:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001918:	950b      	str	r5, [sp, #44]	; 0x2c
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	920b      	str	r2, [sp, #44]	; 0x2c
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800192e:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001930:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001932:	b2cd      	uxtb	r5, r1
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001934:	0511      	lsls	r1, r2, #20
 8001936:	d521      	bpl.n	800197c <HAL_I2C_EV_IRQHandler+0x350>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001938:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 800193c:	2a22      	cmp	r2, #34	; 0x22
 800193e:	f000 813e 	beq.w	8001bbe <HAL_I2C_EV_IRQHandler+0x592>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8001942:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001944:	6802      	ldr	r2, [r0, #0]
 8001946:	6852      	ldr	r2, [r2, #4]
 8001948:	b292      	uxth	r2, r2
 800194a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800194c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800194e:	b292      	uxth	r2, r2
 8001950:	b11a      	cbz	r2, 800195a <HAL_I2C_EV_IRQHandler+0x32e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001952:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001954:	f042 0204 	orr.w	r2, r2, #4
 8001958:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001960:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001962:	f7ff f9f7 	bl	8000d54 <HAL_DMA_GetState>
 8001966:	2801      	cmp	r0, #1
 8001968:	d008      	beq.n	800197c <HAL_I2C_EV_IRQHandler+0x350>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800196a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800196c:	4ba4      	ldr	r3, [pc, #656]	; (8001c00 <HAL_I2C_EV_IRQHandler+0x5d4>)
 800196e:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001970:	f7ff f9de 	bl	8000d30 <HAL_DMA_Abort_IT>
 8001974:	b110      	cbz	r0, 800197c <HAL_I2C_EV_IRQHandler+0x350>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001976:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001978:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800197a:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 800197c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800197e:	b29b      	uxth	r3, r3
 8001980:	b313      	cbz	r3, 80019c8 <HAL_I2C_EV_IRQHandler+0x39c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	0752      	lsls	r2, r2, #29
 8001988:	d50a      	bpl.n	80019a0 <HAL_I2C_EV_IRQHandler+0x374>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800198a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001990:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001992:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001994:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 8001996:	3a01      	subs	r2, #1
 8001998:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800199a:	3101      	adds	r1, #1
      hi2c->XferCount--;
 800199c:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800199e:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	0656      	lsls	r6, r2, #25
 80019a4:	d509      	bpl.n	80019ba <HAL_I2C_EV_IRQHandler+0x38e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80019ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80019ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80019b4:	3201      	adds	r2, #1
      hi2c->XferCount--;
 80019b6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80019b8:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 80019ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b11b      	cbz	r3, 80019c8 <HAL_I2C_EV_IRQHandler+0x39c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 8095 	bne.w	8001afa <HAL_I2C_EV_IRQHandler+0x4ce>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80019d0:	2d2a      	cmp	r5, #42	; 0x2a
 80019d2:	f000 8159 	beq.w	8001c88 <HAL_I2C_EV_IRQHandler+0x65c>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80019d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80019da:	2b28      	cmp	r3, #40	; 0x28
 80019dc:	f000 80dd 	beq.w	8001b9a <HAL_I2C_EV_IRQHandler+0x56e>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80019e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019e2:	2b22      	cmp	r3, #34	; 0x22
 80019e4:	d002      	beq.n	80019ec <HAL_I2C_EV_IRQHandler+0x3c0>
 80019e6:	2d22      	cmp	r5, #34	; 0x22
 80019e8:	f47f ae4c 	bne.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 80019ec:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80019f0:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80019f2:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 80019f4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80019fc:	f7ff fd36 	bl	800146c <HAL_I2C_SlaveRxCpltCallback>
 8001a00:	e640      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a02:	2d00      	cmp	r5, #0
 8001a04:	f43f ae3e 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
 8001a08:	0581      	lsls	r1, r0, #22
 8001a0a:	f57f ae3b 	bpl.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8001a0e:	2a10      	cmp	r2, #16
 8001a10:	f000 8142 	beq.w	8001c98 <HAL_I2C_EV_IRQHandler+0x66c>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a14:	4620      	mov	r0, r4
}
 8001a16:	b00c      	add	sp, #48	; 0x30
 8001a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a1c:	f7ff bd2a 	b.w	8001474 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	f43f ae2f 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
 8001a26:	0586      	lsls	r6, r0, #22
 8001a28:	f57f ae2c 	bpl.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8001a2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001a30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a32:	b292      	uxth	r2, r2
 8001a34:	2a04      	cmp	r2, #4
 8001a36:	f000 8182 	beq.w	8001d3e <HAL_I2C_EV_IRQHandler+0x712>
  else if (hi2c->XferCount == 3U)
 8001a3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001a3c:	b292      	uxth	r2, r2
 8001a3e:	2a03      	cmp	r2, #3
 8001a40:	f000 8184 	beq.w	8001d4c <HAL_I2C_EV_IRQHandler+0x720>
  else if (hi2c->XferCount == 2U)
 8001a44:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001a46:	b292      	uxth	r2, r2
 8001a48:	2a02      	cmp	r2, #2
 8001a4a:	f000 81fc 	beq.w	8001e46 <HAL_I2C_EV_IRQHandler+0x81a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	700b      	strb	r3, [r1, #0]
 8001a52:	e725      	b.n	80018a0 <HAL_I2C_EV_IRQHandler+0x274>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001a54:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001a58:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001a5a:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001a5c:	bf16      	itet	ne
 8001a5e:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001a62:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001a66:	b2d2      	uxtbne	r2, r2
 8001a68:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001a6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001a6c:	2a00      	cmp	r2, #0
 8001a6e:	f000 80e8 	beq.w	8001c42 <HAL_I2C_EV_IRQHandler+0x616>
 8001a72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a74:	2a00      	cmp	r2, #0
 8001a76:	f000 80e4 	beq.w	8001c42 <HAL_I2C_EV_IRQHandler+0x616>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	e5ff      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001a84:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a88:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001a8a:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	f000 8091 	beq.w	8001bb4 <HAL_I2C_EV_IRQHandler+0x588>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001a92:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8001a94:	2a00      	cmp	r2, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_I2C_EV_IRQHandler+0x44e>
 8001a98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a9c:	2a00      	cmp	r2, #0
 8001a9e:	d1ec      	bne.n	8001a7a <HAL_I2C_EV_IRQHandler+0x44e>
 8001aa0:	e5f0      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa8:	605a      	str	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001aaa:	ea6f 0196 	mvn.w	r1, r6, lsr #2
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8001aae:	0633      	lsls	r3, r6, #24
    __HAL_UNLOCK(hi2c);
 8001ab0:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001ab4:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8001ab8:	bf54      	ite	pl
 8001aba:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8001abc:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8001abe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7fe fdca 	bl	800065c <HAL_I2C_AddrCallback>
 8001ac8:	e5dc      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->EventCount == 0U)
 8001aca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001acc:	b97a      	cbnz	r2, 8001aee <HAL_I2C_EV_IRQHandler+0x4c2>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001ace:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ad0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	e5d5      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001adc:	e620      	b.n	8001720 <HAL_I2C_EV_IRQHandler+0xf4>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001ade:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ae0:	11d2      	asrs	r2, r2, #7
 8001ae2:	f002 0206 	and.w	r2, r2, #6
 8001ae6:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	e5ca      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001aee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	e5c4      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001afa:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8001afe:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001b06:	2a10      	cmp	r2, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b08:	b2c9      	uxtb	r1, r1
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001b0a:	f000 809f 	beq.w	8001c4c <HAL_I2C_EV_IRQHandler+0x620>
 8001b0e:	2a40      	cmp	r2, #64	; 0x40
 8001b10:	f000 809c 	beq.w	8001c4c <HAL_I2C_EV_IRQHandler+0x620>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b14:	f001 0228 	and.w	r2, r1, #40	; 0x28
 8001b18:	2a28      	cmp	r2, #40	; 0x28
 8001b1a:	f000 80e3 	beq.w	8001ce4 <HAL_I2C_EV_IRQHandler+0x6b8>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	0510      	lsls	r0, r2, #20
 8001b22:	d407      	bmi.n	8001b34 <HAL_I2C_EV_IRQHandler+0x508>
 8001b24:	2960      	cmp	r1, #96	; 0x60
 8001b26:	d005      	beq.n	8001b34 <HAL_I2C_EV_IRQHandler+0x508>
      hi2c->State = HAL_I2C_STATE_READY;
 8001b28:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2a:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b30:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b34:	2200      	movs	r2, #0
 8001b36:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001b3e:	f000 8091 	beq.w	8001c64 <HAL_I2C_EV_IRQHandler+0x638>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001b42:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001b44:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4a:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001b4c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	f000 810a 	beq.w	8001d6a <HAL_I2C_EV_IRQHandler+0x73e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_I2C_EV_IRQHandler+0x5d4>)
 8001b58:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001b5a:	f7ff f8e9 	bl	8000d30 <HAL_DMA_Abort_IT>
 8001b5e:	b150      	cbz	r0, 8001b76 <HAL_I2C_EV_IRQHandler+0x54a>
        __HAL_I2C_DISABLE(hi2c);
 8001b60:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001b62:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001b64:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001b66:	6d01      	ldr	r1, [r0, #80]	; 0x50
        __HAL_I2C_DISABLE(hi2c);
 8001b68:	f023 0301 	bic.w	r3, r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8001b6c:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 8001b6e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001b70:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001b74:	4788      	blx	r1
  CurrentError = hi2c->ErrorCode;
 8001b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8001b78:	0718      	lsls	r0, r3, #28
 8001b7a:	d004      	beq.n	8001b86 <HAL_I2C_EV_IRQHandler+0x55a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b7c:	6822      	ldr	r2, [r4, #0]
 8001b7e:	6853      	ldr	r3, [r2, #4]
 8001b80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b84:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8001b86:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001b8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b8c:	0751      	lsls	r1, r2, #29
  CurrentState = hi2c->State;
 8001b8e:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001b90:	f57f ad78 	bpl.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
 8001b94:	2b28      	cmp	r3, #40	; 0x28
 8001b96:	f47f ad75 	bne.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8001b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8001b9e:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8001ba4:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8001ba6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001baa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001bae:	f7fe fdaf 	bl	8000710 <HAL_I2C_ListenCpltCallback>
 8001bb2:	e567      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001bb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	f47f af6b 	bne.w	8001a92 <HAL_I2C_EV_IRQHandler+0x466>
 8001bbc:	e562      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8001bbe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bc0:	6802      	ldr	r2, [r0, #0]
 8001bc2:	6852      	ldr	r2, [r2, #4]
 8001bc4:	b292      	uxth	r2, r2
 8001bc6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001bc8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	b11a      	cbz	r2, 8001bd6 <HAL_I2C_EV_IRQHandler+0x5aa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001bd0:	f042 0204 	orr.w	r2, r2, #4
 8001bd4:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bdc:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001bde:	f7ff f8b9 	bl	8000d54 <HAL_DMA_GetState>
 8001be2:	2801      	cmp	r0, #1
 8001be4:	f43f aeca 	beq.w	800197c <HAL_I2C_EV_IRQHandler+0x350>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001be8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_I2C_EV_IRQHandler+0x5d4>)
 8001bec:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001bee:	f7ff f89f 	bl	8000d30 <HAL_DMA_Abort_IT>
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	f43f aec2 	beq.w	800197c <HAL_I2C_EV_IRQHandler+0x350>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001bf8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bfa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001bfc:	4798      	blx	r3
 8001bfe:	e6bd      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x350>
 8001c00:	08001535 	.word	0x08001535
 8001c04:	ffff0000 	.word	0xffff0000
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001c08:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001c0a:	b911      	cbnz	r1, 8001c12 <HAL_I2C_EV_IRQHandler+0x5e6>
 8001c0c:	2a40      	cmp	r2, #64	; 0x40
 8001c0e:	f000 80e4 	beq.w	8001dda <HAL_I2C_EV_IRQHandler+0x7ae>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001c12:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c14:	b922      	cbnz	r2, 8001c20 <HAL_I2C_EV_IRQHandler+0x5f4>
 8001c16:	6921      	ldr	r1, [r4, #16]
 8001c18:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8001c1c:	f000 80e4 	beq.w	8001de8 <HAL_I2C_EV_IRQHandler+0x7bc>
      if (hi2c->XferCount == 0U)
 8001c20:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c22:	b292      	uxth	r2, r2
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	d162      	bne.n	8001cee <HAL_I2C_EV_IRQHandler+0x6c2>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c28:	9202      	str	r2, [sp, #8]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	9202      	str	r2, [sp, #8]
 8001c2e:	699a      	ldr	r2, [r3, #24]
 8001c30:	9202      	str	r2, [sp, #8]
 8001c32:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c3a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	6523      	str	r3, [r4, #80]	; 0x50
 8001c40:	e520      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001c42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c44:	2a00      	cmp	r2, #0
 8001c46:	f47f af28 	bne.w	8001a9a <HAL_I2C_EV_IRQHandler+0x46e>
 8001c4a:	e51b      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001c4c:	2922      	cmp	r1, #34	; 0x22
 8001c4e:	f47f af61 	bne.w	8001b14 <HAL_I2C_EV_IRQHandler+0x4e8>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c58:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	0515      	lsls	r5, r2, #20
 8001c5e:	f53f af69 	bmi.w	8001b34 <HAL_I2C_EV_IRQHandler+0x508>
 8001c62:	e761      	b.n	8001b28 <HAL_I2C_EV_IRQHandler+0x4fc>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001c64:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001c68:	2960      	cmp	r1, #96	; 0x60
 8001c6a:	f000 809c 	beq.w	8001da6 <HAL_I2C_EV_IRQHandler+0x77a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	0655      	lsls	r5, r2, #25
 8001c72:	d505      	bpl.n	8001c80 <HAL_I2C_EV_IRQHandler+0x654>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff fc53 	bl	800152c <HAL_I2C_ErrorCallback>
 8001c86:	e776      	b.n	8001b76 <HAL_I2C_EV_IRQHandler+0x54a>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c88:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c8a:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c8c:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c92:	f7ff fbeb 	bl	800146c <HAL_I2C_SlaveRxCpltCallback>
 8001c96:	e69e      	b.n	80019d6 <HAL_I2C_EV_IRQHandler+0x3aa>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c9a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001c9e:	2a21      	cmp	r2, #33	; 0x21
 8001ca0:	f47f acf0 	bne.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    if (hi2c->XferCount != 0U)
 8001ca4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	f47f ade1 	bne.w	8001870 <HAL_I2C_EV_IRQHandler+0x244>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cae:	2908      	cmp	r1, #8
 8001cb0:	d005      	beq.n	8001cbe <HAL_I2C_EV_IRQHandler+0x692>
 8001cb2:	2920      	cmp	r1, #32
 8001cb4:	d003      	beq.n	8001cbe <HAL_I2C_EV_IRQHandler+0x692>
 8001cb6:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001cba:	f040 81dc 	bne.w	8002076 <HAL_I2C_EV_IRQHandler+0xa4a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cc4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc6:	681a      	ldr	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cc8:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	2520      	movs	r5, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd0:	601a      	str	r2, [r3, #0]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cd2:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cd4:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cda:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cde:	f7ff fbbf 	bl	8001460 <HAL_I2C_MasterTxCpltCallback>
 8001ce2:	e4cf      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	6321      	str	r1, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001ce8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001cec:	e724      	b.n	8001b38 <HAL_I2C_EV_IRQHandler+0x50c>
      else if (hi2c->XferCount == 1U)
 8001cee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	2a01      	cmp	r2, #1
 8001cf4:	f000 8086 	beq.w	8001e04 <HAL_I2C_EV_IRQHandler+0x7d8>
      else if (hi2c->XferCount == 2U)
 8001cf8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	2a02      	cmp	r2, #2
 8001cfe:	f000 8142 	beq.w	8001f86 <HAL_I2C_EV_IRQHandler+0x95a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d08:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	0511      	lsls	r1, r2, #20
 8001d0e:	d50e      	bpl.n	8001d2e <HAL_I2C_EV_IRQHandler+0x702>
 8001d10:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8001d14:	d007      	beq.n	8001d26 <HAL_I2C_EV_IRQHandler+0x6fa>
 8001d16:	3801      	subs	r0, #1
 8001d18:	281f      	cmp	r0, #31
 8001d1a:	d808      	bhi.n	8001d2e <HAL_I2C_EV_IRQHandler+0x702>
 8001d1c:	4aab      	ldr	r2, [pc, #684]	; (8001fcc <HAL_I2C_EV_IRQHandler+0x9a0>)
 8001d1e:	fa22 f000 	lsr.w	r0, r2, r0
 8001d22:	07c2      	lsls	r2, r0, #31
 8001d24:	d503      	bpl.n	8001d2e <HAL_I2C_EV_IRQHandler+0x702>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d2c:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	9208      	str	r2, [sp, #32]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	9208      	str	r2, [sp, #32]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	9308      	str	r3, [sp, #32]
 8001d3a:	9b08      	ldr	r3, [sp, #32]
 8001d3c:	e77e      	b.n	8001c3c <HAL_I2C_EV_IRQHandler+0x610>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d44:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	700b      	strb	r3, [r1, #0]
 8001d4a:	e5a9      	b.n	80018a0 <HAL_I2C_EV_IRQHandler+0x274>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d4c:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001d4e:	2804      	cmp	r0, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d54:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001d56:	f43f ae7a 	beq.w	8001a4e <HAL_I2C_EV_IRQHandler+0x422>
 8001d5a:	2802      	cmp	r0, #2
 8001d5c:	f43f ae77 	beq.w	8001a4e <HAL_I2C_EV_IRQHandler+0x422>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e671      	b.n	8001a4e <HAL_I2C_EV_IRQHandler+0x422>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001d6a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d6c:	4b98      	ldr	r3, [pc, #608]	; (8001fd0 <HAL_I2C_EV_IRQHandler+0x9a4>)
 8001d6e:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001d70:	f7fe ffde 	bl	8000d30 <HAL_DMA_Abort_IT>
 8001d74:	2800      	cmp	r0, #0
 8001d76:	f43f aefe 	beq.w	8001b76 <HAL_I2C_EV_IRQHandler+0x54a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	0652      	lsls	r2, r2, #25
 8001d80:	d506      	bpl.n	8001d90 <HAL_I2C_EV_IRQHandler+0x764>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001d88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	3201      	adds	r2, #1
 8001d8e:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8001d90:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001d92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8001d94:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8001d98:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8001d9a:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001d9c:	6d03      	ldr	r3, [r0, #80]	; 0x50
        hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001da2:	4798      	blx	r3
 8001da4:	e6e7      	b.n	8001b76 <HAL_I2C_EV_IRQHandler+0x54a>
    hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	2120      	movs	r1, #32
 8001da8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dac:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	0656      	lsls	r6, r2, #25
 8001db2:	d506      	bpl.n	8001dc2 <HAL_I2C_EV_IRQHandler+0x796>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001dba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	3201      	adds	r2, #1
 8001dc0:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f7ff fbb0 	bl	8001530 <HAL_I2C_AbortCpltCallback>
 8001dd0:	e6d1      	b.n	8001b76 <HAL_I2C_EV_IRQHandler+0x54a>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001dd2:	2a21      	cmp	r2, #33	; 0x21
 8001dd4:	f43f ac8c 	beq.w	80016f0 <HAL_I2C_EV_IRQHandler+0xc4>
 8001dd8:	e486      	b.n	80016e8 <HAL_I2C_EV_IRQHandler+0xbc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dda:	9100      	str	r1, [sp, #0]
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	9200      	str	r2, [sp, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	9b00      	ldr	r3, [sp, #0]
 8001de6:	e44d      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de8:	9201      	str	r2, [sp, #4]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	9201      	str	r2, [sp, #4]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	9201      	str	r2, [sp, #4]
 8001df2:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dfa:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001dfc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001dfe:	3301      	adds	r3, #1
 8001e00:	6523      	str	r3, [r4, #80]	; 0x50
 8001e02:	e43f      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x58>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001e04:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8001e08:	f000 8104 	beq.w	8002014 <HAL_I2C_EV_IRQHandler+0x9e8>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001e0c:	2808      	cmp	r0, #8
 8001e0e:	f000 80f1 	beq.w	8001ff4 <HAL_I2C_EV_IRQHandler+0x9c8>
 8001e12:	2820      	cmp	r0, #32
 8001e14:	f000 80ee 	beq.w	8001ff4 <HAL_I2C_EV_IRQHandler+0x9c8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001e18:	2d12      	cmp	r5, #18
 8001e1a:	f000 80e8 	beq.w	8001fee <HAL_I2C_EV_IRQHandler+0x9c2>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001e1e:	2810      	cmp	r0, #16
 8001e20:	d805      	bhi.n	8001e2e <HAL_I2C_EV_IRQHandler+0x802>
 8001e22:	4a6c      	ldr	r2, [pc, #432]	; (8001fd4 <HAL_I2C_EV_IRQHandler+0x9a8>)
 8001e24:	fa22 f000 	lsr.w	r0, r2, r0
 8001e28:	07c2      	lsls	r2, r0, #31
 8001e2a:	f100 811f 	bmi.w	800206c <HAL_I2C_EV_IRQHandler+0xa40>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e34:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e36:	2200      	movs	r2, #0
 8001e38:	9205      	str	r2, [sp, #20]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	9205      	str	r2, [sp, #20]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	9305      	str	r3, [sp, #20]
 8001e42:	9b05      	ldr	r3, [sp, #20]
 8001e44:	e6fa      	b.n	8001c3c <HAL_I2C_EV_IRQHandler+0x610>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001e46:	2801      	cmp	r0, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e48:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001e4a:	d071      	beq.n	8001f30 <HAL_I2C_EV_IRQHandler+0x904>
 8001e4c:	2810      	cmp	r0, #16
 8001e4e:	d06f      	beq.n	8001f30 <HAL_I2C_EV_IRQHandler+0x904>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001e50:	2804      	cmp	r0, #4
 8001e52:	f000 80fc 	beq.w	800204e <HAL_I2C_EV_IRQHandler+0xa22>
 8001e56:	2802      	cmp	r0, #2
 8001e58:	f000 80f9 	beq.w	800204e <HAL_I2C_EV_IRQHandler+0xa22>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e60:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8001e66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001e68:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e6a:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e72:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8001e74:	1c51      	adds	r1, r2, #1
 8001e76:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e78:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8001e7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e7c:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8001e7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e86:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8001e88:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 8001e8e:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 8001e90:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e92:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e94:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e98:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001e9c:	2b40      	cmp	r3, #64	; 0x40
 8001e9e:	f000 80cd 	beq.w	800203c <HAL_I2C_EV_IRQHandler+0xa10>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea2:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ea4:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001eaa:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001eac:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001eae:	f7ff fad9 	bl	8001464 <HAL_I2C_MasterRxCpltCallback>
 8001eb2:	f7ff bbe7 	b.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001eb6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001eb8:	2802      	cmp	r0, #2
 8001eba:	f43f abe3 	beq.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
 8001ebe:	2901      	cmp	r1, #1
 8001ec0:	f63f abe0 	bhi.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8001ec4:	4944      	ldr	r1, [pc, #272]	; (8001fd8 <HAL_I2C_EV_IRQHandler+0x9ac>)
  __IO uint32_t count = 0U;
 8001ec6:	920a      	str	r2, [sp, #40]	; 0x28
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8001ec8:	680a      	ldr	r2, [r1, #0]
 8001eca:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8001ece:	fbb2 f2f1 	udiv	r2, r2, r1
 8001ed2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ed6:	920a      	str	r2, [sp, #40]	; 0x28
    count--;
 8001ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001eda:	3a01      	subs	r2, #1
 8001edc:	920a      	str	r2, [sp, #40]	; 0x28
    if (count == 0U)
 8001ede:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001ee0:	2900      	cmp	r1, #0
 8001ee2:	f000 80ea 	beq.w	80020ba <HAL_I2C_EV_IRQHandler+0xa8e>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8001eec:	d1f4      	bne.n	8001ed8 <HAL_I2C_EV_IRQHandler+0x8ac>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eee:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef0:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ef2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001ef6:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001efe:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8001f04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8001f06:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8001f0c:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8001f0e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f14:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8001f18:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f1a:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 8001f1c:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f1e:	d1c1      	bne.n	8001ea4 <HAL_I2C_EV_IRQHandler+0x878>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001f24:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8001f26:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001f28:	f7ff fafe 	bl	8001528 <HAL_I2C_MemRxCpltCallback>
 8001f2c:	f7ff bbaa 	b.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e794      	b.n	8001e62 <HAL_I2C_EV_IRQHandler+0x836>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f38:	2d08      	cmp	r5, #8
 8001f3a:	d005      	beq.n	8001f48 <HAL_I2C_EV_IRQHandler+0x91c>
 8001f3c:	2d20      	cmp	r5, #32
 8001f3e:	d003      	beq.n	8001f48 <HAL_I2C_EV_IRQHandler+0x91c>
 8001f40:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8001f44:	f040 80a8 	bne.w	8002098 <HAL_I2C_EV_IRQHandler+0xa6c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f4e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f50:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f52:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f56:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001f5a:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f5c:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f5e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f62:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f66:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f6a:	2b40      	cmp	r3, #64	; 0x40
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001f6c:	4620      	mov	r0, r4
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f6e:	f000 808f 	beq.w	8002090 <HAL_I2C_EV_IRQHandler+0xa64>
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f72:	f7ff fa75 	bl	8001460 <HAL_I2C_MasterTxCpltCallback>
 8001f76:	f7ff bb85 	b.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	f7ff bb7f 	b.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001f86:	2810      	cmp	r0, #16
 8001f88:	d928      	bls.n	8001fdc <HAL_I2C_EV_IRQHandler+0x9b0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f90:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f98:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	0515      	lsls	r5, r2, #20
 8001f9e:	d50d      	bpl.n	8001fbc <HAL_I2C_EV_IRQHandler+0x990>
 8001fa0:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8001fa4:	d006      	beq.n	8001fb4 <HAL_I2C_EV_IRQHandler+0x988>
 8001fa6:	3801      	subs	r0, #1
 8001fa8:	281f      	cmp	r0, #31
 8001faa:	d807      	bhi.n	8001fbc <HAL_I2C_EV_IRQHandler+0x990>
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <HAL_I2C_EV_IRQHandler+0x9a0>)
 8001fae:	40c2      	lsrs	r2, r0
 8001fb0:	07d0      	lsls	r0, r2, #31
 8001fb2:	d503      	bpl.n	8001fbc <HAL_I2C_EV_IRQHandler+0x990>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fba:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	9207      	str	r2, [sp, #28]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	9207      	str	r2, [sp, #28]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	9307      	str	r3, [sp, #28]
 8001fc8:	9b07      	ldr	r3, [sp, #28]
 8001fca:	e637      	b.n	8001c3c <HAL_I2C_EV_IRQHandler+0x610>
 8001fcc:	80008081 	.word	0x80008081
 8001fd0:	08001535 	.word	0x08001535
 8001fd4:	00010014 	.word	0x00010014
 8001fd8:	2000000c 	.word	0x2000000c
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001fdc:	4a45      	ldr	r2, [pc, #276]	; (80020f4 <HAL_I2C_EV_IRQHandler+0xac8>)
 8001fde:	40c2      	lsrs	r2, r0
 8001fe0:	07d6      	lsls	r6, r2, #31
 8001fe2:	d5d2      	bpl.n	8001f8a <HAL_I2C_EV_IRQHandler+0x95e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e7d5      	b.n	8001f9a <HAL_I2C_EV_IRQHandler+0x96e>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001fee:	2801      	cmp	r0, #1
 8001ff0:	f43f af1d 	beq.w	8001e2e <HAL_I2C_EV_IRQHandler+0x802>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff4:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff6:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffc:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffe:	9106      	str	r1, [sp, #24]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	9206      	str	r2, [sp, #24]
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	9206      	str	r2, [sp, #24]
 8002008:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e613      	b.n	8001c3c <HAL_I2C_EV_IRQHandler+0x610>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800201a:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002022:	d018      	beq.n	8002056 <HAL_I2C_EV_IRQHandler+0xa2a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002024:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002026:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202c:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202e:	9103      	str	r1, [sp, #12]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	9203      	str	r2, [sp, #12]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	9303      	str	r3, [sp, #12]
 8002038:	9b03      	ldr	r3, [sp, #12]
 800203a:	e5ff      	b.n	8001c3c <HAL_I2C_EV_IRQHandler+0x610>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800203c:	2300      	movs	r3, #0
 800203e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002042:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8002044:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002046:	f7ff fa6f 	bl	8001528 <HAL_I2C_MemRxCpltCallback>
 800204a:	f7ff bb1b 	b.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800204e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e705      	b.n	8001e62 <HAL_I2C_EV_IRQHandler+0x836>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002056:	9204      	str	r2, [sp, #16]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	9204      	str	r2, [sp, #16]
 800205c:	699a      	ldr	r2, [r3, #24]
 800205e:	9204      	str	r2, [sp, #16]
 8002060:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e5e7      	b.n	8001c3c <HAL_I2C_EV_IRQHandler+0x610>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e6df      	b.n	8001e36 <HAL_I2C_EV_IRQHandler+0x80a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002076:	6859      	ldr	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002078:	2611      	movs	r6, #17
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800207a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        hi2c->State = HAL_I2C_STATE_READY;
 800207e:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002080:	6059      	str	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002082:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002084:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002086:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800208a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 800208e:	e770      	b.n	8001f72 <HAL_I2C_EV_IRQHandler+0x946>
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002090:	f7ff f9ee 	bl	8001470 <HAL_I2C_MemTxCpltCallback>
 8002094:	f7ff baf6 	b.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002098:	685a      	ldr	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800209a:	2611      	movs	r6, #17
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800209c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020a4:	605a      	str	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020a6:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020a8:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020aa:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80020ae:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020b2:	f7ff f9d5 	bl	8001460 <HAL_I2C_MasterTxCpltCallback>
 80020b6:	f7ff bae5 	b.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020be:	f042 0220 	orr.w	r2, r2, #32
 80020c2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020ca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 80020d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80020d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80020d8:	3201      	adds	r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80020da:	2020      	movs	r0, #32
        hi2c->XferCount--;
 80020dc:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80020de:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 80020e4:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e6:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80020ea:	f7ff fa1f 	bl	800152c <HAL_I2C_ErrorCallback>
 80020ee:	f7ff bac9 	b.w	8001684 <HAL_I2C_EV_IRQHandler+0x58>
 80020f2:	bf00      	nop
 80020f4:	00010014 	.word	0x00010014

080020f8 <HAL_I2C_ER_IRQHandler>:
{
 80020f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80020fa:	6803      	ldr	r3, [r0, #0]
 80020fc:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80020fe:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002100:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8002104:	b2ce      	uxtb	r6, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002106:	05e9      	lsls	r1, r5, #23
{
 8002108:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800210a:	469c      	mov	ip, r3
 800210c:	f3c5 2040 	ubfx	r0, r5, #9, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002110:	d57e      	bpl.n	8002210 <HAL_I2C_ER_IRQHandler+0x118>
 8002112:	0a11      	lsrs	r1, r2, #8
 8002114:	07cf      	lsls	r7, r1, #31
 8002116:	d57b      	bpl.n	8002210 <HAL_I2C_ER_IRQHandler+0x118>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002118:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800211c:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800211e:	2800      	cmp	r0, #0
 8002120:	f040 8085 	bne.w	800222e <HAL_I2C_ER_IRQHandler+0x136>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002124:	0568      	lsls	r0, r5, #21
 8002126:	f140 80da 	bpl.w	80022de <HAL_I2C_ER_IRQHandler+0x1e6>
    error |= HAL_I2C_ERROR_BERR;
 800212a:	2701      	movs	r7, #1
    tmp2 = hi2c->XferCount;
 800212c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 800212e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8002132:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002134:	2e20      	cmp	r6, #32
    tmp2 = hi2c->XferCount;
 8002136:	b292      	uxth	r2, r2
    tmp3 = hi2c->State;
 8002138:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800213a:	f000 80af 	beq.w	800229c <HAL_I2C_ER_IRQHandler+0x1a4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800213e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002142:	2e10      	cmp	r6, #16
      error |= HAL_I2C_ERROR_AF;
 8002144:	f047 0704 	orr.w	r7, r7, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002148:	615a      	str	r2, [r3, #20]
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800214a:	d001      	beq.n	8002150 <HAL_I2C_ER_IRQHandler+0x58>
 800214c:	2e40      	cmp	r6, #64	; 0x40
 800214e:	d103      	bne.n	8002158 <HAL_I2C_ER_IRQHandler+0x60>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002156:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002158:	052e      	lsls	r6, r5, #20
 800215a:	469c      	mov	ip, r3
 800215c:	d505      	bpl.n	800216a <HAL_I2C_ER_IRQHandler+0x72>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800215e:	f46f 6300 	mvn.w	r3, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8002162:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002166:	f8cc 3014 	str.w	r3, [ip, #20]
    hi2c->ErrorCode |= error;
 800216a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800216c:	431f      	orrs	r7, r3
 800216e:	6427      	str	r7, [r4, #64]	; 0x40
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002170:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002174:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002178:	b2db      	uxtb	r3, r3
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800217a:	2b10      	cmp	r3, #16
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800217c:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800217e:	d068      	beq.n	8002252 <HAL_I2C_ER_IRQHandler+0x15a>
 8002180:	2b40      	cmp	r3, #64	; 0x40
 8002182:	d066      	beq.n	8002252 <HAL_I2C_ER_IRQHandler+0x15a>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002184:	f002 0328 	and.w	r3, r2, #40	; 0x28
 8002188:	2b28      	cmp	r3, #40	; 0x28
 800218a:	f000 8082 	beq.w	8002292 <HAL_I2C_ER_IRQHandler+0x19a>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800218e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002192:	051d      	lsls	r5, r3, #20
 8002194:	d407      	bmi.n	80021a6 <HAL_I2C_ER_IRQHandler+0xae>
 8002196:	2a60      	cmp	r2, #96	; 0x60
 8002198:	d005      	beq.n	80021a6 <HAL_I2C_ER_IRQHandler+0xae>
      hi2c->State = HAL_I2C_STATE_READY;
 800219a:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800219e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80021aa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80021ae:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80021b2:	d05b      	beq.n	800226c <HAL_I2C_ER_IRQHandler+0x174>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80021b4:	f8dc 3004 	ldr.w	r3, [ip, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80021b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80021ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021be:	f8cc 3004 	str.w	r3, [ip, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80021c2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	f000 80ab 	beq.w	8002322 <HAL_I2C_ER_IRQHandler+0x22a>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80021cc:	4b82      	ldr	r3, [pc, #520]	; (80023d8 <HAL_I2C_ER_IRQHandler+0x2e0>)
 80021ce:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80021d0:	f7fe fdae 	bl	8000d30 <HAL_DMA_Abort_IT>
 80021d4:	b150      	cbz	r0, 80021ec <HAL_I2C_ER_IRQHandler+0xf4>
        __HAL_I2C_DISABLE(hi2c);
 80021d6:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80021d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80021da:	6813      	ldr	r3, [r2, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80021dc:	6d01      	ldr	r1, [r0, #80]	; 0x50
        __HAL_I2C_DISABLE(hi2c);
 80021de:	f023 0301 	bic.w	r3, r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE(hi2c);
 80021e4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80021ea:	4788      	blx	r1
  CurrentError = hi2c->ErrorCode;
 80021ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80021ee:	071b      	lsls	r3, r3, #28
 80021f0:	d004      	beq.n	80021fc <HAL_I2C_ER_IRQHandler+0x104>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021f2:	6822      	ldr	r2, [r4, #0]
 80021f4:	6853      	ldr	r3, [r2, #4]
 80021f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021fa:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 80021fc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002200:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002202:	0757      	lsls	r7, r2, #29
  CurrentState = hi2c->State;
 8002204:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002206:	d502      	bpl.n	800220e <HAL_I2C_ER_IRQHandler+0x116>
 8002208:	2b28      	cmp	r3, #40	; 0x28
 800220a:	f000 80a8 	beq.w	800235e <HAL_I2C_ER_IRQHandler+0x266>
}
 800220e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002210:	b110      	cbz	r0, 8002218 <HAL_I2C_ER_IRQHandler+0x120>
 8002212:	0a11      	lsrs	r1, r2, #8
 8002214:	07cf      	lsls	r7, r1, #31
 8002216:	d41a      	bmi.n	800224e <HAL_I2C_ER_IRQHandler+0x156>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002218:	f3c5 2780 	ubfx	r7, r5, #10, #1
 800221c:	b11f      	cbz	r7, 8002226 <HAL_I2C_ER_IRQHandler+0x12e>
 800221e:	05d1      	lsls	r1, r2, #23
 8002220:	d5f5      	bpl.n	800220e <HAL_I2C_ER_IRQHandler+0x116>
 8002222:	2700      	movs	r7, #0
 8002224:	e782      	b.n	800212c <HAL_I2C_ER_IRQHandler+0x34>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002226:	0529      	lsls	r1, r5, #20
 8002228:	d5f1      	bpl.n	800220e <HAL_I2C_ER_IRQHandler+0x116>
 800222a:	0a11      	lsrs	r1, r2, #8
 800222c:	e008      	b.n	8002240 <HAL_I2C_ER_IRQHandler+0x148>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800222e:	2703      	movs	r7, #3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002230:	f46f 7200 	mvn.w	r2, #512	; 0x200
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002234:	0568      	lsls	r0, r5, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002236:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002238:	f53f af78 	bmi.w	800212c <HAL_I2C_ER_IRQHandler+0x34>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800223c:	052a      	lsls	r2, r5, #20
 800223e:	d504      	bpl.n	800224a <HAL_I2C_ER_IRQHandler+0x152>
 8002240:	07cb      	lsls	r3, r1, #31
 8002242:	d48c      	bmi.n	800215e <HAL_I2C_ER_IRQHandler+0x66>
  if (error != HAL_I2C_ERROR_NONE)
 8002244:	2f00      	cmp	r7, #0
 8002246:	d0e2      	beq.n	800220e <HAL_I2C_ER_IRQHandler+0x116>
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	469c      	mov	ip, r3
 800224c:	e78d      	b.n	800216a <HAL_I2C_ER_IRQHandler+0x72>
 800224e:	2702      	movs	r7, #2
 8002250:	e7ee      	b.n	8002230 <HAL_I2C_ER_IRQHandler+0x138>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002252:	2a22      	cmp	r2, #34	; 0x22
 8002254:	d196      	bne.n	8002184 <HAL_I2C_ER_IRQHandler+0x8c>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002256:	f8dc 3000 	ldr.w	r3, [ip]
 800225a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800225e:	f8cc 3000 	str.w	r3, [ip]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002262:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002266:	051e      	lsls	r6, r3, #20
 8002268:	d49d      	bmi.n	80021a6 <HAL_I2C_ER_IRQHandler+0xae>
 800226a:	e796      	b.n	800219a <HAL_I2C_ER_IRQHandler+0xa2>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800226c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002270:	2a60      	cmp	r2, #96	; 0x60
 8002272:	d03b      	beq.n	80022ec <HAL_I2C_ER_IRQHandler+0x1f4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002274:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8002278:	065a      	lsls	r2, r3, #25
 800227a:	d506      	bpl.n	800228a <HAL_I2C_ER_IRQHandler+0x192>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800227c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800227e:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8002282:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002286:	3301      	adds	r3, #1
 8002288:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 800228a:	4620      	mov	r0, r4
 800228c:	f7ff f94e 	bl	800152c <HAL_I2C_ErrorCallback>
 8002290:	e7ac      	b.n	80021ec <HAL_I2C_ER_IRQHandler+0xf4>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002292:	2200      	movs	r2, #0
 8002294:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002296:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800229a:	e786      	b.n	80021aa <HAL_I2C_ER_IRQHandler+0xb2>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800229c:	b9ca      	cbnz	r2, 80022d2 <HAL_I2C_ER_IRQHandler+0x1da>
 800229e:	f001 02f7 	and.w	r2, r1, #247	; 0xf7
 80022a2:	2a21      	cmp	r2, #33	; 0x21
 80022a4:	d003      	beq.n	80022ae <HAL_I2C_ER_IRQHandler+0x1b6>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80022a6:	2928      	cmp	r1, #40	; 0x28
 80022a8:	d113      	bne.n	80022d2 <HAL_I2C_ER_IRQHandler+0x1da>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80022aa:	2821      	cmp	r0, #33	; 0x21
 80022ac:	d111      	bne.n	80022d2 <HAL_I2C_ER_IRQHandler+0x1da>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022ae:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80022b4:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022b6:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80022b8:	d05e      	beq.n	8002378 <HAL_I2C_ER_IRQHandler+0x280>
 80022ba:	2920      	cmp	r1, #32
 80022bc:	d05c      	beq.n	8002378 <HAL_I2C_ER_IRQHandler+0x280>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80022be:	2a21      	cmp	r2, #33	; 0x21
 80022c0:	d073      	beq.n	80023aa <HAL_I2C_ER_IRQHandler+0x2b2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022c6:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022c8:	052d      	lsls	r5, r5, #20
 80022ca:	d5bb      	bpl.n	8002244 <HAL_I2C_ER_IRQHandler+0x14c>
 80022cc:	f8d4 c000 	ldr.w	ip, [r4]
 80022d0:	e745      	b.n	800215e <HAL_I2C_ER_IRQHandler+0x66>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      error |= HAL_I2C_ERROR_AF;
 80022d6:	f047 0704 	orr.w	r7, r7, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022da:	615a      	str	r2, [r3, #20]
 80022dc:	e73c      	b.n	8002158 <HAL_I2C_ER_IRQHandler+0x60>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022de:	052a      	lsls	r2, r5, #20
    error |= HAL_I2C_ERROR_BERR;
 80022e0:	f04f 0701 	mov.w	r7, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022e4:	f53f af3b 	bmi.w	800215e <HAL_I2C_ER_IRQHandler+0x66>
 80022e8:	469c      	mov	ip, r3
 80022ea:	e73e      	b.n	800216a <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->State = HAL_I2C_STATE_READY;
 80022ec:	2220      	movs	r2, #32
 80022ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f2:	6423      	str	r3, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80022f4:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80022f8:	0659      	lsls	r1, r3, #25
 80022fa:	d508      	bpl.n	800230e <HAL_I2C_ER_IRQHandler+0x216>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022fe:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8002302:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002306:	f8d4 c000 	ldr.w	ip, [r4]
 800230a:	3301      	adds	r3, #1
 800230c:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800230e:	f8dc 3000 	ldr.w	r3, [ip]
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	f8cc 3000 	str.w	r3, [ip]
    HAL_I2C_AbortCpltCallback(hi2c);
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff f908 	bl	8001530 <HAL_I2C_AbortCpltCallback>
 8002320:	e764      	b.n	80021ec <HAL_I2C_ER_IRQHandler+0xf4>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002322:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <HAL_I2C_ER_IRQHandler+0x2e0>)
 8002326:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002328:	f7fe fd02 	bl	8000d30 <HAL_DMA_Abort_IT>
 800232c:	2800      	cmp	r0, #0
 800232e:	f43f af5d 	beq.w	80021ec <HAL_I2C_ER_IRQHandler+0xf4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	0650      	lsls	r0, r2, #25
 8002338:	d506      	bpl.n	8002348 <HAL_I2C_ER_IRQHandler+0x250>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8002340:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002342:	6823      	ldr	r3, [r4, #0]
 8002344:	3201      	adds	r2, #1
 8002346:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8002348:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800234a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 800234c:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8002350:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8002352:	601a      	str	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002354:	6d03      	ldr	r3, [r0, #80]	; 0x50
        hi2c->State = HAL_I2C_STATE_READY;
 8002356:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800235a:	4798      	blx	r3
 800235c:	e746      	b.n	80021ec <HAL_I2C_ER_IRQHandler+0xf4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800235e:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <HAL_I2C_ER_IRQHandler+0x2e4>)
 8002360:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8002362:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002364:	2300      	movs	r3, #0
 8002366:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002368:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 800236a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800236e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002372:	f7fe f9cd 	bl	8000710 <HAL_I2C_ListenCpltCallback>
}
 8002376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002378:	2a28      	cmp	r2, #40	; 0x28
 800237a:	d1a0      	bne.n	80022be <HAL_I2C_ER_IRQHandler+0x1c6>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800237c:	4a17      	ldr	r2, [pc, #92]	; (80023dc <HAL_I2C_ER_IRQHandler+0x2e4>)
 800237e:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002380:	685a      	ldr	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002382:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002386:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800238a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800238c:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	400a      	ands	r2, r1
 8002392:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002394:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002396:	2320      	movs	r3, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002398:	6321      	str	r1, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800239a:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 800239c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80023a0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80023a4:	f7fe f9b4 	bl	8000710 <HAL_I2C_ListenCpltCallback>
 80023a8:	e78e      	b.n	80022c8 <HAL_I2C_ER_IRQHandler+0x1d0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80023aa:	490c      	ldr	r1, [pc, #48]	; (80023dc <HAL_I2C_ER_IRQHandler+0x2e4>)
 80023ac:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 80023ae:	2020      	movs	r0, #32
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80023b0:	2100      	movs	r1, #0
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023b2:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80023b4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80023b8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023bc:	685a      	ldr	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023be:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023c6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c8:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	400a      	ands	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7ff f849 	bl	8001468 <HAL_I2C_SlaveTxCpltCallback>
 80023d6:	e777      	b.n	80022c8 <HAL_I2C_ER_IRQHandler+0x1d0>
 80023d8:	08001535 	.word	0x08001535
 80023dc:	ffff0000 	.word	0xffff0000

080023e0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e0:	2800      	cmp	r0, #0
 80023e2:	f000 81d0 	beq.w	8002786 <HAL_RCC_OscConfig+0x3a6>
{
 80023e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80023ea:	6803      	ldr	r3, [r0, #0]
 80023ec:	2b0f      	cmp	r3, #15
{
 80023ee:	b082      	sub	sp, #8
 80023f0:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80023f2:	f200 8137 	bhi.w	8002664 <HAL_RCC_OscConfig+0x284>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	07dd      	lsls	r5, r3, #31
 80023f8:	d53a      	bpl.n	8002470 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80023fa:	6863      	ldr	r3, [r4, #4]
 80023fc:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8002400:	d006      	beq.n	8002410 <HAL_RCC_OscConfig+0x30>
 8002402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002406:	d003      	beq.n	8002410 <HAL_RCC_OscConfig+0x30>
 8002408:	21ed      	movs	r1, #237	; 0xed
 800240a:	48b1      	ldr	r0, [pc, #708]	; (80026d0 <HAL_RCC_OscConfig+0x2f0>)
 800240c:	f7fe faa0 	bl	8000950 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002410:	4ab0      	ldr	r2, [pc, #704]	; (80026d4 <HAL_RCC_OscConfig+0x2f4>)
 8002412:	6893      	ldr	r3, [r2, #8]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b04      	cmp	r3, #4
 800241a:	f000 8173 	beq.w	8002704 <HAL_RCC_OscConfig+0x324>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241e:	6893      	ldr	r3, [r2, #8]
 8002420:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002424:	2b08      	cmp	r3, #8
 8002426:	f000 8169 	beq.w	80026fc <HAL_RCC_OscConfig+0x31c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	6863      	ldr	r3, [r4, #4]
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	f000 8172 	beq.w	8002718 <HAL_RCC_OscConfig+0x338>
 8002434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002438:	f000 8215 	beq.w	8002866 <HAL_RCC_OscConfig+0x486>
 800243c:	4da5      	ldr	r5, [pc, #660]	; (80026d4 <HAL_RCC_OscConfig+0x2f4>)
 800243e:	682a      	ldr	r2, [r5, #0]
 8002440:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002444:	602a      	str	r2, [r5, #0]
 8002446:	682a      	ldr	r2, [r5, #0]
 8002448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800244c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800244e:	2b00      	cmp	r3, #0
 8002450:	f040 8167 	bne.w	8002722 <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe fbd6 	bl	8000c04 <HAL_GetTick>
 8002458:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	e005      	b.n	8002468 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245c:	f7fe fbd2 	bl	8000c04 <HAL_GetTick>
 8002460:	1b80      	subs	r0, r0, r6
 8002462:	2864      	cmp	r0, #100	; 0x64
 8002464:	f200 817b 	bhi.w	800275e <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	039b      	lsls	r3, r3, #14
 800246c:	d4f6      	bmi.n	800245c <HAL_RCC_OscConfig+0x7c>
 800246e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002470:	079f      	lsls	r7, r3, #30
 8002472:	f100 80c8 	bmi.w	8002606 <HAL_RCC_OscConfig+0x226>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002476:	071a      	lsls	r2, r3, #28
 8002478:	d518      	bpl.n	80024ac <HAL_RCC_OscConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800247a:	6963      	ldr	r3, [r4, #20]
 800247c:	2b01      	cmp	r3, #1
 800247e:	f200 811e 	bhi.w	80026be <HAL_RCC_OscConfig+0x2de>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 810b 	beq.w	800269e <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002488:	4b93      	ldr	r3, [pc, #588]	; (80026d8 <HAL_RCC_OscConfig+0x2f8>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4d92      	ldr	r5, [pc, #584]	; (80026d4 <HAL_RCC_OscConfig+0x2f4>)
      __HAL_RCC_LSI_ENABLE();
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002490:	f7fe fbb8 	bl	8000c04 <HAL_GetTick>
 8002494:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002496:	e005      	b.n	80024a4 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002498:	f7fe fbb4 	bl	8000c04 <HAL_GetTick>
 800249c:	1b80      	subs	r0, r0, r6
 800249e:	2802      	cmp	r0, #2
 80024a0:	f200 815d 	bhi.w	800275e <HAL_RCC_OscConfig+0x37e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80024a6:	079b      	lsls	r3, r3, #30
 80024a8:	d5f6      	bpl.n	8002498 <HAL_RCC_OscConfig+0xb8>
 80024aa:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ac:	075d      	lsls	r5, r3, #29
 80024ae:	d545      	bpl.n	800253c <HAL_RCC_OscConfig+0x15c>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80024b0:	68a3      	ldr	r3, [r4, #8]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d906      	bls.n	80024c4 <HAL_RCC_OscConfig+0xe4>
 80024b6:	2b05      	cmp	r3, #5
 80024b8:	d004      	beq.n	80024c4 <HAL_RCC_OscConfig+0xe4>
 80024ba:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80024be:	4884      	ldr	r0, [pc, #528]	; (80026d0 <HAL_RCC_OscConfig+0x2f0>)
 80024c0:	f7fe fa46 	bl	8000950 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c4:	4a83      	ldr	r2, [pc, #524]	; (80026d4 <HAL_RCC_OscConfig+0x2f4>)
 80024c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80024c8:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80024cc:	f040 815d 	bne.w	800278a <HAL_RCC_OscConfig+0x3aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80024d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
 80024da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80024e4:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	4d7d      	ldr	r5, [pc, #500]	; (80026dc <HAL_RCC_OscConfig+0x2fc>)
 80024e8:	682a      	ldr	r2, [r5, #0]
 80024ea:	05d0      	lsls	r0, r2, #23
 80024ec:	f140 8127 	bpl.w	800273e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f0:	68a3      	ldr	r3, [r4, #8]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	f000 814b 	beq.w	800278e <HAL_RCC_OscConfig+0x3ae>
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	f000 81be 	beq.w	800287a <HAL_RCC_OscConfig+0x49a>
 80024fe:	4d75      	ldr	r5, [pc, #468]	; (80026d4 <HAL_RCC_OscConfig+0x2f4>)
 8002500:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	672a      	str	r2, [r5, #112]	; 0x70
 8002508:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800250a:	f022 0204 	bic.w	r2, r2, #4
 800250e:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 8141 	bne.w	8002798 <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002516:	f7fe fb75 	bl	8000c04 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800251e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002520:	e006      	b.n	8002530 <HAL_RCC_OscConfig+0x150>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7fe fb6f 	bl	8000c04 <HAL_GetTick>
 8002526:	eba0 0008 	sub.w	r0, r0, r8
 800252a:	42b8      	cmp	r0, r7
 800252c:	f200 8117 	bhi.w	800275e <HAL_RCC_OscConfig+0x37e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002532:	079b      	lsls	r3, r3, #30
 8002534:	d4f5      	bmi.n	8002522 <HAL_RCC_OscConfig+0x142>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002536:	2e00      	cmp	r6, #0
 8002538:	f040 8164 	bne.w	8002804 <HAL_RCC_OscConfig+0x424>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800253c:	69a0      	ldr	r0, [r4, #24]
 800253e:	2802      	cmp	r0, #2
 8002540:	f200 80d2 	bhi.w	80026e8 <HAL_RCC_OscConfig+0x308>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002544:	2800      	cmp	r0, #0
 8002546:	d05a      	beq.n	80025fe <HAL_RCC_OscConfig+0x21e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002548:	4b62      	ldr	r3, [pc, #392]	; (80026d4 <HAL_RCC_OscConfig+0x2f4>)
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	f002 020c 	and.w	r2, r2, #12
 8002550:	2a08      	cmp	r2, #8
 8002552:	f000 815d 	beq.w	8002810 <HAL_RCC_OscConfig+0x430>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002556:	2802      	cmp	r0, #2
 8002558:	f040 8143 	bne.w	80027e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800255c:	69e3      	ldr	r3, [r4, #28]
 800255e:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8002562:	d004      	beq.n	800256e <HAL_RCC_OscConfig+0x18e>
 8002564:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002568:	4859      	ldr	r0, [pc, #356]	; (80026d0 <HAL_RCC_OscConfig+0x2f0>)
 800256a:	f7fe f9f1 	bl	8000950 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800256e:	6a23      	ldr	r3, [r4, #32]
 8002570:	2b3f      	cmp	r3, #63	; 0x3f
 8002572:	f200 8198 	bhi.w	80028a6 <HAL_RCC_OscConfig+0x4c6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002578:	3bc0      	subs	r3, #192	; 0xc0
 800257a:	2bf0      	cmp	r3, #240	; 0xf0
 800257c:	f200 818d 	bhi.w	800289a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002580:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002582:	2a08      	cmp	r2, #8
 8002584:	f240 8168 	bls.w	8002858 <HAL_RCC_OscConfig+0x478>
 8002588:	f240 11db 	movw	r1, #475	; 0x1db
 800258c:	4850      	ldr	r0, [pc, #320]	; (80026d0 <HAL_RCC_OscConfig+0x2f0>)
 800258e:	f7fe f9df 	bl	8000950 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002592:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002594:	3b02      	subs	r3, #2
 8002596:	2b0d      	cmp	r3, #13
 8002598:	f200 8179 	bhi.w	800288e <HAL_RCC_OscConfig+0x4ae>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259c:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <HAL_RCC_OscConfig+0x300>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	4d4d      	ldr	r5, [pc, #308]	; (80026d4 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_PLL_DISABLE();
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025a4:	f7fe fb2e 	bl	8000c04 <HAL_GetTick>
 80025a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	e005      	b.n	80025b8 <HAL_RCC_OscConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe fb2a 	bl	8000c04 <HAL_GetTick>
 80025b0:	1b80      	subs	r0, r0, r6
 80025b2:	2802      	cmp	r0, #2
 80025b4:	f200 80d3 	bhi.w	800275e <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b8:	682b      	ldr	r3, [r5, #0]
 80025ba:	0199      	lsls	r1, r3, #6
 80025bc:	d4f6      	bmi.n	80025ac <HAL_RCC_OscConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025be:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80025c2:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 80025c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c8:	4c42      	ldr	r4, [pc, #264]	; (80026d4 <HAL_RCC_OscConfig+0x2f4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ca:	4333      	orrs	r3, r6
 80025cc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80025d0:	0852      	lsrs	r2, r2, #1
 80025d2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80025d6:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80025d8:	4941      	ldr	r1, [pc, #260]	; (80026e0 <HAL_RCC_OscConfig+0x300>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80025de:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025e0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80025e2:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 80025e4:	f7fe fb0e 	bl	8000c04 <HAL_GetTick>
 80025e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	e005      	b.n	80025f8 <HAL_RCC_OscConfig+0x218>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fb0a 	bl	8000c04 <HAL_GetTick>
 80025f0:	1b40      	subs	r0, r0, r5
 80025f2:	2802      	cmp	r0, #2
 80025f4:	f200 80b3 	bhi.w	800275e <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	019a      	lsls	r2, r3, #6
 80025fc:	d5f6      	bpl.n	80025ec <HAL_RCC_OscConfig+0x20c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80025fe:	2000      	movs	r0, #0
}
 8002600:	b002      	add	sp, #8
 8002602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002606:	68e3      	ldr	r3, [r4, #12]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d842      	bhi.n	8002692 <HAL_RCC_OscConfig+0x2b2>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800260c:	6923      	ldr	r3, [r4, #16]
 800260e:	2b1f      	cmp	r3, #31
 8002610:	f200 80b3 	bhi.w	800277a <HAL_RCC_OscConfig+0x39a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002614:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <HAL_RCC_OscConfig+0x2f4>)
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	f012 0f0c 	tst.w	r2, #12
 800261c:	d02e      	beq.n	800267c <HAL_RCC_OscConfig+0x29c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002624:	2a08      	cmp	r2, #8
 8002626:	d026      	beq.n	8002676 <HAL_RCC_OscConfig+0x296>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002628:	68e3      	ldr	r3, [r4, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80c8 	beq.w	80027c0 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_HSI_ENABLE();
 8002630:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <HAL_RCC_OscConfig+0x304>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002632:	4d28      	ldr	r5, [pc, #160]	; (80026d4 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_ENABLE();
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002638:	f7fe fae4 	bl	8000c04 <HAL_GetTick>
 800263c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263e:	e005      	b.n	800264c <HAL_RCC_OscConfig+0x26c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002640:	f7fe fae0 	bl	8000c04 <HAL_GetTick>
 8002644:	1b80      	subs	r0, r0, r6
 8002646:	2802      	cmp	r0, #2
 8002648:	f200 8089 	bhi.w	800275e <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	682b      	ldr	r3, [r5, #0]
 800264e:	0798      	lsls	r0, r3, #30
 8002650:	d5f6      	bpl.n	8002640 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	682b      	ldr	r3, [r5, #0]
 8002654:	6922      	ldr	r2, [r4, #16]
 8002656:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800265a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800265e:	602b      	str	r3, [r5, #0]
 8002660:	6823      	ldr	r3, [r4, #0]
 8002662:	e708      	b.n	8002476 <HAL_RCC_OscConfig+0x96>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002664:	21e8      	movs	r1, #232	; 0xe8
 8002666:	481a      	ldr	r0, [pc, #104]	; (80026d0 <HAL_RCC_OscConfig+0x2f0>)
 8002668:	f7fe f972 	bl	8000950 <assert_failed>
 800266c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	07dd      	lsls	r5, r3, #31
 8002670:	f57f aefe 	bpl.w	8002470 <HAL_RCC_OscConfig+0x90>
 8002674:	e6c1      	b.n	80023fa <HAL_RCC_OscConfig+0x1a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	025e      	lsls	r6, r3, #9
 800267a:	d4d5      	bmi.n	8002628 <HAL_RCC_OscConfig+0x248>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267c:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <HAL_RCC_OscConfig+0x2f4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	079d      	lsls	r5, r3, #30
 8002682:	d570      	bpl.n	8002766 <HAL_RCC_OscConfig+0x386>
 8002684:	68e3      	ldr	r3, [r4, #12]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d06d      	beq.n	8002766 <HAL_RCC_OscConfig+0x386>
        return HAL_ERROR;
 800268a:	2001      	movs	r0, #1
}
 800268c:	b002      	add	sp, #8
 800268e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002692:	f240 111f 	movw	r1, #287	; 0x11f
 8002696:	480e      	ldr	r0, [pc, #56]	; (80026d0 <HAL_RCC_OscConfig+0x2f0>)
 8002698:	f7fe f95a 	bl	8000950 <assert_failed>
 800269c:	e7b6      	b.n	800260c <HAL_RCC_OscConfig+0x22c>
      __HAL_RCC_LSI_DISABLE();
 800269e:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <HAL_RCC_OscConfig+0x2f8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	4d0c      	ldr	r5, [pc, #48]	; (80026d4 <HAL_RCC_OscConfig+0x2f4>)
      __HAL_RCC_LSI_DISABLE();
 80026a2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80026a4:	f7fe faae 	bl	8000c04 <HAL_GetTick>
 80026a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026aa:	e004      	b.n	80026b6 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ac:	f7fe faaa 	bl	8000c04 <HAL_GetTick>
 80026b0:	1b80      	subs	r0, r0, r6
 80026b2:	2802      	cmp	r0, #2
 80026b4:	d853      	bhi.n	800275e <HAL_RCC_OscConfig+0x37e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80026b8:	079f      	lsls	r7, r3, #30
 80026ba:	d4f7      	bmi.n	80026ac <HAL_RCC_OscConfig+0x2cc>
 80026bc:	e6f5      	b.n	80024aa <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80026be:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80026c2:	4803      	ldr	r0, [pc, #12]	; (80026d0 <HAL_RCC_OscConfig+0x2f0>)
 80026c4:	f7fe f944 	bl	8000950 <assert_failed>
 80026c8:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0e7      	beq.n	800269e <HAL_RCC_OscConfig+0x2be>
 80026ce:	e6db      	b.n	8002488 <HAL_RCC_OscConfig+0xa8>
 80026d0:	080038ac 	.word	0x080038ac
 80026d4:	40023800 	.word	0x40023800
 80026d8:	42470e80 	.word	0x42470e80
 80026dc:	40007000 	.word	0x40007000
 80026e0:	42470060 	.word	0x42470060
 80026e4:	42470000 	.word	0x42470000
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80026e8:	4872      	ldr	r0, [pc, #456]	; (80028b4 <HAL_RCC_OscConfig+0x4d4>)
 80026ea:	f240 11cf 	movw	r1, #463	; 0x1cf
 80026ee:	f7fe f92f 	bl	8000950 <assert_failed>
 80026f2:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f4:	2800      	cmp	r0, #0
 80026f6:	f47f af27 	bne.w	8002548 <HAL_RCC_OscConfig+0x168>
 80026fa:	e780      	b.n	80025fe <HAL_RCC_OscConfig+0x21e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fc:	6853      	ldr	r3, [r2, #4]
 80026fe:	0258      	lsls	r0, r3, #9
 8002700:	f57f ae93 	bpl.w	800242a <HAL_RCC_OscConfig+0x4a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	4b6c      	ldr	r3, [pc, #432]	; (80028b8 <HAL_RCC_OscConfig+0x4d8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0399      	lsls	r1, r3, #14
 800270a:	f57f aeb0 	bpl.w	800246e <HAL_RCC_OscConfig+0x8e>
 800270e:	6863      	ldr	r3, [r4, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f47f aeac 	bne.w	800246e <HAL_RCC_OscConfig+0x8e>
 8002716:	e7b8      	b.n	800268a <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002718:	4a67      	ldr	r2, [pc, #412]	; (80028b8 <HAL_RCC_OscConfig+0x4d8>)
 800271a:	6813      	ldr	r3, [r2, #0]
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002722:	f7fe fa6f 	bl	8000c04 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4d64      	ldr	r5, [pc, #400]	; (80028b8 <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 8002728:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	e004      	b.n	8002736 <HAL_RCC_OscConfig+0x356>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800272c:	f7fe fa6a 	bl	8000c04 <HAL_GetTick>
 8002730:	1b80      	subs	r0, r0, r6
 8002732:	2864      	cmp	r0, #100	; 0x64
 8002734:	d813      	bhi.n	800275e <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	682b      	ldr	r3, [r5, #0]
 8002738:	039a      	lsls	r2, r3, #14
 800273a:	d5f7      	bpl.n	800272c <HAL_RCC_OscConfig+0x34c>
 800273c:	e697      	b.n	800246e <HAL_RCC_OscConfig+0x8e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	682a      	ldr	r2, [r5, #0]
 8002740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002744:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8002746:	f7fe fa5d 	bl	8000c04 <HAL_GetTick>
 800274a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	05d9      	lsls	r1, r3, #23
 8002750:	f53f aece 	bmi.w	80024f0 <HAL_RCC_OscConfig+0x110>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7fe fa56 	bl	8000c04 <HAL_GetTick>
 8002758:	1bc0      	subs	r0, r0, r7
 800275a:	2802      	cmp	r0, #2
 800275c:	d9f6      	bls.n	800274c <HAL_RCC_OscConfig+0x36c>
            return HAL_TIMEOUT;
 800275e:	2003      	movs	r0, #3
}
 8002760:	b002      	add	sp, #8
 8002762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002766:	4a54      	ldr	r2, [pc, #336]	; (80028b8 <HAL_RCC_OscConfig+0x4d8>)
 8002768:	6921      	ldr	r1, [r4, #16]
 800276a:	6813      	ldr	r3, [r2, #0]
 800276c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002770:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	6823      	ldr	r3, [r4, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002778:	e67d      	b.n	8002476 <HAL_RCC_OscConfig+0x96>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800277a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800277e:	484d      	ldr	r0, [pc, #308]	; (80028b4 <HAL_RCC_OscConfig+0x4d4>)
 8002780:	f7fe f8e6 	bl	8000950 <assert_failed>
 8002784:	e746      	b.n	8002614 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8002786:	2001      	movs	r0, #1
}
 8002788:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800278a:	2600      	movs	r6, #0
 800278c:	e6ab      	b.n	80024e6 <HAL_RCC_OscConfig+0x106>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278e:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <HAL_RCC_OscConfig+0x4d8>)
 8002790:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002798:	f7fe fa34 	bl	8000c04 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279c:	4d46      	ldr	r5, [pc, #280]	; (80028b8 <HAL_RCC_OscConfig+0x4d8>)
      tickstart = HAL_GetTick();
 800279e:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	e005      	b.n	80027b2 <HAL_RCC_OscConfig+0x3d2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe fa2d 	bl	8000c04 <HAL_GetTick>
 80027aa:	eba0 0008 	sub.w	r0, r0, r8
 80027ae:	42b8      	cmp	r0, r7
 80027b0:	d8d5      	bhi.n	800275e <HAL_RCC_OscConfig+0x37e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027b4:	079a      	lsls	r2, r3, #30
 80027b6:	d5f6      	bpl.n	80027a6 <HAL_RCC_OscConfig+0x3c6>
    if(pwrclkchanged == SET)
 80027b8:	2e00      	cmp	r6, #0
 80027ba:	f43f aebf 	beq.w	800253c <HAL_RCC_OscConfig+0x15c>
 80027be:	e021      	b.n	8002804 <HAL_RCC_OscConfig+0x424>
        __HAL_RCC_HSI_DISABLE();
 80027c0:	4a3e      	ldr	r2, [pc, #248]	; (80028bc <HAL_RCC_OscConfig+0x4dc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	4d3d      	ldr	r5, [pc, #244]	; (80028b8 <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_HSI_DISABLE();
 80027c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80027c6:	f7fe fa1d 	bl	8000c04 <HAL_GetTick>
 80027ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027cc:	e004      	b.n	80027d8 <HAL_RCC_OscConfig+0x3f8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ce:	f7fe fa19 	bl	8000c04 <HAL_GetTick>
 80027d2:	1b80      	subs	r0, r0, r6
 80027d4:	2802      	cmp	r0, #2
 80027d6:	d8c2      	bhi.n	800275e <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d8:	682b      	ldr	r3, [r5, #0]
 80027da:	0799      	lsls	r1, r3, #30
 80027dc:	d4f7      	bmi.n	80027ce <HAL_RCC_OscConfig+0x3ee>
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	e649      	b.n	8002476 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PLL_DISABLE();
 80027e2:	4a37      	ldr	r2, [pc, #220]	; (80028c0 <HAL_RCC_OscConfig+0x4e0>)
 80027e4:	2100      	movs	r1, #0
 80027e6:	6011      	str	r1, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e8:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 80027ea:	f7fe fa0b 	bl	8000c04 <HAL_GetTick>
 80027ee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f0:	e004      	b.n	80027fc <HAL_RCC_OscConfig+0x41c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f2:	f7fe fa07 	bl	8000c04 <HAL_GetTick>
 80027f6:	1b40      	subs	r0, r0, r5
 80027f8:	2802      	cmp	r0, #2
 80027fa:	d8b0      	bhi.n	800275e <HAL_RCC_OscConfig+0x37e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	019b      	lsls	r3, r3, #6
 8002800:	d4f7      	bmi.n	80027f2 <HAL_RCC_OscConfig+0x412>
 8002802:	e6fc      	b.n	80025fe <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002804:	4a2c      	ldr	r2, [pc, #176]	; (80028b8 <HAL_RCC_OscConfig+0x4d8>)
 8002806:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	e695      	b.n	800253c <HAL_RCC_OscConfig+0x15c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002810:	2801      	cmp	r0, #1
 8002812:	f43f af3b 	beq.w	800268c <HAL_RCC_OscConfig+0x2ac>
        pll_config = RCC->PLLCFGR;
 8002816:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002818:	69e2      	ldr	r2, [r4, #28]
 800281a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800281e:	4291      	cmp	r1, r2
 8002820:	f47f af33 	bne.w	800268a <HAL_RCC_OscConfig+0x2aa>
 8002824:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002826:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	4291      	cmp	r1, r2
 800282c:	f47f af2d 	bne.w	800268a <HAL_RCC_OscConfig+0x2aa>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002830:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002834:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002836:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002838:	428a      	cmp	r2, r1
 800283a:	f47f af26 	bne.w	800268a <HAL_RCC_OscConfig+0x2aa>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800283e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002840:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002844:	4291      	cmp	r1, r2
 8002846:	f47f af20 	bne.w	800268a <HAL_RCC_OscConfig+0x2aa>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800284a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800284c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8002850:	1a18      	subs	r0, r3, r0
 8002852:	bf18      	it	ne
 8002854:	2001      	movne	r0, #1
 8002856:	e719      	b.n	800268c <HAL_RCC_OscConfig+0x2ac>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002858:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800285c:	40d3      	lsrs	r3, r2
 800285e:	07d8      	lsls	r0, r3, #31
 8002860:	f53f ae97 	bmi.w	8002592 <HAL_RCC_OscConfig+0x1b2>
 8002864:	e690      	b.n	8002588 <HAL_RCC_OscConfig+0x1a8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_RCC_OscConfig+0x4d8>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e753      	b.n	8002722 <HAL_RCC_OscConfig+0x342>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_RCC_OscConfig+0x4d8>)
 800287c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800287e:	f042 0204 	orr.w	r2, r2, #4
 8002882:	671a      	str	r2, [r3, #112]	; 0x70
 8002884:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	671a      	str	r2, [r3, #112]	; 0x70
 800288c:	e784      	b.n	8002798 <HAL_RCC_OscConfig+0x3b8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800288e:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002892:	4808      	ldr	r0, [pc, #32]	; (80028b4 <HAL_RCC_OscConfig+0x4d4>)
 8002894:	f7fe f85c 	bl	8000950 <assert_failed>
 8002898:	e680      	b.n	800259c <HAL_RCC_OscConfig+0x1bc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800289a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <HAL_RCC_OscConfig+0x4d4>)
 80028a0:	f7fe f856 	bl	8000950 <assert_failed>
 80028a4:	e66c      	b.n	8002580 <HAL_RCC_OscConfig+0x1a0>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80028a6:	f240 11d9 	movw	r1, #473	; 0x1d9
 80028aa:	4802      	ldr	r0, [pc, #8]	; (80028b4 <HAL_RCC_OscConfig+0x4d4>)
 80028ac:	f7fe f850 	bl	8000950 <assert_failed>
 80028b0:	e661      	b.n	8002576 <HAL_RCC_OscConfig+0x196>
 80028b2:	bf00      	nop
 80028b4:	080038ac 	.word	0x080038ac
 80028b8:	40023800 	.word	0x40023800
 80028bc:	42470000 	.word	0x42470000
 80028c0:	42470060 	.word	0x42470060

080028c4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c4:	4917      	ldr	r1, [pc, #92]	; (8002924 <HAL_RCC_GetSysClockFreq+0x60>)
{
 80028c6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c8:	688b      	ldr	r3, [r1, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d01b      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x46>
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d117      	bne.n	8002906 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d8:	684b      	ldr	r3, [r1, #4]
 80028da:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e2:	d114      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e4:	6849      	ldr	r1, [r1, #4]
 80028e6:	4810      	ldr	r0, [pc, #64]	; (8002928 <HAL_RCC_GetSysClockFreq+0x64>)
 80028e8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80028ec:	fba1 0100 	umull	r0, r1, r1, r0
 80028f0:	f7fd fc72 	bl	80001d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_GetSysClockFreq+0x60>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80028fc:	3301      	adds	r3, #1
 80028fe:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002900:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002904:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002906:	4808      	ldr	r0, [pc, #32]	; (8002928 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002908:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800290a:	4808      	ldr	r0, [pc, #32]	; (800292c <HAL_RCC_GetSysClockFreq+0x68>)
}
 800290c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290e:	684b      	ldr	r3, [r1, #4]
 8002910:	4806      	ldr	r0, [pc, #24]	; (800292c <HAL_RCC_GetSysClockFreq+0x68>)
 8002912:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002916:	fba3 0100 	umull	r0, r1, r3, r0
 800291a:	2300      	movs	r3, #0
 800291c:	f7fd fc5c 	bl	80001d8 <__aeabi_uldivmod>
 8002920:	e7e8      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x30>
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	00f42400 	.word	0x00f42400
 800292c:	007a1200 	.word	0x007a1200

08002930 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002930:	2800      	cmp	r0, #0
 8002932:	f000 80f1 	beq.w	8002b18 <HAL_RCC_ClockConfig+0x1e8>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002936:	6803      	ldr	r3, [r0, #0]
 8002938:	3b01      	subs	r3, #1
 800293a:	2b0e      	cmp	r3, #14
{
 800293c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002940:	4604      	mov	r4, r0
 8002942:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002944:	f200 80d2 	bhi.w	8002aec <HAL_RCC_ClockConfig+0x1bc>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002948:	2d07      	cmp	r5, #7
 800294a:	f200 80c2 	bhi.w	8002ad2 <HAL_RCC_ClockConfig+0x1a2>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800294e:	4a76      	ldr	r2, [pc, #472]	; (8002b28 <HAL_RCC_ClockConfig+0x1f8>)
 8002950:	6813      	ldr	r3, [r2, #0]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	42ab      	cmp	r3, r5
 8002958:	d209      	bcs.n	800296e <HAL_RCC_ClockConfig+0x3e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	b2eb      	uxtb	r3, r5
 800295c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	6813      	ldr	r3, [r2, #0]
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	42ab      	cmp	r3, r5
 8002966:	d002      	beq.n	800296e <HAL_RCC_ClockConfig+0x3e>
    return HAL_ERROR;
 8002968:	2001      	movs	r0, #1
}
 800296a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	0798      	lsls	r0, r3, #30
 8002972:	d52c      	bpl.n	80029ce <HAL_RCC_ClockConfig+0x9e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	0759      	lsls	r1, r3, #29
 8002976:	d504      	bpl.n	8002982 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002978:	496c      	ldr	r1, [pc, #432]	; (8002b2c <HAL_RCC_ClockConfig+0x1fc>)
 800297a:	688a      	ldr	r2, [r1, #8]
 800297c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002980:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	071a      	lsls	r2, r3, #28
 8002984:	d504      	bpl.n	8002990 <HAL_RCC_ClockConfig+0x60>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002986:	4969      	ldr	r1, [pc, #420]	; (8002b2c <HAL_RCC_ClockConfig+0x1fc>)
 8002988:	688a      	ldr	r2, [r1, #8]
 800298a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800298e:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002990:	68a1      	ldr	r1, [r4, #8]
 8002992:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 8002996:	d014      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x92>
 8002998:	f021 0220 	bic.w	r2, r1, #32
 800299c:	2a90      	cmp	r2, #144	; 0x90
 800299e:	d010      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x92>
 80029a0:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 80029a4:	2aa0      	cmp	r2, #160	; 0xa0
 80029a6:	d00c      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x92>
 80029a8:	f021 0210 	bic.w	r2, r1, #16
 80029ac:	2ac0      	cmp	r2, #192	; 0xc0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x92>
 80029b0:	29f0      	cmp	r1, #240	; 0xf0
 80029b2:	d006      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x92>
 80029b4:	f240 2175 	movw	r1, #629	; 0x275
 80029b8:	485d      	ldr	r0, [pc, #372]	; (8002b30 <HAL_RCC_ClockConfig+0x200>)
 80029ba:	f7fd ffc9 	bl	8000950 <assert_failed>
 80029be:	68a1      	ldr	r1, [r4, #8]
 80029c0:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c2:	485a      	ldr	r0, [pc, #360]	; (8002b2c <HAL_RCC_ClockConfig+0x1fc>)
 80029c4:	6882      	ldr	r2, [r0, #8]
 80029c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029ca:	430a      	orrs	r2, r1
 80029cc:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ce:	07df      	lsls	r7, r3, #31
 80029d0:	d528      	bpl.n	8002a24 <HAL_RCC_ClockConfig+0xf4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80029d2:	6863      	ldr	r3, [r4, #4]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	f200 8098 	bhi.w	8002b0a <HAL_RCC_ClockConfig+0x1da>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029da:	2b01      	cmp	r3, #1
 80029dc:	f000 808f 	beq.w	8002afe <HAL_RCC_ClockConfig+0x1ce>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e0:	1e9a      	subs	r2, r3, #2
 80029e2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e4:	4a51      	ldr	r2, [pc, #324]	; (8002b2c <HAL_RCC_ClockConfig+0x1fc>)
 80029e6:	6812      	ldr	r2, [r2, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e8:	f240 809a 	bls.w	8002b20 <HAL_RCC_ClockConfig+0x1f0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	0791      	lsls	r1, r2, #30
 80029ee:	d5bb      	bpl.n	8002968 <HAL_RCC_ClockConfig+0x38>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f0:	4e4e      	ldr	r6, [pc, #312]	; (8002b2c <HAL_RCC_ClockConfig+0x1fc>)
 80029f2:	68b2      	ldr	r2, [r6, #8]
 80029f4:	f022 0203 	bic.w	r2, r2, #3
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80029fc:	f7fe f902 	bl	8000c04 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a00:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a04:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	e006      	b.n	8002a16 <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7fe f8fc 	bl	8000c04 <HAL_GetTick>
 8002a0c:	eba0 0008 	sub.w	r0, r0, r8
 8002a10:	42b8      	cmp	r0, r7
 8002a12:	f200 8083 	bhi.w	8002b1c <HAL_RCC_ClockConfig+0x1ec>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	68b3      	ldr	r3, [r6, #8]
 8002a18:	6862      	ldr	r2, [r4, #4]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a22:	d1f1      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xd8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4a40      	ldr	r2, [pc, #256]	; (8002b28 <HAL_RCC_ClockConfig+0x1f8>)
 8002a26:	6813      	ldr	r3, [r2, #0]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	42ab      	cmp	r3, r5
 8002a2e:	d906      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a30:	b2eb      	uxtb	r3, r5
 8002a32:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a34:	6813      	ldr	r3, [r2, #0]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	42ab      	cmp	r3, r5
 8002a3c:	d194      	bne.n	8002968 <HAL_RCC_ClockConfig+0x38>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	075a      	lsls	r2, r3, #29
 8002a42:	d518      	bpl.n	8002a76 <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002a44:	68e1      	ldr	r1, [r4, #12]
 8002a46:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8002a4a:	d00e      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x13a>
 8002a4c:	f421 6200 	bic.w	r2, r1, #2048	; 0x800
 8002a50:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x13a>
 8002a56:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 8002a5a:	d006      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x13a>
 8002a5c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8002a60:	4833      	ldr	r0, [pc, #204]	; (8002b30 <HAL_RCC_ClockConfig+0x200>)
 8002a62:	f7fd ff75 	bl	8000950 <assert_failed>
 8002a66:	68e1      	ldr	r1, [r4, #12]
 8002a68:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6a:	4830      	ldr	r0, [pc, #192]	; (8002b2c <HAL_RCC_ClockConfig+0x1fc>)
 8002a6c:	6882      	ldr	r2, [r0, #8]
 8002a6e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002a72:	430a      	orrs	r2, r1
 8002a74:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a76:	071b      	lsls	r3, r3, #28
 8002a78:	d518      	bpl.n	8002aac <HAL_RCC_ClockConfig+0x17c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002a7a:	6922      	ldr	r2, [r4, #16]
 8002a7c:	f432 5380 	bics.w	r3, r2, #4096	; 0x1000
 8002a80:	d00d      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x16e>
 8002a82:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8002a86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x16e>
 8002a8c:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8002a90:	d005      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x16e>
 8002a92:	f240 21c1 	movw	r1, #705	; 0x2c1
 8002a96:	4826      	ldr	r0, [pc, #152]	; (8002b30 <HAL_RCC_ClockConfig+0x200>)
 8002a98:	f7fd ff5a 	bl	8000950 <assert_failed>
 8002a9c:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a9e:	4923      	ldr	r1, [pc, #140]	; (8002b2c <HAL_RCC_ClockConfig+0x1fc>)
 8002aa0:	688b      	ldr	r3, [r1, #8]
 8002aa2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002aa6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002aaa:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aac:	f7ff ff0a 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_RCC_ClockConfig+0x1fc>)
 8002ab2:	4c20      	ldr	r4, [pc, #128]	; (8002b34 <HAL_RCC_ClockConfig+0x204>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8002ab6:	4920      	ldr	r1, [pc, #128]	; (8002b38 <HAL_RCC_ClockConfig+0x208>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab8:	4a20      	ldr	r2, [pc, #128]	; (8002b3c <HAL_RCC_ClockConfig+0x20c>)
 8002aba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002abe:	5ce3      	ldrb	r3, [r4, r3]
 8002ac0:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8002ac4:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ac6:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8002ac8:	f7fe f852 	bl	8000b70 <HAL_InitTick>
  return HAL_OK;
 8002acc:	2000      	movs	r0, #0
}
 8002ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002ad2:	f240 2152 	movw	r1, #594	; 0x252
 8002ad6:	4816      	ldr	r0, [pc, #88]	; (8002b30 <HAL_RCC_ClockConfig+0x200>)
 8002ad8:	f7fd ff3a 	bl	8000950 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_RCC_ClockConfig+0x1f8>)
 8002ade:	6813      	ldr	r3, [r2, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	42ab      	cmp	r3, r5
 8002ae6:	f4ff af38 	bcc.w	800295a <HAL_RCC_ClockConfig+0x2a>
 8002aea:	e740      	b.n	800296e <HAL_RCC_ClockConfig+0x3e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002aec:	f240 2151 	movw	r1, #593	; 0x251
 8002af0:	480f      	ldr	r0, [pc, #60]	; (8002b30 <HAL_RCC_ClockConfig+0x200>)
 8002af2:	f7fd ff2d 	bl	8000950 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002af6:	2d07      	cmp	r5, #7
 8002af8:	f67f af29 	bls.w	800294e <HAL_RCC_ClockConfig+0x1e>
 8002afc:	e7e9      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1a2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <HAL_RCC_ClockConfig+0x1fc>)
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	0396      	lsls	r6, r2, #14
 8002b04:	f53f af74 	bmi.w	80029f0 <HAL_RCC_ClockConfig+0xc0>
 8002b08:	e72e      	b.n	8002968 <HAL_RCC_ClockConfig+0x38>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002b0a:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8002b0e:	4808      	ldr	r0, [pc, #32]	; (8002b30 <HAL_RCC_ClockConfig+0x200>)
 8002b10:	f7fd ff1e 	bl	8000950 <assert_failed>
 8002b14:	6863      	ldr	r3, [r4, #4]
 8002b16:	e760      	b.n	80029da <HAL_RCC_ClockConfig+0xaa>
    return HAL_ERROR;
 8002b18:	2001      	movs	r0, #1
}
 8002b1a:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002b1c:	2003      	movs	r0, #3
 8002b1e:	e724      	b.n	800296a <HAL_RCC_ClockConfig+0x3a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b20:	0190      	lsls	r0, r2, #6
 8002b22:	f53f af65 	bmi.w	80029f0 <HAL_RCC_ClockConfig+0xc0>
 8002b26:	e71f      	b.n	8002968 <HAL_RCC_ClockConfig+0x38>
 8002b28:	40023c00 	.word	0x40023c00
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	080038ac 	.word	0x080038ac
 8002b34:	080037e4 	.word	0x080037e4
 8002b38:	20000014 	.word	0x20000014
 8002b3c:	2000000c 	.word	0x2000000c

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002b42:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b44:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002b46:	4905      	ldr	r1, [pc, #20]	; (8002b5c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b48:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002b4c:	6808      	ldr	r0, [r1, #0]
 8002b4e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b50:	40d8      	lsrs	r0, r3
 8002b52:	4770      	bx	lr
 8002b54:	40023800 	.word	0x40023800
 8002b58:	080037f4 	.word	0x080037f4
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002b62:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002b64:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002b66:	4905      	ldr	r1, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b68:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002b6c:	6808      	ldr	r0, [r1, #0]
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b70:	40d8      	lsrs	r0, r3
 8002b72:	4770      	bx	lr
 8002b74:	40023800 	.word	0x40023800
 8002b78:	080037f4 	.word	0x080037f4
 8002b7c:	2000000c 	.word	0x2000000c

08002b80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b82:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  uint32_t tmpreg1 = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002b84:	6800      	ldr	r0, [r0, #0]
 8002b86:	1e43      	subs	r3, r0, #1
 8002b88:	2b0e      	cmp	r3, #14
{
 8002b8a:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002b8c:	f200 80c4 	bhi.w	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x198>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b90:	f010 0f05 	tst.w	r0, #5
 8002b94:	d03a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8002b96:	68e3      	ldr	r3, [r4, #12]
 8002b98:	3b02      	subs	r3, #2
 8002b9a:	2b05      	cmp	r3, #5
 8002b9c:	f200 80c9 	bhi.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8002ba0:	68a3      	ldr	r3, [r4, #8]
 8002ba2:	3bc0      	subs	r3, #192	; 0xc0
 8002ba4:	2bf0      	cmp	r3, #240	; 0xf0
 8002ba6:	f200 80ce 	bhi.w	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8002baa:	6863      	ldr	r3, [r4, #4]
 8002bac:	3b02      	subs	r3, #2
 8002bae:	2b3d      	cmp	r3, #61	; 0x3d
 8002bb0:	f200 80b9 	bhi.w	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bb4:	4b77      	ldr	r3, [pc, #476]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x214>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bb6:	4d78      	ldr	r5, [pc, #480]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x218>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002bbc:	f7fe f822 	bl	8000c04 <HAL_GetTick>
 8002bc0:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bc2:	e005      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bc4:	f7fe f81e 	bl	8000c04 <HAL_GetTick>
 8002bc8:	1b80      	subs	r0, r0, r6
 8002bca:	2802      	cmp	r0, #2
 8002bcc:	f200 80a1 	bhi.w	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x192>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	d4f6      	bmi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x44>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bd6:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 8002bda:	6861      	ldr	r1, [r4, #4]
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bdc:	4a6d      	ldr	r2, [pc, #436]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x214>)
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bde:	071b      	lsls	r3, r3, #28
 8002be0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002be4:	430b      	orrs	r3, r1
    __HAL_RCC_PLLI2S_ENABLE();
 8002be6:	2101      	movs	r1, #1
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002be8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002bec:	6011      	str	r1, [r2, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bee:	f7fe f809 	bl	8000c04 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bf2:	4d69      	ldr	r5, [pc, #420]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x218>)
    tickstart = HAL_GetTick();
 8002bf4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bf6:	e005      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bf8:	f7fe f804 	bl	8000c04 <HAL_GetTick>
 8002bfc:	1b80      	subs	r0, r0, r6
 8002bfe:	2802      	cmp	r0, #2
 8002c00:	f200 8087 	bhi.w	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x192>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	011f      	lsls	r7, r3, #4
 8002c08:	d5f6      	bpl.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002c0a:	6820      	ldr	r0, [r4, #0]
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c0c:	0785      	lsls	r5, r0, #30
 8002c0e:	d577      	bpl.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002c10:	6923      	ldr	r3, [r4, #16]
 8002c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c16:	d02e      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1c:	d02b      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002c1e:	4a5f      	ldr	r2, [pc, #380]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002c20:	f423 21a0 	bic.w	r1, r3, #327680	; 0x50000
 8002c24:	4291      	cmp	r1, r2
 8002c26:	f423 3080 	bic.w	r0, r3, #65536	; 0x10000
 8002c2a:	d024      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002c2c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8002c30:	f423 2110 	bic.w	r1, r3, #589824	; 0x90000
 8002c34:	4291      	cmp	r1, r2
 8002c36:	d01e      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002c38:	4959      	ldr	r1, [pc, #356]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8002c3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c3e:	428a      	cmp	r2, r1
 8002c40:	d019      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002c42:	f501 21c0 	add.w	r1, r1, #393216	; 0x60000
 8002c46:	f423 1388 	bic.w	r3, r3, #1114112	; 0x110000
 8002c4a:	428b      	cmp	r3, r1
 8002c4c:	d013      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002c4e:	4b55      	ldr	r3, [pc, #340]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d010      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002c54:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d00c      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002c5c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d008      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002c64:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002c68:	4298      	cmp	r0, r3
 8002c6a:	d004      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002c6c:	f640 2112 	movw	r1, #2578	; 0xa12
 8002c70:	484d      	ldr	r0, [pc, #308]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002c72:	f7fd fe6d 	bl	8000950 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	4b48      	ldr	r3, [pc, #288]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x218>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c78:	4d4c      	ldr	r5, [pc, #304]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	9201      	str	r2, [sp, #4]
 8002c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002c90:	682b      	ldr	r3, [r5, #0]
 8002c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c96:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c98:	f7fd ffb4 	bl	8000c04 <HAL_GetTick>
 8002c9c:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c9e:	e004      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x12a>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ca0:	f7fd ffb0 	bl	8000c04 <HAL_GetTick>
 8002ca4:	1b80      	subs	r0, r0, r6
 8002ca6:	2802      	cmp	r0, #2
 8002ca8:	d833      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x192>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002caa:	682b      	ldr	r3, [r5, #0]
 8002cac:	05d9      	lsls	r1, r3, #23
 8002cae:	d5f7      	bpl.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cb0:	4939      	ldr	r1, [pc, #228]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002cb2:	6923      	ldr	r3, [r4, #16]
 8002cb4:	6f0a      	ldr	r2, [r1, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cb6:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8002cba:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8002cbe:	d010      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8002cc0:	4282      	cmp	r2, r0
 8002cc2:	d00e      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc4:	6f0b      	ldr	r3, [r1, #112]	; 0x70
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cc6:	4a3a      	ldr	r2, [pc, #232]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ccc:	2501      	movs	r5, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cce:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cd0:	6015      	str	r5, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd2:	6010      	str	r0, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002cd4:	670b      	str	r3, [r1, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cd6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002cd8:	07da      	lsls	r2, r3, #31
 8002cda:	d44a      	bmi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8002cdc:	6923      	ldr	r3, [r4, #16]
 8002cde:	f403 7040 	and.w	r0, r3, #768	; 0x300
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce2:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8002ce6:	d039      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ce8:	492b      	ldr	r1, [pc, #172]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002cea:	688a      	ldr	r2, [r1, #8]
 8002cec:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002cf0:	608a      	str	r2, [r1, #8]
 8002cf2:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002cf4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfe:	6820      	ldr	r0, [r4, #0]
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d00:	f010 0008 	ands.w	r0, r0, #8
 8002d04:	d006      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d06:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002d08:	7d22      	ldrb	r2, [r4, #20]
 8002d0a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002d0c:	2000      	movs	r0, #0
}
 8002d0e:	b003      	add	sp, #12
 8002d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002d12:	2003      	movs	r0, #3
}
 8002d14:	b003      	add	sp, #12
 8002d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002d18:	4823      	ldr	r0, [pc, #140]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002d1a:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8002d1e:	f7fd fe17 	bl	8000950 <assert_failed>
 8002d22:	6820      	ldr	r0, [r4, #0]
 8002d24:	e734      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x10>
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8002d26:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8002d2a:	481f      	ldr	r0, [pc, #124]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002d2c:	f7fd fe10 	bl	8000950 <assert_failed>
 8002d30:	e740      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x34>
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8002d32:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8002d36:	481c      	ldr	r0, [pc, #112]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002d38:	f7fd fe0a 	bl	8000950 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8002d3c:	68a3      	ldr	r3, [r4, #8]
 8002d3e:	3bc0      	subs	r3, #192	; 0xc0
 8002d40:	2bf0      	cmp	r3, #240	; 0xf0
 8002d42:	f67f af32 	bls.w	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8002d46:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8002d4a:	4817      	ldr	r0, [pc, #92]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002d4c:	f7fd fe00 	bl	8000950 <assert_failed>
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8002d50:	6863      	ldr	r3, [r4, #4]
 8002d52:	3b02      	subs	r3, #2
 8002d54:	2b3d      	cmp	r3, #61	; 0x3d
 8002d56:	f67f af2d 	bls.w	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002d5a:	e7e4      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5c:	480e      	ldr	r0, [pc, #56]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002d5e:	6882      	ldr	r2, [r0, #8]
 8002d60:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002d64:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002d68:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	6082      	str	r2, [r0, #8]
 8002d70:	e7bf      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x172>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d72:	460d      	mov	r5, r1
        tickstart = HAL_GetTick();
 8002d74:	f7fd ff46 	bl	8000c04 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002d7c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7e:	e004      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d80:	f7fd ff40 	bl	8000c04 <HAL_GetTick>
 8002d84:	1bc0      	subs	r0, r0, r7
 8002d86:	42b0      	cmp	r0, r6
 8002d88:	d8c3      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x192>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d8c:	079b      	lsls	r3, r3, #30
 8002d8e:	d5f7      	bpl.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d90:	e7a4      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002d92:	bf00      	nop
 8002d94:	42470068 	.word	0x42470068
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	00020300 	.word	0x00020300
 8002da0:	00080300 	.word	0x00080300
 8002da4:	00100300 	.word	0x00100300
 8002da8:	080038e4 	.word	0x080038e4
 8002dac:	40007000 	.word	0x40007000
 8002db0:	42470e40 	.word	0x42470e40
 8002db4:	424711e0 	.word	0x424711e0

08002db8 <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002db8:	2800      	cmp	r0, #0
 8002dba:	f000 80a5 	beq.w	8002f08 <HAL_RTC_Init+0x150>
{
 8002dbe:	b538      	push	{r3, r4, r5, lr}
  {
     return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8002dc0:	6843      	ldr	r3, [r0, #4]
 8002dc2:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	f040 80a0 	bne.w	8002f0c <HAL_RTC_Init+0x154>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8002dcc:	68a3      	ldr	r3, [r4, #8]
 8002dce:	2b7f      	cmp	r3, #127	; 0x7f
 8002dd0:	d878      	bhi.n	8002ec4 <HAL_RTC_Init+0x10c>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8002dd2:	68e3      	ldr	r3, [r4, #12]
 8002dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd8:	d26a      	bcs.n	8002eb0 <HAL_RTC_Init+0xf8>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8002dda:	6923      	ldr	r3, [r4, #16]
 8002ddc:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8002de0:	d004      	beq.n	8002dec <HAL_RTC_Init+0x34>
 8002de2:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002de6:	484e      	ldr	r0, [pc, #312]	; (8002f20 <HAL_RTC_Init+0x168>)
 8002de8:	f7fd fdb2 	bl	8000950 <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8002dec:	6963      	ldr	r3, [r4, #20]
 8002dee:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8002df2:	d004      	beq.n	8002dfe <HAL_RTC_Init+0x46>
 8002df4:	f240 1103 	movw	r1, #259	; 0x103
 8002df8:	4849      	ldr	r0, [pc, #292]	; (8002f20 <HAL_RTC_Init+0x168>)
 8002dfa:	f7fd fda9 	bl	8000950 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8002dfe:	69a3      	ldr	r3, [r4, #24]
 8002e00:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8002e04:	d004      	beq.n	8002e10 <HAL_RTC_Init+0x58>
 8002e06:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002e0a:	4845      	ldr	r0, [pc, #276]	; (8002f20 <HAL_RTC_Init+0x168>)
 8002e0c:	f7fd fda0 	bl	8000950 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002e10:	7f63      	ldrb	r3, [r4, #29]
 8002e12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d045      	beq.n	8002ea6 <HAL_RTC_Init+0xee>

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e1e:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e20:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e22:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e24:	6259      	str	r1, [r3, #36]	; 0x24
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	0655      	lsls	r5, r2, #25
 8002e2c:	d529      	bpl.n	8002e82 <HAL_RTC_Init+0xca>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e2e:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e30:	6862      	ldr	r2, [r4, #4]
 8002e32:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e36:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8002e3a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002e3e:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e40:	6899      	ldr	r1, [r3, #8]
 8002e42:	432a      	orrs	r2, r5
 8002e44:	4302      	orrs	r2, r0
 8002e46:	430a      	orrs	r2, r1
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e48:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e4a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e4c:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	68a1      	ldr	r1, [r4, #8]
 8002e52:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e56:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e5e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	0691      	lsls	r1, r2, #26
 8002e64:	d538      	bpl.n	8002ed8 <HAL_RTC_Init+0x120>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002e66:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002e68:	69a0      	ldr	r0, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002e6a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002e6e:	6419      	str	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e72:	25ff      	movs	r5, #255	; 0xff
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002e74:	4302      	orrs	r2, r0
    hrtc->State = HAL_RTC_STATE_READY;
 8002e76:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
    return HAL_OK;
 8002e7a:	2000      	movs	r0, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e7c:	625d      	str	r5, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002e7e:	7761      	strb	r1, [r4, #29]
}
 8002e80:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e86:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fd febc 	bl	8000c04 <HAL_GetTick>
 8002e8c:	4605      	mov	r5, r0
 8002e8e:	e005      	b.n	8002e9c <HAL_RTC_Init+0xe4>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e90:	f7fd feb8 	bl	8000c04 <HAL_GetTick>
 8002e94:	1b40      	subs	r0, r0, r5
 8002e96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e9a:	d82e      	bhi.n	8002efa <HAL_RTC_Init+0x142>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	0650      	lsls	r0, r2, #25
 8002ea2:	d5f5      	bpl.n	8002e90 <HAL_RTC_Init+0xd8>
 8002ea4:	e7c3      	b.n	8002e2e <HAL_RTC_Init+0x76>
    hrtc->Lock = HAL_UNLOCKED;
 8002ea6:	7722      	strb	r2, [r4, #28]
    HAL_RTC_MspInit(hrtc);
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7fd fd91 	bl	80009d0 <HAL_RTC_MspInit>
 8002eae:	e7b4      	b.n	8002e1a <HAL_RTC_Init+0x62>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8002eb0:	f240 1101 	movw	r1, #257	; 0x101
 8002eb4:	481a      	ldr	r0, [pc, #104]	; (8002f20 <HAL_RTC_Init+0x168>)
 8002eb6:	f7fd fd4b 	bl	8000950 <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8002eba:	6923      	ldr	r3, [r4, #16]
 8002ebc:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8002ec0:	d094      	beq.n	8002dec <HAL_RTC_Init+0x34>
 8002ec2:	e78e      	b.n	8002de2 <HAL_RTC_Init+0x2a>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8002ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ec8:	4815      	ldr	r0, [pc, #84]	; (8002f20 <HAL_RTC_Init+0x168>)
 8002eca:	f7fd fd41 	bl	8000950 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8002ece:	68e3      	ldr	r3, [r4, #12]
 8002ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ed4:	d381      	bcc.n	8002dda <HAL_RTC_Init+0x22>
 8002ed6:	e7eb      	b.n	8002eb0 <HAL_RTC_Init+0xf8>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ede:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002ee0:	f7fd fe90 	bl	8000c04 <HAL_GetTick>
 8002ee4:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	0692      	lsls	r2, r2, #26
 8002eec:	d4bb      	bmi.n	8002e66 <HAL_RTC_Init+0xae>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002eee:	f7fd fe89 	bl	8000c04 <HAL_GetTick>
 8002ef2:	1b40      	subs	r0, r0, r5
 8002ef4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002ef8:	d9f5      	bls.n	8002ee6 <HAL_RTC_Init+0x12e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002efa:	6822      	ldr	r2, [r4, #0]
 8002efc:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002efe:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f00:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 8002f02:	2001      	movs	r0, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f04:	7763      	strb	r3, [r4, #29]
}
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8002f08:	2001      	movs	r0, #1
}
 8002f0a:	4770      	bx	lr
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8002f0c:	21ff      	movs	r1, #255	; 0xff
 8002f0e:	4804      	ldr	r0, [pc, #16]	; (8002f20 <HAL_RTC_Init+0x168>)
 8002f10:	f7fd fd1e 	bl	8000950 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8002f14:	68a3      	ldr	r3, [r4, #8]
 8002f16:	2b7f      	cmp	r3, #127	; 0x7f
 8002f18:	f67f af5b 	bls.w	8002dd2 <HAL_RTC_Init+0x1a>
 8002f1c:	e7d2      	b.n	8002ec4 <HAL_RTC_Init+0x10c>
 8002f1e:	bf00      	nop
 8002f20:	08003920 	.word	0x08003920

08002f24 <HAL_RTC_SetTime>:
  assert_param(IS_RTC_FORMAT(Format));
 8002f24:	2a01      	cmp	r2, #1
{
 8002f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f2a:	4616      	mov	r6, r2
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	460d      	mov	r5, r1
  assert_param(IS_RTC_FORMAT(Format));
 8002f30:	d904      	bls.n	8002f3c <HAL_RTC_SetTime+0x18>
 8002f32:	f240 21da 	movw	r1, #730	; 0x2da
 8002f36:	48a9      	ldr	r0, [pc, #676]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 8002f38:	f7fd fd0a 	bl	8000950 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8002f3c:	68eb      	ldr	r3, [r5, #12]
 8002f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f42:	d003      	beq.n	8002f4c <HAL_RTC_SetTime+0x28>
 8002f44:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8002f48:	f040 80ea 	bne.w	8003120 <HAL_RTC_SetTime+0x1fc>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8002f4c:	692b      	ldr	r3, [r5, #16]
 8002f4e:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8002f52:	d004      	beq.n	8002f5e <HAL_RTC_SetTime+0x3a>
 8002f54:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8002f58:	48a0      	ldr	r0, [pc, #640]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 8002f5a:	f7fd fcf9 	bl	8000950 <assert_failed>
  __HAL_LOCK(hrtc);
 8002f5e:	7f23      	ldrb	r3, [r4, #28]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f000 80f3 	beq.w	800314c <HAL_RTC_SetTime+0x228>
 8002f66:	2201      	movs	r2, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f68:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8002f6a:	7722      	strb	r2, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f6c:	7763      	strb	r3, [r4, #29]
 8002f6e:	782b      	ldrb	r3, [r5, #0]
 8002f70:	6822      	ldr	r2, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8002f72:	2e00      	cmp	r6, #0
 8002f74:	d16e      	bne.n	8003054 <HAL_RTC_SetTime+0x130>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f76:	6892      	ldr	r2, [r2, #8]
 8002f78:	0650      	lsls	r0, r2, #25
 8002f7a:	f140 80bc 	bpl.w	80030f6 <HAL_RTC_SetTime+0x1d2>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	2b0b      	cmp	r3, #11
 8002f82:	f200 80dd 	bhi.w	8003140 <HAL_RTC_SetTime+0x21c>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8002f86:	78eb      	ldrb	r3, [r5, #3]
 8002f88:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 8002f8c:	f040 811a 	bne.w	80031c4 <HAL_RTC_SetTime+0x2a0>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8002f90:	786b      	ldrb	r3, [r5, #1]
 8002f92:	2b3b      	cmp	r3, #59	; 0x3b
 8002f94:	f200 80ff 	bhi.w	8003196 <HAL_RTC_SetTime+0x272>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8002f98:	78a8      	ldrb	r0, [r5, #2]
 8002f9a:	283b      	cmp	r0, #59	; 0x3b
 8002f9c:	f200 80f4 	bhi.w	8003188 <HAL_RTC_SetTime+0x264>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002fa0:	7829      	ldrb	r1, [r5, #0]
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;

  while(Value >= 10U)
 8002fa2:	2909      	cmp	r1, #9
 8002fa4:	f240 810c 	bls.w	80031c0 <HAL_RTC_SetTime+0x29c>
  uint32_t bcdhigh = 0U;
 8002fa8:	2300      	movs	r3, #0
  {
    bcdhigh++;
    Value -= 10U;
 8002faa:	390a      	subs	r1, #10
 8002fac:	b2c9      	uxtb	r1, r1
  while(Value >= 10U)
 8002fae:	2909      	cmp	r1, #9
    bcdhigh++;
 8002fb0:	f103 0301 	add.w	r3, r3, #1
  while(Value >= 10U)
 8002fb4:	d8f9      	bhi.n	8002faa <HAL_RTC_SetTime+0x86>
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	b2da      	uxtb	r2, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002fba:	786b      	ldrb	r3, [r5, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002fbc:	4311      	orrs	r1, r2
  while(Value >= 10U)
 8002fbe:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002fc0:	ea4f 4101 	mov.w	r1, r1, lsl #16
  uint32_t bcdhigh = 0U;
 8002fc4:	f04f 0200 	mov.w	r2, #0
  while(Value >= 10U)
 8002fc8:	d907      	bls.n	8002fda <HAL_RTC_SetTime+0xb6>
    Value -= 10U;
 8002fca:	3b0a      	subs	r3, #10
 8002fcc:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8002fce:	2b09      	cmp	r3, #9
    bcdhigh++;
 8002fd0:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8002fd4:	d8f9      	bhi.n	8002fca <HAL_RTC_SetTime+0xa6>
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	b2d2      	uxtb	r2, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002fda:	4313      	orrs	r3, r2
  while(Value >= 10U)
 8002fdc:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002fde:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 8002fe2:	f240 80eb 	bls.w	80031bc <HAL_RTC_SetTime+0x298>
    Value -= 10U;
 8002fe6:	380a      	subs	r0, #10
 8002fe8:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002fea:	2809      	cmp	r0, #9
    bcdhigh++;
 8002fec:	f106 0601 	add.w	r6, r6, #1
  while(Value >= 10U)
 8002ff0:	d8f9      	bhi.n	8002fe6 <HAL_RTC_SetTime+0xc2>
 8002ff2:	0136      	lsls	r6, r6, #4
 8002ff4:	b2f6      	uxtb	r6, r6
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002ff6:	78ef      	ldrb	r7, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ff8:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002ffc:	4330      	orrs	r0, r6
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ffe:	430b      	orrs	r3, r1
 8003000:	ea43 0700 	orr.w	r7, r3, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003004:	6822      	ldr	r2, [r4, #0]
 8003006:	21ca      	movs	r1, #202	; 0xca
 8003008:	2353      	movs	r3, #83	; 0x53
 800300a:	6251      	str	r1, [r2, #36]	; 0x24
 800300c:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800300e:	68d3      	ldr	r3, [r2, #12]
 8003010:	0659      	lsls	r1, r3, #25
 8003012:	d555      	bpl.n	80030c0 <HAL_RTC_SetTime+0x19c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003014:	f007 377f 	and.w	r7, r7, #2139062143	; 0x7f7f7f7f
 8003018:	f027 47fe 	bic.w	r7, r7, #2130706432	; 0x7f000000
 800301c:	6017      	str	r7, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800301e:	6891      	ldr	r1, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003020:	e9d5 3003 	ldrd	r3, r0, [r5, #12]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003024:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003028:	6091      	str	r1, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800302a:	6891      	ldr	r1, [r2, #8]
 800302c:	4303      	orrs	r3, r0
 800302e:	430b      	orrs	r3, r1
 8003030:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003032:	68d3      	ldr	r3, [r2, #12]
 8003034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003038:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800303a:	6893      	ldr	r3, [r2, #8]
 800303c:	069b      	lsls	r3, r3, #26
 800303e:	f140 8088 	bpl.w	8003152 <HAL_RTC_SetTime+0x22e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003042:	20ff      	movs	r0, #255	; 0xff
   __HAL_UNLOCK(hrtc);
 8003044:	2300      	movs	r3, #0
   hrtc->State = HAL_RTC_STATE_READY;
 8003046:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003048:	6250      	str	r0, [r2, #36]	; 0x24
   return HAL_OK;
 800304a:	4618      	mov	r0, r3
   hrtc->State = HAL_RTC_STATE_READY;
 800304c:	7761      	strb	r1, [r4, #29]
   __HAL_UNLOCK(hrtc);
 800304e:	7723      	strb	r3, [r4, #28]
}
 8003050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003054:	6891      	ldr	r1, [r2, #8]
 8003056:	091a      	lsrs	r2, r3, #4
 8003058:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800305c:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8003060:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	d04f      	beq.n	800310a <HAL_RTC_SetTime+0x1e6>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800306a:	3b01      	subs	r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b0b      	cmp	r3, #11
 8003072:	d85b      	bhi.n	800312c <HAL_RTC_SetTime+0x208>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8003074:	78eb      	ldrb	r3, [r5, #3]
 8003076:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800307a:	f040 80a9 	bne.w	80031d0 <HAL_RTC_SetTime+0x2ac>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800307e:	786b      	ldrb	r3, [r5, #1]
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003080:	091a      	lsrs	r2, r3, #4
 8003082:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b3b      	cmp	r3, #59	; 0x3b
 8003092:	f200 808d 	bhi.w	80031b0 <HAL_RTC_SetTime+0x28c>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8003096:	78af      	ldrb	r7, [r5, #2]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003098:	093a      	lsrs	r2, r7, #4
 800309a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800309e:	f007 020f 	and.w	r2, r7, #15
 80030a2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	2a3b      	cmp	r2, #59	; 0x3b
 80030aa:	d87a      	bhi.n	80031a2 <HAL_RTC_SetTime+0x27e>
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80030ac:	7868      	ldrb	r0, [r5, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030ae:	782a      	ldrb	r2, [r5, #0]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80030b0:	78eb      	ldrb	r3, [r5, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80030b2:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80030b4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80030b8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80030bc:	4307      	orrs	r7, r0
 80030be:	e7a1      	b.n	8003004 <HAL_RTC_SetTime+0xe0>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80030c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030c4:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80030c6:	f7fd fd9d 	bl	8000c04 <HAL_GetTick>
 80030ca:	4680      	mov	r8, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	68d6      	ldr	r6, [r2, #12]
 80030d0:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 80030d4:	d19e      	bne.n	8003014 <HAL_RTC_SetTime+0xf0>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80030d6:	f7fd fd95 	bl	8000c04 <HAL_GetTick>
 80030da:	eba0 0008 	sub.w	r0, r0, r8
 80030de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030e2:	d9f3      	bls.n	80030cc <HAL_RTC_SetTime+0x1a8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030e4:	6822      	ldr	r2, [r4, #0]
 80030e6:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030e8:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ea:	6251      	str	r1, [r2, #36]	; 0x24
    return HAL_ERROR;
 80030ec:	2001      	movs	r0, #1
    __HAL_UNLOCK(hrtc);
 80030ee:	7726      	strb	r6, [r4, #28]
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030f0:	7763      	strb	r3, [r4, #29]
}
 80030f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80030f6:	2b17      	cmp	r3, #23
      sTime->TimeFormat = 0x00U;
 80030f8:	70ee      	strb	r6, [r5, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80030fa:	f67f af49 	bls.w	8002f90 <HAL_RTC_SetTime+0x6c>
 80030fe:	f240 21ed 	movw	r1, #749	; 0x2ed
 8003102:	4836      	ldr	r0, [pc, #216]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 8003104:	f7fd fc24 	bl	8000950 <assert_failed>
 8003108:	e742      	b.n	8002f90 <HAL_RTC_SetTime+0x6c>
  return (tmp + (Value & (uint8_t)0x0F));
 800310a:	4413      	add	r3, r2
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b17      	cmp	r3, #23
      sTime->TimeFormat = 0x00U;
 8003110:	70e9      	strb	r1, [r5, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8003112:	d9b4      	bls.n	800307e <HAL_RTC_SetTime+0x15a>
 8003114:	f240 3101 	movw	r1, #769	; 0x301
 8003118:	4830      	ldr	r0, [pc, #192]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 800311a:	f7fd fc19 	bl	8000950 <assert_failed>
 800311e:	e7ae      	b.n	800307e <HAL_RTC_SetTime+0x15a>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8003120:	f240 21db 	movw	r1, #731	; 0x2db
 8003124:	482d      	ldr	r0, [pc, #180]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 8003126:	f7fd fc13 	bl	8000950 <assert_failed>
 800312a:	e70f      	b.n	8002f4c <HAL_RTC_SetTime+0x28>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800312c:	f240 21fb 	movw	r1, #763	; 0x2fb
 8003130:	482a      	ldr	r0, [pc, #168]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 8003132:	f7fd fc0d 	bl	8000950 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8003136:	78eb      	ldrb	r3, [r5, #3]
 8003138:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800313c:	d09f      	beq.n	800307e <HAL_RTC_SetTime+0x15a>
 800313e:	e047      	b.n	80031d0 <HAL_RTC_SetTime+0x2ac>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8003140:	f240 21e7 	movw	r1, #743	; 0x2e7
 8003144:	4825      	ldr	r0, [pc, #148]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 8003146:	f7fd fc03 	bl	8000950 <assert_failed>
 800314a:	e71c      	b.n	8002f86 <HAL_RTC_SetTime+0x62>
  __HAL_LOCK(hrtc);
 800314c:	2002      	movs	r0, #2
}
 800314e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003152:	68d3      	ldr	r3, [r2, #12]
 8003154:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003158:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800315a:	f7fd fd53 	bl	8000c04 <HAL_GetTick>
 800315e:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003160:	6822      	ldr	r2, [r4, #0]
 8003162:	68d5      	ldr	r5, [r2, #12]
 8003164:	f015 0520 	ands.w	r5, r5, #32
 8003168:	f47f af6b 	bne.w	8003042 <HAL_RTC_SetTime+0x11e>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800316c:	f7fd fd4a 	bl	8000c04 <HAL_GetTick>
 8003170:	1b80      	subs	r0, r0, r6
 8003172:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003176:	d9f3      	bls.n	8003160 <HAL_RTC_SetTime+0x23c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003178:	6822      	ldr	r2, [r4, #0]
 800317a:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 800317c:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800317e:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 8003180:	2001      	movs	r0, #1
        __HAL_UNLOCK(hrtc);
 8003182:	7725      	strb	r5, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003184:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8003186:	e763      	b.n	8003050 <HAL_RTC_SetTime+0x12c>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8003188:	4814      	ldr	r0, [pc, #80]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 800318a:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800318e:	f7fd fbdf 	bl	8000950 <assert_failed>
 8003192:	78a8      	ldrb	r0, [r5, #2]
 8003194:	e704      	b.n	8002fa0 <HAL_RTC_SetTime+0x7c>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8003196:	f240 21ef 	movw	r1, #751	; 0x2ef
 800319a:	4810      	ldr	r0, [pc, #64]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 800319c:	f7fd fbd8 	bl	8000950 <assert_failed>
 80031a0:	e6fa      	b.n	8002f98 <HAL_RTC_SetTime+0x74>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80031a2:	f44f 7141 	mov.w	r1, #772	; 0x304
 80031a6:	480d      	ldr	r0, [pc, #52]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 80031a8:	f7fd fbd2 	bl	8000950 <assert_failed>
 80031ac:	78af      	ldrb	r7, [r5, #2]
 80031ae:	e77d      	b.n	80030ac <HAL_RTC_SetTime+0x188>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80031b0:	f240 3103 	movw	r1, #771	; 0x303
 80031b4:	4809      	ldr	r0, [pc, #36]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 80031b6:	f7fd fbcb 	bl	8000950 <assert_failed>
 80031ba:	e76c      	b.n	8003096 <HAL_RTC_SetTime+0x172>
  while(Value >= 10U)
 80031bc:	2600      	movs	r6, #0
 80031be:	e71a      	b.n	8002ff6 <HAL_RTC_SetTime+0xd2>
 80031c0:	2200      	movs	r2, #0
 80031c2:	e6fa      	b.n	8002fba <HAL_RTC_SetTime+0x96>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80031c4:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80031c8:	4804      	ldr	r0, [pc, #16]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 80031ca:	f7fd fbc1 	bl	8000950 <assert_failed>
 80031ce:	e6df      	b.n	8002f90 <HAL_RTC_SetTime+0x6c>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80031d0:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 80031d4:	4801      	ldr	r0, [pc, #4]	; (80031dc <HAL_RTC_SetTime+0x2b8>)
 80031d6:	f7fd fbbb 	bl	8000950 <assert_failed>
 80031da:	e750      	b.n	800307e <HAL_RTC_SetTime+0x15a>
 80031dc:	08003920 	.word	0x08003920

080031e0 <HAL_RTC_GetTime>:
  assert_param(IS_RTC_FORMAT(Format));
 80031e0:	2a01      	cmp	r2, #1
{
 80031e2:	b570      	push	{r4, r5, r6, lr}
 80031e4:	4616      	mov	r6, r2
 80031e6:	4605      	mov	r5, r0
 80031e8:	460c      	mov	r4, r1
  assert_param(IS_RTC_FORMAT(Format));
 80031ea:	d904      	bls.n	80031f6 <HAL_RTC_GetTime+0x16>
 80031ec:	f240 315d 	movw	r1, #861	; 0x35d
 80031f0:	481a      	ldr	r0, [pc, #104]	; (800325c <HAL_RTC_GetTime+0x7c>)
 80031f2:	f7fd fbad 	bl	8000950 <assert_failed>
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80031f6:	682b      	ldr	r3, [r5, #0]
 80031f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80031fa:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80031fc:	681b      	ldr	r3, [r3, #0]
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80031fe:	6062      	str	r2, [r4, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003200:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003204:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003208:	0c19      	lsrs	r1, r3, #16
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800320a:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800320e:	f001 053f 	and.w	r5, r1, #63	; 0x3f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003212:	f001 0240 	and.w	r2, r1, #64	; 0x40
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003216:	60a0      	str	r0, [r4, #8]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003218:	f3c3 2006 	ubfx	r0, r3, #8, #7
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800321c:	b2db      	uxtb	r3, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800321e:	7025      	strb	r5, [r4, #0]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003220:	70e2      	strb	r2, [r4, #3]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003222:	7060      	strb	r0, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003224:	70a3      	strb	r3, [r4, #2]
  if(Format == RTC_FORMAT_BIN)
 8003226:	b9be      	cbnz	r6, 8003258 <HAL_RTC_GetTime+0x78>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003228:	0902      	lsrs	r2, r0, #4
 800322a:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 800322e:	092d      	lsrs	r5, r5, #4
 8003230:	091a      	lsrs	r2, r3, #4
 8003232:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003236:	f001 010f 	and.w	r1, r1, #15
 800323a:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800323e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800324a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800324e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003252:	7021      	strb	r1, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003254:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003256:	70a3      	strb	r3, [r4, #2]
}
 8003258:	2000      	movs	r0, #0
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	08003920 	.word	0x08003920

08003260 <HAL_RTC_SetDate>:
  assert_param(IS_RTC_FORMAT(Format));
 8003260:	2a01      	cmp	r2, #1
{
 8003262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003264:	4615      	mov	r5, r2
 8003266:	4604      	mov	r4, r0
 8003268:	460e      	mov	r6, r1
  assert_param(IS_RTC_FORMAT(Format));
 800326a:	d904      	bls.n	8003276 <HAL_RTC_SetDate+0x16>
 800326c:	f240 318a 	movw	r1, #906	; 0x38a
 8003270:	4888      	ldr	r0, [pc, #544]	; (8003494 <HAL_RTC_SetDate+0x234>)
 8003272:	f7fd fb6d 	bl	8000950 <assert_failed>
 __HAL_LOCK(hrtc);
 8003276:	7f23      	ldrb	r3, [r4, #28]
 8003278:	2b01      	cmp	r3, #1
 800327a:	f000 80e4 	beq.w	8003446 <HAL_RTC_SetDate+0x1e6>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800327e:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8003280:	2201      	movs	r2, #1
 8003282:	7722      	strb	r2, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003284:	7763      	strb	r3, [r4, #29]
 8003286:	7833      	ldrb	r3, [r6, #0]
 8003288:	3b01      	subs	r3, #1
 800328a:	b2db      	uxtb	r3, r3
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800328c:	2d00      	cmp	r5, #0
 800328e:	d058      	beq.n	8003342 <HAL_RTC_SetDate+0xe2>
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8003290:	2b06      	cmp	r3, #6
 8003292:	f200 80f4 	bhi.w	800347e <HAL_RTC_SetDate+0x21e>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8003296:	78f3      	ldrb	r3, [r6, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003298:	091a      	lsrs	r2, r3, #4
 800329a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b63      	cmp	r3, #99	; 0x63
 80032aa:	f200 80e2 	bhi.w	8003472 <HAL_RTC_SetDate+0x212>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80032ae:	7872      	ldrb	r2, [r6, #1]
  return (tmp + (Value & (uint8_t)0x0F));
 80032b0:	f002 030f 	and.w	r3, r2, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80032b4:	0912      	lsrs	r2, r2, #4
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80032b6:	3b01      	subs	r3, #1
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80032b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80032bc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b0b      	cmp	r3, #11
 80032c4:	d904      	bls.n	80032d0 <HAL_RTC_SetDate+0x70>
 80032c6:	f240 31a6 	movw	r1, #934	; 0x3a6
 80032ca:	4872      	ldr	r0, [pc, #456]	; (8003494 <HAL_RTC_SetDate+0x234>)
 80032cc:	f7fd fb40 	bl	8000950 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80032d0:	78b1      	ldrb	r1, [r6, #2]
  return (tmp + (Value & (uint8_t)0x0F));
 80032d2:	f001 030f 	and.w	r3, r1, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80032d6:	090a      	lsrs	r2, r1, #4
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80032d8:	3b01      	subs	r3, #1
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80032da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80032de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b1e      	cmp	r3, #30
 80032e6:	d905      	bls.n	80032f4 <HAL_RTC_SetDate+0x94>
 80032e8:	f240 31a7 	movw	r1, #935	; 0x3a7
 80032ec:	4869      	ldr	r0, [pc, #420]	; (8003494 <HAL_RTC_SetDate+0x234>)
 80032ee:	f7fd fb2f 	bl	8000950 <assert_failed>
 80032f2:	78b1      	ldrb	r1, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80032f4:	7870      	ldrb	r0, [r6, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80032f6:	78f2      	ldrb	r2, [r6, #3]
                  (((uint32_t)sDate->WeekDay) << 13U));
 80032f8:	7833      	ldrb	r3, [r6, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 80032fa:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80032fc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8003300:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8003304:	ea40 0601 	orr.w	r6, r0, r1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003308:	6822      	ldr	r2, [r4, #0]
 800330a:	21ca      	movs	r1, #202	; 0xca
 800330c:	2353      	movs	r3, #83	; 0x53
 800330e:	6251      	str	r1, [r2, #36]	; 0x24
 8003310:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003312:	68d3      	ldr	r3, [r2, #12]
 8003314:	0659      	lsls	r1, r3, #25
 8003316:	d55a      	bpl.n	80033ce <HAL_RTC_SetDate+0x16e>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003318:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
 800331c:	f026 06c0 	bic.w	r6, r6, #192	; 0xc0
 8003320:	6056      	str	r6, [r2, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003322:	68d3      	ldr	r3, [r2, #12]
 8003324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003328:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800332a:	6893      	ldr	r3, [r2, #8]
 800332c:	069b      	lsls	r3, r3, #26
 800332e:	f140 808c 	bpl.w	800344a <HAL_RTC_SetDate+0x1ea>
    __HAL_UNLOCK(hrtc);
 8003332:	2300      	movs	r3, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003334:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8003336:	2101      	movs	r1, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003338:	6250      	str	r0, [r2, #36]	; 0x24
    return HAL_OK;
 800333a:	4618      	mov	r0, r3
    hrtc->State = HAL_RTC_STATE_READY ;
 800333c:	7761      	strb	r1, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800333e:	7723      	strb	r3, [r4, #28]
}
 8003340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003342:	7872      	ldrb	r2, [r6, #1]
 8003344:	06d0      	lsls	r0, r2, #27
 8003346:	d55b      	bpl.n	8003400 <HAL_RTC_SetDate+0x1a0>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003348:	f022 0210 	bic.w	r2, r2, #16
 800334c:	320a      	adds	r2, #10
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800334e:	2b06      	cmp	r3, #6
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003350:	7072      	strb	r2, [r6, #1]
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8003352:	d857      	bhi.n	8003404 <HAL_RTC_SetDate+0x1a4>
    assert_param(IS_RTC_YEAR(sDate->Year));
 8003354:	78f3      	ldrb	r3, [r6, #3]
 8003356:	2b63      	cmp	r3, #99	; 0x63
 8003358:	d85c      	bhi.n	8003414 <HAL_RTC_SetDate+0x1b4>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800335a:	7873      	ldrb	r3, [r6, #1]
 800335c:	3b01      	subs	r3, #1
 800335e:	2b0b      	cmp	r3, #11
 8003360:	d861      	bhi.n	8003426 <HAL_RTC_SetDate+0x1c6>
    assert_param(IS_RTC_DATE(sDate->Date));
 8003362:	78b0      	ldrb	r0, [r6, #2]
 8003364:	1e43      	subs	r3, r0, #1
 8003366:	2b1e      	cmp	r3, #30
 8003368:	d866      	bhi.n	8003438 <HAL_RTC_SetDate+0x1d8>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800336a:	78f1      	ldrb	r1, [r6, #3]
  while(Value >= 10U)
 800336c:	2909      	cmp	r1, #9
 800336e:	f240 808e 	bls.w	800348e <HAL_RTC_SetDate+0x22e>
  uint32_t bcdhigh = 0U;
 8003372:	2300      	movs	r3, #0
    Value -= 10U;
 8003374:	390a      	subs	r1, #10
 8003376:	b2c9      	uxtb	r1, r1
  while(Value >= 10U)
 8003378:	2909      	cmp	r1, #9
    bcdhigh++;
 800337a:	f103 0301 	add.w	r3, r3, #1
  while(Value >= 10U)
 800337e:	d8f9      	bhi.n	8003374 <HAL_RTC_SetDate+0x114>
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	b2da      	uxtb	r2, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003384:	7873      	ldrb	r3, [r6, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003386:	4311      	orrs	r1, r2
  while(Value >= 10U)
 8003388:	2b09      	cmp	r3, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800338a:	ea4f 4101 	mov.w	r1, r1, lsl #16
  uint32_t bcdhigh = 0U;
 800338e:	f04f 0200 	mov.w	r2, #0
  while(Value >= 10U)
 8003392:	d907      	bls.n	80033a4 <HAL_RTC_SetDate+0x144>
    Value -= 10U;
 8003394:	3b0a      	subs	r3, #10
 8003396:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8003398:	2b09      	cmp	r3, #9
    bcdhigh++;
 800339a:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 800339e:	d8f9      	bhi.n	8003394 <HAL_RTC_SetDate+0x134>
 80033a0:	0112      	lsls	r2, r2, #4
 80033a2:	b2d2      	uxtb	r2, r2
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80033a4:	4313      	orrs	r3, r2
  while(Value >= 10U)
 80033a6:	2809      	cmp	r0, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80033a8:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 80033ac:	d96d      	bls.n	800348a <HAL_RTC_SetDate+0x22a>
    Value -= 10U;
 80033ae:	380a      	subs	r0, #10
 80033b0:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 80033b2:	2809      	cmp	r0, #9
    bcdhigh++;
 80033b4:	f105 0501 	add.w	r5, r5, #1
  while(Value >= 10U)
 80033b8:	d8f9      	bhi.n	80033ae <HAL_RTC_SetDate+0x14e>
 80033ba:	012d      	lsls	r5, r5, #4
 80033bc:	b2ed      	uxtb	r5, r5
                 ((uint32_t)sDate->WeekDay << 13U));
 80033be:	7836      	ldrb	r6, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80033c0:	ea41 3646 	orr.w	r6, r1, r6, lsl #13
 80033c4:	4333      	orrs	r3, r6
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80033c6:	4328      	orrs	r0, r5
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80033c8:	ea43 0600 	orr.w	r6, r3, r0
 80033cc:	e79c      	b.n	8003308 <HAL_RTC_SetDate+0xa8>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033d2:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80033d4:	f7fd fc16 	bl	8000c04 <HAL_GetTick>
 80033d8:	4607      	mov	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033da:	6822      	ldr	r2, [r4, #0]
 80033dc:	68d5      	ldr	r5, [r2, #12]
 80033de:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80033e2:	d199      	bne.n	8003318 <HAL_RTC_SetDate+0xb8>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80033e4:	f7fd fc0e 	bl	8000c04 <HAL_GetTick>
 80033e8:	1bc0      	subs	r0, r0, r7
 80033ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80033ee:	d9f4      	bls.n	80033da <HAL_RTC_SetDate+0x17a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033f0:	6822      	ldr	r2, [r4, #0]
 80033f2:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 80033f4:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033f6:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 80033f8:	2001      	movs	r0, #1
        __HAL_UNLOCK(hrtc);
 80033fa:	7725      	strb	r5, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80033fc:	7763      	strb	r3, [r4, #29]
}
 80033fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8003400:	2b06      	cmp	r3, #6
 8003402:	d9a7      	bls.n	8003354 <HAL_RTC_SetDate+0xf4>
 8003404:	f240 3196 	movw	r1, #918	; 0x396
 8003408:	4822      	ldr	r0, [pc, #136]	; (8003494 <HAL_RTC_SetDate+0x234>)
 800340a:	f7fd faa1 	bl	8000950 <assert_failed>
    assert_param(IS_RTC_YEAR(sDate->Year));
 800340e:	78f3      	ldrb	r3, [r6, #3]
 8003410:	2b63      	cmp	r3, #99	; 0x63
 8003412:	d9a2      	bls.n	800335a <HAL_RTC_SetDate+0xfa>
 8003414:	f240 319a 	movw	r1, #922	; 0x39a
 8003418:	481e      	ldr	r0, [pc, #120]	; (8003494 <HAL_RTC_SetDate+0x234>)
 800341a:	f7fd fa99 	bl	8000950 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800341e:	7873      	ldrb	r3, [r6, #1]
 8003420:	3b01      	subs	r3, #1
 8003422:	2b0b      	cmp	r3, #11
 8003424:	d99d      	bls.n	8003362 <HAL_RTC_SetDate+0x102>
 8003426:	481b      	ldr	r0, [pc, #108]	; (8003494 <HAL_RTC_SetDate+0x234>)
 8003428:	f240 319b 	movw	r1, #923	; 0x39b
 800342c:	f7fd fa90 	bl	8000950 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8003430:	78b0      	ldrb	r0, [r6, #2]
 8003432:	1e43      	subs	r3, r0, #1
 8003434:	2b1e      	cmp	r3, #30
 8003436:	d998      	bls.n	800336a <HAL_RTC_SetDate+0x10a>
 8003438:	4816      	ldr	r0, [pc, #88]	; (8003494 <HAL_RTC_SetDate+0x234>)
 800343a:	f44f 7167 	mov.w	r1, #924	; 0x39c
 800343e:	f7fd fa87 	bl	8000950 <assert_failed>
 8003442:	78b0      	ldrb	r0, [r6, #2]
 8003444:	e791      	b.n	800336a <HAL_RTC_SetDate+0x10a>
 __HAL_LOCK(hrtc);
 8003446:	2002      	movs	r0, #2
}
 8003448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800344a:	68d3      	ldr	r3, [r2, #12]
 800344c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003450:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8003452:	f7fd fbd7 	bl	8000c04 <HAL_GetTick>
 8003456:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003458:	6822      	ldr	r2, [r4, #0]
 800345a:	68d5      	ldr	r5, [r2, #12]
 800345c:	f015 0520 	ands.w	r5, r5, #32
 8003460:	f47f af67 	bne.w	8003332 <HAL_RTC_SetDate+0xd2>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003464:	f7fd fbce 	bl	8000c04 <HAL_GetTick>
 8003468:	1b80      	subs	r0, r0, r6
 800346a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800346e:	d9f3      	bls.n	8003458 <HAL_RTC_SetDate+0x1f8>
 8003470:	e7be      	b.n	80033f0 <HAL_RTC_SetDate+0x190>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8003472:	f240 31a5 	movw	r1, #933	; 0x3a5
 8003476:	4807      	ldr	r0, [pc, #28]	; (8003494 <HAL_RTC_SetDate+0x234>)
 8003478:	f7fd fa6a 	bl	8000950 <assert_failed>
 800347c:	e717      	b.n	80032ae <HAL_RTC_SetDate+0x4e>
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800347e:	f240 3196 	movw	r1, #918	; 0x396
 8003482:	4804      	ldr	r0, [pc, #16]	; (8003494 <HAL_RTC_SetDate+0x234>)
 8003484:	f7fd fa64 	bl	8000950 <assert_failed>
 8003488:	e705      	b.n	8003296 <HAL_RTC_SetDate+0x36>
  while(Value >= 10U)
 800348a:	2500      	movs	r5, #0
 800348c:	e797      	b.n	80033be <HAL_RTC_SetDate+0x15e>
 800348e:	2200      	movs	r2, #0
 8003490:	e778      	b.n	8003384 <HAL_RTC_SetDate+0x124>
 8003492:	bf00      	nop
 8003494:	08003920 	.word	0x08003920

08003498 <HAL_RTC_GetDate>:
  assert_param(IS_RTC_FORMAT(Format));
 8003498:	2a01      	cmp	r2, #1
{
 800349a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349c:	4617      	mov	r7, r2
 800349e:	4605      	mov	r5, r0
 80034a0:	460c      	mov	r4, r1
  assert_param(IS_RTC_FORMAT(Format));
 80034a2:	d904      	bls.n	80034ae <HAL_RTC_GetDate+0x16>
 80034a4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80034a8:	4817      	ldr	r0, [pc, #92]	; (8003508 <HAL_RTC_GetDate+0x70>)
 80034aa:	f7fd fa51 	bl	8000950 <assert_failed>
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80034ae:	682b      	ldr	r3, [r5, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80034ba:	f3c3 2507 	ubfx	r5, r3, #8, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80034be:	0c18      	lsrs	r0, r3, #16
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80034c0:	b2d9      	uxtb	r1, r3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80034c2:	f005 061f 	and.w	r6, r5, #31
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80034c6:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80034ca:	7066      	strb	r6, [r4, #1]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80034cc:	70e0      	strb	r0, [r4, #3]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80034ce:	70a1      	strb	r1, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80034d0:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 80034d2:	b9bf      	cbnz	r7, 8003504 <HAL_RTC_GetDate+0x6c>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80034d4:	0936      	lsrs	r6, r6, #4
 80034d6:	00b3      	lsls	r3, r6, #2
 80034d8:	0902      	lsrs	r2, r0, #4
 80034da:	441e      	add	r6, r3
 80034dc:	090b      	lsrs	r3, r1, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80034de:	f005 050f 	and.w	r5, r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80034e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80034e6:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80034ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80034ee:	f001 010f 	and.w	r1, r1, #15
 80034f2:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 80034f6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80034fa:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80034fe:	7065      	strb	r5, [r4, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003500:	70e0      	strb	r0, [r4, #3]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003502:	70a1      	strb	r1, [r4, #2]
}
 8003504:	2000      	movs	r0, #0
 8003506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003508:	08003920 	.word	0x08003920

0800350c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800350c:	2800      	cmp	r0, #0
 800350e:	f000 80c8 	beq.w	80036a2 <HAL_UART_Init+0x196>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003512:	6982      	ldr	r2, [r0, #24]
 8003514:	6803      	ldr	r3, [r0, #0]
{
 8003516:	b570      	push	{r4, r5, r6, lr}
 8003518:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800351a:	2a00      	cmp	r2, #0
 800351c:	f000 80ad 	beq.w	800367a <HAL_UART_Init+0x16e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003520:	498a      	ldr	r1, [pc, #552]	; (800374c <HAL_UART_Init+0x240>)
 8003522:	428b      	cmp	r3, r1
 8003524:	f000 8101 	beq.w	800372a <HAL_UART_Init+0x21e>
 8003528:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 800352c:	428b      	cmp	r3, r1
 800352e:	f000 80fc 	beq.w	800372a <HAL_UART_Init+0x21e>
 8003532:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 8003536:	428b      	cmp	r3, r1
 8003538:	f000 80f7 	beq.w	800372a <HAL_UART_Init+0x21e>
 800353c:	f240 114b 	movw	r1, #331	; 0x14b
 8003540:	4883      	ldr	r0, [pc, #524]	; (8003750 <HAL_UART_Init+0x244>)
 8003542:	f7fd fa05 	bl	8000950 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003546:	69a2      	ldr	r2, [r4, #24]
 8003548:	2a00      	cmp	r2, #0
 800354a:	f040 80ee 	bne.w	800372a <HAL_UART_Init+0x21e>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800354e:	68a3      	ldr	r3, [r4, #8]
 8003550:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8003554:	d004      	beq.n	8003560 <HAL_UART_Init+0x54>
 8003556:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800355a:	487d      	ldr	r0, [pc, #500]	; (8003750 <HAL_UART_Init+0x244>)
 800355c:	f7fd f9f8 	bl	8000950 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003560:	69e3      	ldr	r3, [r4, #28]
 8003562:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8003566:	d004      	beq.n	8003572 <HAL_UART_Init+0x66>
 8003568:	f240 1153 	movw	r1, #339	; 0x153
 800356c:	4878      	ldr	r0, [pc, #480]	; (8003750 <HAL_UART_Init+0x244>)
 800356e:	f7fd f9ef 	bl	8000950 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003572:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003576:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80c6 	beq.w	800370c <HAL_UART_Init+0x200>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003580:	2324      	movs	r3, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003582:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003584:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003588:	68d3      	ldr	r3, [r2, #12]
{
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800358a:	6860      	ldr	r0, [r4, #4]
 800358c:	4971      	ldr	r1, [pc, #452]	; (8003754 <HAL_UART_Init+0x248>)
  __HAL_UART_DISABLE(huart);
 800358e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003592:	4288      	cmp	r0, r1
  __HAL_UART_DISABLE(huart);
 8003594:	60d3      	str	r3, [r2, #12]
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003596:	f200 80b3 	bhi.w	8003700 <HAL_UART_Init+0x1f4>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800359a:	68e3      	ldr	r3, [r4, #12]
 800359c:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80035a0:	d004      	beq.n	80035ac <HAL_UART_Init+0xa0>
 80035a2:	f640 31fc 	movw	r1, #3068	; 0xbfc
 80035a6:	486a      	ldr	r0, [pc, #424]	; (8003750 <HAL_UART_Init+0x244>)
 80035a8:	f7fd f9d2 	bl	8000950 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80035ac:	6923      	ldr	r3, [r4, #16]
 80035ae:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80035b2:	d003      	beq.n	80035bc <HAL_UART_Init+0xb0>
 80035b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035b8:	f040 80ae 	bne.w	8003718 <HAL_UART_Init+0x20c>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80035bc:	6960      	ldr	r0, [r4, #20]
 80035be:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80035c2:	4218      	tst	r0, r3
 80035c4:	d100      	bne.n	80035c8 <HAL_UART_Init+0xbc>
 80035c6:	b928      	cbnz	r0, 80035d4 <HAL_UART_Init+0xc8>
 80035c8:	4861      	ldr	r0, [pc, #388]	; (8003750 <HAL_UART_Init+0x244>)
 80035ca:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80035ce:	f7fd f9bf 	bl	8000950 <assert_failed>
 80035d2:	6960      	ldr	r0, [r4, #20]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d4:	6822      	ldr	r2, [r4, #0]
 80035d6:	68e5      	ldr	r5, [r4, #12]
 80035d8:	6911      	ldr	r1, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035de:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80035e2:	4329      	orrs	r1, r5
 80035e4:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 80035e6:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035e8:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80035ea:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80035ee:	4333      	orrs	r3, r6
 80035f0:	f021 010c 	bic.w	r1, r1, #12
 80035f4:	432b      	orrs	r3, r5
 80035f6:	430b      	orrs	r3, r1
 80035f8:	4303      	orrs	r3, r0
 80035fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035fc:	6953      	ldr	r3, [r2, #20]
 80035fe:	69a1      	ldr	r1, [r4, #24]
 8003600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003604:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003606:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800360a:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800360c:	4b4f      	ldr	r3, [pc, #316]	; (800374c <HAL_UART_Init+0x240>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800360e:	d04a      	beq.n	80036a6 <HAL_UART_Init+0x19a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003610:	429a      	cmp	r2, r3
 8003612:	d072      	beq.n	80036fa <HAL_UART_Init+0x1ee>
 8003614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003618:	429a      	cmp	r2, r3
 800361a:	d06e      	beq.n	80036fa <HAL_UART_Init+0x1ee>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800361c:	f7ff fa90 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003620:	6863      	ldr	r3, [r4, #4]
 8003622:	4d4d      	ldr	r5, [pc, #308]	; (8003758 <HAL_UART_Init+0x24c>)
 8003624:	2219      	movs	r2, #25
 8003626:	fba0 0102 	umull	r0, r1, r0, r2
 800362a:	009a      	lsls	r2, r3, #2
 800362c:	0f9b      	lsrs	r3, r3, #30
 800362e:	f7fc fdd3 	bl	80001d8 <__aeabi_uldivmod>
 8003632:	fba5 2100 	umull	r2, r1, r5, r0
 8003636:	0949      	lsrs	r1, r1, #5
 8003638:	2264      	movs	r2, #100	; 0x64
 800363a:	fb02 0211 	mls	r2, r2, r1, r0
 800363e:	0112      	lsls	r2, r2, #4
 8003640:	3232      	adds	r2, #50	; 0x32
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	fba5 0202 	umull	r0, r2, r5, r2
 8003648:	0109      	lsls	r1, r1, #4
 800364a:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 800364e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003656:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800365e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003660:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003662:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003664:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8003666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800366a:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800366c:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366e:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003670:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003674:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8003678:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800367a:	4a34      	ldr	r2, [pc, #208]	; (800374c <HAL_UART_Init+0x240>)
 800367c:	4293      	cmp	r3, r2
 800367e:	f43f af66 	beq.w	800354e <HAL_UART_Init+0x42>
 8003682:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8003686:	4293      	cmp	r3, r2
 8003688:	f43f af61 	beq.w	800354e <HAL_UART_Init+0x42>
 800368c:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8003690:	4293      	cmp	r3, r2
 8003692:	f43f af5c 	beq.w	800354e <HAL_UART_Init+0x42>
 8003696:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800369a:	482d      	ldr	r0, [pc, #180]	; (8003750 <HAL_UART_Init+0x244>)
 800369c:	f7fd f958 	bl	8000950 <assert_failed>
 80036a0:	e755      	b.n	800354e <HAL_UART_Init+0x42>
    return HAL_ERROR;
 80036a2:	2001      	movs	r0, #1
}
 80036a4:	4770      	bx	lr
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d03c      	beq.n	8003724 <HAL_UART_Init+0x218>
 80036aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d038      	beq.n	8003724 <HAL_UART_Init+0x218>
      pclk = HAL_RCC_GetPCLK1Freq();
 80036b2:	f7ff fa45 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036b6:	6862      	ldr	r2, [r4, #4]
 80036b8:	2600      	movs	r6, #0
 80036ba:	1892      	adds	r2, r2, r2
 80036bc:	f04f 0119 	mov.w	r1, #25
 80036c0:	eb46 0306 	adc.w	r3, r6, r6
 80036c4:	fba0 0101 	umull	r0, r1, r0, r1
 80036c8:	f7fc fd86 	bl	80001d8 <__aeabi_uldivmod>
 80036cc:	4e22      	ldr	r6, [pc, #136]	; (8003758 <HAL_UART_Init+0x24c>)
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	fba6 2100 	umull	r2, r1, r6, r0
 80036d4:	094d      	lsrs	r5, r1, #5
 80036d6:	2264      	movs	r2, #100	; 0x64
 80036d8:	fb02 0215 	mls	r2, r2, r5, r0
 80036dc:	00d2      	lsls	r2, r2, #3
 80036de:	3232      	adds	r2, #50	; 0x32
 80036e0:	fba6 1202 	umull	r1, r2, r6, r2
 80036e4:	0952      	lsrs	r2, r2, #5
 80036e6:	f002 0107 	and.w	r1, r2, #7
 80036ea:	0052      	lsls	r2, r2, #1
 80036ec:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80036f0:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80036f4:	440a      	add	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	e7aa      	b.n	8003650 <HAL_UART_Init+0x144>
      pclk = HAL_RCC_GetPCLK2Freq();
 80036fa:	f7ff fa31 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 80036fe:	e78f      	b.n	8003620 <HAL_UART_Init+0x114>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003700:	f640 31fb 	movw	r1, #3067	; 0xbfb
 8003704:	4812      	ldr	r0, [pc, #72]	; (8003750 <HAL_UART_Init+0x244>)
 8003706:	f7fd f923 	bl	8000950 <assert_failed>
 800370a:	e746      	b.n	800359a <HAL_UART_Init+0x8e>
    huart->Lock = HAL_UNLOCKED;
 800370c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003710:	4620      	mov	r0, r4
 8003712:	f7fd f9cd 	bl	8000ab0 <HAL_UART_MspInit>
 8003716:	e733      	b.n	8003580 <HAL_UART_Init+0x74>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003718:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800371c:	480c      	ldr	r0, [pc, #48]	; (8003750 <HAL_UART_Init+0x244>)
 800371e:	f7fd f917 	bl	8000950 <assert_failed>
 8003722:	e74b      	b.n	80035bc <HAL_UART_Init+0xb0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003724:	f7ff fa1c 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 8003728:	e7c5      	b.n	80036b6 <HAL_UART_Init+0x1aa>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800372a:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 800372e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003732:	f43f af0c 	beq.w	800354e <HAL_UART_Init+0x42>
 8003736:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800373a:	f43f af08 	beq.w	800354e <HAL_UART_Init+0x42>
 800373e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003742:	4803      	ldr	r0, [pc, #12]	; (8003750 <HAL_UART_Init+0x244>)
 8003744:	f7fd f904 	bl	8000950 <assert_failed>
 8003748:	e701      	b.n	800354e <HAL_UART_Init+0x42>
 800374a:	bf00      	nop
 800374c:	40011000 	.word	0x40011000
 8003750:	08003958 	.word	0x08003958
 8003754:	00a037a0 	.word	0x00a037a0
 8003758:	51eb851f 	.word	0x51eb851f

0800375c <__libc_init_array>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	4e0d      	ldr	r6, [pc, #52]	; (8003794 <__libc_init_array+0x38>)
 8003760:	4c0d      	ldr	r4, [pc, #52]	; (8003798 <__libc_init_array+0x3c>)
 8003762:	1ba4      	subs	r4, r4, r6
 8003764:	10a4      	asrs	r4, r4, #2
 8003766:	2500      	movs	r5, #0
 8003768:	42a5      	cmp	r5, r4
 800376a:	d109      	bne.n	8003780 <__libc_init_array+0x24>
 800376c:	4e0b      	ldr	r6, [pc, #44]	; (800379c <__libc_init_array+0x40>)
 800376e:	4c0c      	ldr	r4, [pc, #48]	; (80037a0 <__libc_init_array+0x44>)
 8003770:	f000 f82c 	bl	80037cc <_init>
 8003774:	1ba4      	subs	r4, r4, r6
 8003776:	10a4      	asrs	r4, r4, #2
 8003778:	2500      	movs	r5, #0
 800377a:	42a5      	cmp	r5, r4
 800377c:	d105      	bne.n	800378a <__libc_init_array+0x2e>
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003784:	4798      	blx	r3
 8003786:	3501      	adds	r5, #1
 8003788:	e7ee      	b.n	8003768 <__libc_init_array+0xc>
 800378a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800378e:	4798      	blx	r3
 8003790:	3501      	adds	r5, #1
 8003792:	e7f2      	b.n	800377a <__libc_init_array+0x1e>
 8003794:	0800399c 	.word	0x0800399c
 8003798:	0800399c 	.word	0x0800399c
 800379c:	0800399c 	.word	0x0800399c
 80037a0:	080039a0 	.word	0x080039a0

080037a4 <memcpy>:
 80037a4:	b510      	push	{r4, lr}
 80037a6:	1e43      	subs	r3, r0, #1
 80037a8:	440a      	add	r2, r1
 80037aa:	4291      	cmp	r1, r2
 80037ac:	d100      	bne.n	80037b0 <memcpy+0xc>
 80037ae:	bd10      	pop	{r4, pc}
 80037b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037b8:	e7f7      	b.n	80037aa <memcpy+0x6>

080037ba <memset>:
 80037ba:	4402      	add	r2, r0
 80037bc:	4603      	mov	r3, r0
 80037be:	4293      	cmp	r3, r2
 80037c0:	d100      	bne.n	80037c4 <memset+0xa>
 80037c2:	4770      	bx	lr
 80037c4:	f803 1b01 	strb.w	r1, [r3], #1
 80037c8:	e7f9      	b.n	80037be <memset+0x4>
	...

080037cc <_init>:
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ce:	bf00      	nop
 80037d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d2:	bc08      	pop	{r3}
 80037d4:	469e      	mov	lr, r3
 80037d6:	4770      	bx	lr

080037d8 <_fini>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	bf00      	nop
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr
