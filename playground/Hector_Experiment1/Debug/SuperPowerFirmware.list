
SuperPowerFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005914  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c5c  08005c5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c5c  08005c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c64  08005c64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08005c78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08005c78  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9e7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f98  00000000  00000000  0002ca23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae8  00000000  00000000  0002e9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f8  00000000  00000000  0002f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015d0f  00000000  00000000  0002fea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b44e  00000000  00000000  00045baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c534  00000000  00000000  00050ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd531  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c04  00000000  00000000  000dd5ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005a94 	.word	0x08005a94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005a94 	.word	0x08005a94

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
 80004f2:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <MX_GPIO_Init+0xd0>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a2c      	ldr	r2, [pc, #176]	; (80005a8 <MX_GPIO_Init+0xd0>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a25      	ldr	r2, [pc, #148]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <MX_GPIO_Init+0xd0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_GPIO_Init+0xd0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <MX_GPIO_Init+0xd0>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2120      	movs	r1, #32
 8000562:	4812      	ldr	r0, [pc, #72]	; (80005ac <MX_GPIO_Init+0xd4>)
 8000564:	f001 f958 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <MX_GPIO_Init+0xd8>)
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <MX_GPIO_Init+0xdc>)
 800057e:	f000 fea3 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000582:	2320      	movs	r3, #32
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2300      	movs	r3, #0
 8000590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <MX_GPIO_Init+0xd4>)
 800059a:	f000 fe95 	bl	80012c8 <HAL_GPIO_Init>

}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40020000 	.word	0x40020000
 80005b0:	10210000 	.word	0x10210000
 80005b4:	40020800 	.word	0x40020800

080005b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_I2C1_Init+0x54>)
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <MX_I2C1_Init+0x58>)
 80005c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_I2C1_Init+0x54>)
 80005c4:	4a13      	ldr	r2, [pc, #76]	; (8000614 <MX_I2C1_Init+0x5c>)
 80005c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_I2C1_Init+0x54>)
 80005ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ce:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 40;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_I2C1_Init+0x54>)
 80005d2:	2228      	movs	r2, #40	; 0x28
 80005d4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_I2C1_Init+0x54>)
 80005d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_I2C1_Init+0x54>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 42;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_I2C1_Init+0x54>)
 80005e6:	222a      	movs	r2, #42	; 0x2a
 80005e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_I2C1_Init+0x54>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_I2C1_Init+0x54>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_I2C1_Init+0x54>)
 80005f8:	f001 f940 	bl	800187c <HAL_I2C_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000602:	f000 fae1 	bl	8000bc8 <Error_Handler>
  }

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000003c 	.word	0x2000003c
 8000610:	40005400 	.word	0x40005400
 8000614:	00061a80 	.word	0x00061a80

08000618 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <HAL_I2C_MspInit+0xa4>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d13b      	bne.n	80006b2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <HAL_I2C_MspInit+0xa8>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <HAL_I2C_MspInit+0xa8>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <HAL_I2C_MspInit+0xa8>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000656:	23c0      	movs	r3, #192	; 0xc0
 8000658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800065a:	2312      	movs	r3, #18
 800065c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065e:	2301      	movs	r3, #1
 8000660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000662:	2303      	movs	r3, #3
 8000664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000666:	2304      	movs	r3, #4
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4814      	ldr	r0, [pc, #80]	; (80006c4 <HAL_I2C_MspInit+0xac>)
 8000672:	f000 fe29 	bl	80012c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <HAL_I2C_MspInit+0xa8>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <HAL_I2C_MspInit+0xa8>)
 8000680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <HAL_I2C_MspInit+0xa8>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	201f      	movs	r0, #31
 8000698:	f000 fd96 	bl	80011c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800069c:	201f      	movs	r0, #31
 800069e:	f000 fdbf 	bl	8001220 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2020      	movs	r0, #32
 80006a8:	f000 fd8e 	bl	80011c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80006ac:	2020      	movs	r0, #32
 80006ae:	f000 fdb7 	bl	8001220 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	; 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40005400 	.word	0x40005400
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020400 	.word	0x40020400

080006c8 <getRegister>:
	uint8_t data[33];
}i2c_cmd;

i2c_cmd test;

char* getRegister(uint8_t reg){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	ds3231 rt;
	rt.seconds.seconds = 0;
 80006d2:	7bbb      	ldrb	r3, [r7, #14]
 80006d4:	f36f 0303 	bfc	r3, #0, #4
 80006d8:	73bb      	strb	r3, [r7, #14]
	char* ptr = NULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BCD);
 80006de:	2201      	movs	r2, #1
 80006e0:	4916      	ldr	r1, [pc, #88]	; (800073c <getRegister+0x74>)
 80006e2:	4817      	ldr	r0, [pc, #92]	; (8000740 <getRegister+0x78>)
 80006e4:	f004 faa2 	bl	8004c2c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BCD);
 80006e8:	2201      	movs	r2, #1
 80006ea:	4916      	ldr	r1, [pc, #88]	; (8000744 <getRegister+0x7c>)
 80006ec:	4814      	ldr	r0, [pc, #80]	; (8000740 <getRegister+0x78>)
 80006ee:	f004 fc39 	bl	8004f64 <HAL_RTC_GetDate>
	timebuffer[0] = time.Seconds;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <getRegister+0x74>)
 80006f4:	789a      	ldrb	r2, [r3, #2]
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <getRegister+0x80>)
 80006f8:	701a      	strb	r2, [r3, #0]
	timebuffer[1] = time.Minutes;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <getRegister+0x74>)
 80006fc:	785a      	ldrb	r2, [r3, #1]
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <getRegister+0x80>)
 8000700:	705a      	strb	r2, [r3, #1]
	timebuffer[2] = time.Hours;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <getRegister+0x74>)
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <getRegister+0x80>)
 8000708:	709a      	strb	r2, [r3, #2]
	timebuffer[3] = date.WeekDay;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <getRegister+0x7c>)
 800070c:	781a      	ldrb	r2, [r3, #0]
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <getRegister+0x80>)
 8000710:	70da      	strb	r2, [r3, #3]
	timebuffer[4] = date.Date;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <getRegister+0x7c>)
 8000714:	789a      	ldrb	r2, [r3, #2]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <getRegister+0x80>)
 8000718:	711a      	strb	r2, [r3, #4]
	timebuffer[5] = date.Month;
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <getRegister+0x7c>)
 800071c:	785a      	ldrb	r2, [r3, #1]
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <getRegister+0x80>)
 8000720:	715a      	strb	r2, [r3, #5]
	timebuffer[6] = date.Year;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <getRegister+0x7c>)
 8000724:	78da      	ldrb	r2, [r3, #3]
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <getRegister+0x80>)
 8000728:	719a      	strb	r2, [r3, #6]
		ptr = &timebuffer[(uint8_t)reg];
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <getRegister+0x80>)
 800072e:	4413      	add	r3, r2
 8000730:	61fb      	str	r3, [r7, #28]
	return ptr;
 8000732:	69fb      	ldr	r3, [r7, #28]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000e0 	.word	0x200000e0
 8000740:	200000f8 	.word	0x200000f8
 8000744:	200000f4 	.word	0x200000f4
 8000748:	20000028 	.word	0x20000028

0800074c <ds3231_cmd_decode>:

uint8_t ds3231_cmd_decode(i2c_cmd msg){
 800074c:	b084      	sub	sp, #16
 800074e:	b580      	push	{r7, lr}
 8000750:	b08c      	sub	sp, #48	; 0x30
 8000752:	af00      	add	r7, sp, #0
 8000754:	f107 0c38 	add.w	ip, r7, #56	; 0x38
 8000758:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	ds3231 data;
	uint8_t size = msg.cmd_size;
 800075c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	memcpy(data.arr, msg.data, size);
 8000764:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000768:	f107 013b 	add.w	r1, r7, #59	; 0x3b
 800076c:	463b      	mov	r3, r7
 800076e:	4618      	mov	r0, r3
 8000770:	f005 f97c 	bl	8005a6c <memcpy>
	uint8_t i = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	switch (msg.data[0]) {
 800077a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800077e:	2b06      	cmp	r3, #6
 8000780:	f200 80a8 	bhi.w	80008d4 <ds3231_cmd_decode+0x188>
 8000784:	a201      	add	r2, pc, #4	; (adr r2, 800078c <ds3231_cmd_decode+0x40>)
 8000786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078a:	bf00      	nop
 800078c:	080007a9 	.word	0x080007a9
 8000790:	080007d5 	.word	0x080007d5
 8000794:	080007fb 	.word	0x080007fb
 8000798:	08000821 	.word	0x08000821
 800079c:	08000847 	.word	0x08000847
 80007a0:	0800086d 	.word	0x0800086d
 80007a4:	08000893 	.word	0x08000893
	case DS3231_SECONDS:
		if(size-- > 0){
 80007a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f000 8081 	beq.w	80008ba <ds3231_cmd_decode+0x16e>
			time.SecondFraction = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
			time.Seconds = msg.data[i];
 80007bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007c4:	4413      	add	r3, r2
 80007c6:	78db      	ldrb	r3, [r3, #3]
 80007c8:	76bb      	strb	r3, [r7, #26]
			i++;
 80007ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007ce:	3301      	adds	r3, #1
 80007d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}else{
			break;
		}
	case DS3231_MINUTES:
		if(size-- > 0){
 80007d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d06d      	beq.n	80008be <ds3231_cmd_decode+0x172>
			time.Minutes = msg.data[i];
 80007e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007ea:	4413      	add	r3, r2
 80007ec:	78db      	ldrb	r3, [r3, #3]
 80007ee:	767b      	strb	r3, [r7, #25]
			i++;
 80007f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007f4:	3301      	adds	r3, #1
 80007f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}else{
			break;
		}
	case DS3231_HOURS:
		if(size-- > 0){
 80007fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007fe:	1e5a      	subs	r2, r3, #1
 8000800:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8000804:	2b00      	cmp	r3, #0
 8000806:	d05c      	beq.n	80008c2 <ds3231_cmd_decode+0x176>
			time.Hours = msg.data[i];
 8000808:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800080c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000810:	4413      	add	r3, r2
 8000812:	78db      	ldrb	r3, [r3, #3]
 8000814:	763b      	strb	r3, [r7, #24]
			i++;
 8000816:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800081a:	3301      	adds	r3, #1
 800081c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}else{
			break;
		}
	case DS3231_DAY:
		if(size-- > 0){
 8000820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800082a:	2b00      	cmp	r3, #0
 800082c:	d04b      	beq.n	80008c6 <ds3231_cmd_decode+0x17a>
			date.WeekDay = msg.data[i];
 800082e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000832:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000836:	4413      	add	r3, r2
 8000838:	78db      	ldrb	r3, [r3, #3]
 800083a:	753b      	strb	r3, [r7, #20]
			i++;
 800083c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000840:	3301      	adds	r3, #1
 8000842:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}else{
			break;
		}
	case DS3231_DATE:
		if(size-- > 0){
 8000846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8000850:	2b00      	cmp	r3, #0
 8000852:	d03a      	beq.n	80008ca <ds3231_cmd_decode+0x17e>
			date.Date= msg.data[i];
 8000854:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000858:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800085c:	4413      	add	r3, r2
 800085e:	78db      	ldrb	r3, [r3, #3]
 8000860:	75bb      	strb	r3, [r7, #22]
			i++;
 8000862:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000866:	3301      	adds	r3, #1
 8000868:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}else{
			break;
		}
	case DS3231_MONTH_CENTURY:
		if(size-- > 0){
 800086c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000870:	1e5a      	subs	r2, r3, #1
 8000872:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8000876:	2b00      	cmp	r3, #0
 8000878:	d029      	beq.n	80008ce <ds3231_cmd_decode+0x182>
			date.Month= msg.data[i];
 800087a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800087e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000882:	4413      	add	r3, r2
 8000884:	78db      	ldrb	r3, [r3, #3]
 8000886:	757b      	strb	r3, [r7, #21]
			i++;
 8000888:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800088c:	3301      	adds	r3, #1
 800088e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}else{
			break;
		}
	case DS3231_YEAR:
		if(size-- > 0){
 8000892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000896:	1e5a      	subs	r2, r3, #1
 8000898:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800089c:	2b00      	cmp	r3, #0
 800089e:	d018      	beq.n	80008d2 <ds3231_cmd_decode+0x186>
			date.Year= msg.data[i];
 80008a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80008a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80008a8:	4413      	add	r3, r2
 80008aa:	78db      	ldrb	r3, [r3, #3]
 80008ac:	75fb      	strb	r3, [r7, #23]
			i++;
 80008ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80008b2:	3301      	adds	r3, #1
 80008b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80008b8:	e00c      	b.n	80008d4 <ds3231_cmd_decode+0x188>
			break;
 80008ba:	bf00      	nop
 80008bc:	e00a      	b.n	80008d4 <ds3231_cmd_decode+0x188>
			break;
 80008be:	bf00      	nop
 80008c0:	e008      	b.n	80008d4 <ds3231_cmd_decode+0x188>
			break;
 80008c2:	bf00      	nop
 80008c4:	e006      	b.n	80008d4 <ds3231_cmd_decode+0x188>
			break;
 80008c6:	bf00      	nop
 80008c8:	e004      	b.n	80008d4 <ds3231_cmd_decode+0x188>
			break;
 80008ca:	bf00      	nop
 80008cc:	e002      	b.n	80008d4 <ds3231_cmd_decode+0x188>
			break;
 80008ce:	bf00      	nop
 80008d0:	e000      	b.n	80008d4 <ds3231_cmd_decode+0x188>
		}else{
			break;
 80008d2:	bf00      	nop
		}
	default:
		if(size < 0)
		return HAL_ERROR;
	}
	uint8_t status = HAL_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	status = HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD);
 80008da:	f107 0318 	add.w	r3, r7, #24
 80008de:	2201      	movs	r2, #1
 80008e0:	4619      	mov	r1, r3
 80008e2:	480c      	ldr	r0, [pc, #48]	; (8000914 <ds3231_cmd_decode+0x1c8>)
 80008e4:	f004 f836 	bl	8004954 <HAL_RTC_SetTime>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	status = HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BCD);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2201      	movs	r2, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <ds3231_cmd_decode+0x1c8>)
 80008f8:	f004 fa04 	bl	8004d04 <HAL_RTC_SetDate>
 80008fc:	4603      	mov	r3, r0
 80008fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	return status;
 8000902:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
}
 8000906:	4618      	mov	r0, r3
 8000908:	3730      	adds	r7, #48	; 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000910:	b004      	add	sp, #16
 8000912:	4770      	bx	lr
 8000914:	200000f8 	.word	0x200000f8

08000918 <HAL_I2C_AddrCallback>:
	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BCD);
}

uint8_t direction = 0;

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
 8000924:	4613      	mov	r3, r2
 8000926:	803b      	strh	r3, [r7, #0]
	UNUSED(hi2c);
	switch(TransferDirection){
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d013      	beq.n	8000956 <HAL_I2C_AddrCallback+0x3e>
 800092e:	2b01      	cmp	r3, #1
 8000930:	d000      	beq.n	8000934 <HAL_I2C_AddrCallback+0x1c>
		default:
			break;
		}
		break;
		default:
			break;
 8000932:	e046      	b.n	80009c2 <HAL_I2C_AddrCallback+0xaa>
		addr = AddrMatchCode;
 8000934:	4a25      	ldr	r2, [pc, #148]	; (80009cc <HAL_I2C_AddrCallback+0xb4>)
 8000936:	883b      	ldrh	r3, [r7, #0]
 8000938:	8013      	strh	r3, [r2, #0]
		test.addres = addr;
 800093a:	4b24      	ldr	r3, [pc, #144]	; (80009cc <HAL_I2C_AddrCallback+0xb4>)
 800093c:	881a      	ldrh	r2, [r3, #0]
 800093e:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <HAL_I2C_AddrCallback+0xb8>)
 8000940:	801a      	strh	r2, [r3, #0]
		direction = 0;
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <HAL_I2C_AddrCallback+0xbc>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, slaveReceiveBuffer, 35, I2C_FIRST_FRAME);
 8000948:	2301      	movs	r3, #1
 800094a:	2223      	movs	r2, #35	; 0x23
 800094c:	4922      	ldr	r1, [pc, #136]	; (80009d8 <HAL_I2C_AddrCallback+0xc0>)
 800094e:	4823      	ldr	r0, [pc, #140]	; (80009dc <HAL_I2C_AddrCallback+0xc4>)
 8000950:	f001 f9e6 	bl	8001d20 <HAL_I2C_Slave_Seq_Receive_IT>
		break;
 8000954:	e035      	b.n	80009c2 <HAL_I2C_AddrCallback+0xaa>
		direction = 1;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <HAL_I2C_AddrCallback+0xbc>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
		switch(AddrMatchCode >> 1){
 800095c:	883b      	ldrh	r3, [r7, #0]
 800095e:	085b      	lsrs	r3, r3, #1
 8000960:	b29b      	uxth	r3, r3
 8000962:	2b14      	cmp	r3, #20
 8000964:	d002      	beq.n	800096c <HAL_I2C_AddrCallback+0x54>
 8000966:	2b15      	cmp	r3, #21
 8000968:	d015      	beq.n	8000996 <HAL_I2C_AddrCallback+0x7e>
			break;
 800096a:	e029      	b.n	80009c0 <HAL_I2C_AddrCallback+0xa8>
			slaveTransmitBuffer = (uint8_t*)getRegister(slaveReceiveBuffer[0]);
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <HAL_I2C_AddrCallback+0xc0>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fea9 	bl	80006c8 <getRegister>
 8000976:	4602      	mov	r2, r0
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_I2C_AddrCallback+0xc8>)
 800097a:	601a      	str	r2, [r3, #0]
			sizeOfData = 20;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <HAL_I2C_AddrCallback+0xcc>)
 800097e:	2214      	movs	r2, #20
 8000980:	801a      	strh	r2, [r3, #0]
			HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, slaveTransmitBuffer, sizeOfData, I2C_LAST_FRAME);
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_I2C_AddrCallback+0xc8>)
 8000984:	6819      	ldr	r1, [r3, #0]
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <HAL_I2C_AddrCallback+0xcc>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	b29a      	uxth	r2, r3
 800098c:	2320      	movs	r3, #32
 800098e:	4813      	ldr	r0, [pc, #76]	; (80009dc <HAL_I2C_AddrCallback+0xc4>)
 8000990:	f001 f934 	bl	8001bfc <HAL_I2C_Slave_Seq_Transmit_IT>
			break;
 8000994:	e014      	b.n	80009c0 <HAL_I2C_AddrCallback+0xa8>
			slaveTransmitBuffer = (uint8_t*)getRegister(slaveReceiveBuffer[0]);
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_I2C_AddrCallback+0xc0>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fe94 	bl	80006c8 <getRegister>
 80009a0:	4602      	mov	r2, r0
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_I2C_AddrCallback+0xc8>)
 80009a4:	601a      	str	r2, [r3, #0]
			sizeOfData = 10;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_I2C_AddrCallback+0xcc>)
 80009a8:	220a      	movs	r2, #10
 80009aa:	801a      	strh	r2, [r3, #0]
			HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, slaveTransmitBuffer, sizeOfData, I2C_LAST_FRAME);
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_I2C_AddrCallback+0xc8>)
 80009ae:	6819      	ldr	r1, [r3, #0]
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_I2C_AddrCallback+0xcc>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	2320      	movs	r3, #32
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <HAL_I2C_AddrCallback+0xc4>)
 80009ba:	f001 f91f 	bl	8001bfc <HAL_I2C_Slave_Seq_Transmit_IT>
			break;
 80009be:	bf00      	nop
		break;
 80009c0:	bf00      	nop
	}
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000036 	.word	0x20000036
 80009d0:	20000098 	.word	0x20000098
 80009d4:	20000038 	.word	0x20000038
 80009d8:	200000bc 	.word	0x200000bc
 80009dc:	2000003c 	.word	0x2000003c
 80009e0:	20000090 	.word	0x20000090
 80009e4:	20000094 	.word	0x20000094

080009e8 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 80009e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009ec:	b088      	sub	sp, #32
 80009ee:	af06      	add	r7, sp, #24
 80009f0:	6078      	str	r0, [r7, #4]
	if(hi2c->XferCount == 35){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	2b23      	cmp	r3, #35	; 0x23
 80009fa:	d103      	bne.n	8000a04 <HAL_I2C_ListenCpltCallback+0x1c>
		test.cmd_size = 0;
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <HAL_I2C_ListenCpltCallback+0xa0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	709a      	strb	r2, [r3, #2]
 8000a02:	e00f      	b.n	8000a24 <HAL_I2C_ListenCpltCallback+0x3c>
	}else{
		test.cmd_size = (uint8_t)(35 - hi2c->XferCount);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <HAL_I2C_ListenCpltCallback+0xa0>)
 8000a14:	709a      	strb	r2, [r3, #2]
		memcpy(test.data, slaveReceiveBuffer, test.cmd_size);
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_I2C_ListenCpltCallback+0xa0>)
 8000a18:	789b      	ldrb	r3, [r3, #2]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	491b      	ldr	r1, [pc, #108]	; (8000a8c <HAL_I2C_ListenCpltCallback+0xa4>)
 8000a1e:	481c      	ldr	r0, [pc, #112]	; (8000a90 <HAL_I2C_ListenCpltCallback+0xa8>)
 8000a20:	f005 f824 	bl	8005a6c <memcpy>
	}
	memset(slaveReceiveBuffer, 0, 34);
 8000a24:	2222      	movs	r2, #34	; 0x22
 8000a26:	2100      	movs	r1, #0
 8000a28:	4818      	ldr	r0, [pc, #96]	; (8000a8c <HAL_I2C_ListenCpltCallback+0xa4>)
 8000a2a:	f005 f82a 	bl	8005a82 <memset>
	if(direction == 0){
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <HAL_I2C_ListenCpltCallback+0xac>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d11f      	bne.n	8000a76 <HAL_I2C_ListenCpltCallback+0x8e>
		//RTC_msg_decode(test);
		ds3231_cmd_decode(test);
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_I2C_ListenCpltCallback+0xa0>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	f04f 0800 	mov.w	r8, #0
 8000a3e:	4690      	mov	r8, r2
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	f04f 0e00 	mov.w	lr, #0
 8000a46:	4696      	mov	lr, r2
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	f04f 0c00 	mov.w	ip, #0
 8000a4e:	4694      	mov	ip, r2
 8000a50:	68da      	ldr	r2, [r3, #12]
 8000a52:	2600      	movs	r6, #0
 8000a54:	4616      	mov	r6, r2
 8000a56:	466c      	mov	r4, sp
 8000a58:	f103 0510 	add.w	r5, r3, #16
 8000a5c:	6828      	ldr	r0, [r5, #0]
 8000a5e:	6869      	ldr	r1, [r5, #4]
 8000a60:	68aa      	ldr	r2, [r5, #8]
 8000a62:	68eb      	ldr	r3, [r5, #12]
 8000a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a66:	6928      	ldr	r0, [r5, #16]
 8000a68:	6020      	str	r0, [r4, #0]
 8000a6a:	4640      	mov	r0, r8
 8000a6c:	4671      	mov	r1, lr
 8000a6e:	4662      	mov	r2, ip
 8000a70:	4633      	mov	r3, r6
 8000a72:	f7ff fe6b 	bl	800074c <ds3231_cmd_decode>
	}
	HAL_I2C_EnableListen_IT(&hi2c1); // Restart
 8000a76:	4808      	ldr	r0, [pc, #32]	; (8000a98 <HAL_I2C_ListenCpltCallback+0xb0>)
 8000a78:	f001 f9e4 	bl	8001e44 <HAL_I2C_EnableListen_IT>

}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a86:	bf00      	nop
 8000a88:	20000098 	.word	0x20000098
 8000a8c:	200000bc 	.word	0x200000bc
 8000a90:	2000009b 	.word	0x2000009b
 8000a94:	20000038 	.word	0x20000038
 8000a98:	2000003c 	.word	0x2000003c

08000a9c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
 int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000aa0:	f000 fa30 	bl	8000f04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000aa4:	f000 f80e 	bl	8000ac4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000aa8:	f7ff fd16 	bl	80004d8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000aac:	f7ff fd84 	bl	80005b8 <MX_I2C1_Init>
	MX_RTC_Init();
 8000ab0:	f000 f89c 	bl	8000bec <MX_RTC_Init>
	MX_USART2_UART_Init();
 8000ab4:	f000 f98a 	bl	8000dcc <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_I2C_EnableListen_IT(&hi2c1);
 8000ab8:	4801      	ldr	r0, [pc, #4]	; (8000ac0 <main+0x24>)
 8000aba:	f001 f9c3 	bl	8001e44 <HAL_I2C_EnableListen_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000abe:	e7fe      	b.n	8000abe <main+0x22>
 8000ac0:	2000003c 	.word	0x2000003c

08000ac4 <SystemClock_Config>:
 /**
  * @brief System Clock Configuration
  * @retval None
  */
 void SystemClock_Config(void)
 {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09a      	sub	sp, #104	; 0x68
 8000ac8:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ace:	2230      	movs	r2, #48	; 0x30
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 ffd5 	bl	8005a82 <memset>
	 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
	 RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
 8000af8:	615a      	str	r2, [r3, #20]

	 /** Configure the main internal regulator output voltage
	  */
	 __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <SystemClock_Config+0xfc>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a2f      	ldr	r2, [pc, #188]	; (8000bc0 <SystemClock_Config+0xfc>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <SystemClock_Config+0xfc>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
	 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <SystemClock_Config+0x100>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a29      	ldr	r2, [pc, #164]	; (8000bc4 <SystemClock_Config+0x100>)
 8000b20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <SystemClock_Config+0x100>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
	 /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000b32:	2306      	movs	r3, #6
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
	 RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b36:	2301      	movs	r3, #1
 8000b38:	643b      	str	r3, [r7, #64]	; 0x40
	 RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	647b      	str	r3, [r7, #68]	; 0x44
	 RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3e:	2310      	movs	r3, #16
 8000b40:	64bb      	str	r3, [r7, #72]	; 0x48
	 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	653b      	str	r3, [r7, #80]	; 0x50
	 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b46:	2300      	movs	r3, #0
 8000b48:	657b      	str	r3, [r7, #84]	; 0x54
	 RCC_OscInitStruct.PLL.PLLM = 8;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	65bb      	str	r3, [r7, #88]	; 0x58
	 RCC_OscInitStruct.PLL.PLLN = 100;
 8000b4e:	2364      	movs	r3, #100	; 0x64
 8000b50:	65fb      	str	r3, [r7, #92]	; 0x5c
	 RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	663b      	str	r3, [r7, #96]	; 0x60
	 RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b56:	2304      	movs	r3, #4
 8000b58:	667b      	str	r3, [r7, #100]	; 0x64
	 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 fe44 	bl	80037ec <HAL_RCC_OscConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xaa>
	 {
		 Error_Handler();
 8000b6a:	f000 f82d 	bl	8000bc8 <Error_Handler>
	 }
	 /** Initializes the CPU, AHB and APB buses clocks
	  */
	 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6e:	230f      	movs	r3, #15
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
			 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b72:	2302      	movs	r3, #2
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
	 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
	 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
	 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34

	 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	2103      	movs	r1, #3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f003 f94e 	bl	8003e2c <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xd6>
	 {
		 Error_Handler();
 8000b96:	f000 f817 	bl	8000bc8 <Error_Handler>
	 }
	 PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	60fb      	str	r3, [r7, #12]
	 PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba2:	61fb      	str	r3, [r7, #28]
	 if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 fbd9 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0xf4>
	 {
		 Error_Handler();
 8000bb4:	f000 f808 	bl	8000bc8 <Error_Handler>
	 }
 }
 8000bb8:	bf00      	nop
 8000bba:	3768      	adds	r7, #104	; 0x68
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <Error_Handler>:
 /**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
 void Error_Handler(void)
 {
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
	 /* USER CODE BEGIN Error_Handler_Debug */
	 /* User can add his own implementation to report the HAL error return state */

	 /* USER CODE END Error_Handler_Debug */
 }
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
 void assert_failed(uint8_t *file, uint32_t line)
 {
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
	 /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	 UNUSED(file);
	 UNUSED(line);
	 /* USER CODE END 6 */
 }
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c00:	2300      	movs	r3, #0
 8000c02:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <MX_RTC_Init+0xac>)
 8000c06:	4a25      	ldr	r2, [pc, #148]	; (8000c9c <MX_RTC_Init+0xb0>)
 8000c08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_RTC_Init+0xac>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_RTC_Init+0xac>)
 8000c12:	227f      	movs	r2, #127	; 0x7f
 8000c14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_RTC_Init+0xac>)
 8000c18:	22ff      	movs	r2, #255	; 0xff
 8000c1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_RTC_Init+0xac>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_RTC_Init+0xac>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_RTC_Init+0xac>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c2e:	481a      	ldr	r0, [pc, #104]	; (8000c98 <MX_RTC_Init+0xac>)
 8000c30:	f003 fdaa 	bl	8004788 <HAL_RTC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000c3a:	f7ff ffc5 	bl	8000bc8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2201      	movs	r2, #1
 8000c56:	4619      	mov	r1, r3
 8000c58:	480f      	ldr	r0, [pc, #60]	; (8000c98 <MX_RTC_Init+0xac>)
 8000c5a:	f003 fe7b 	bl	8004954 <HAL_RTC_SetTime>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000c64:	f7ff ffb0 	bl	8000bc8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <MX_RTC_Init+0xac>)
 8000c80:	f004 f840 	bl	8004d04 <HAL_RTC_SetDate>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000c8a:	f7ff ff9d 	bl	8000bc8 <Error_Handler>
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000f8 	.word	0x200000f8
 8000c9c:	40002800 	.word	0x40002800

08000ca0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <HAL_RTC_MspInit+0x24>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d102      	bne.n	8000cb8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_RTC_MspInit+0x28>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40002800 	.word	0x40002800
 8000cc8:	42470e3c 	.word	0x42470e3c

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f91a 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <I2C1_EV_IRQHandler+0x10>)
 8000d7e:	f001 f897 	bl	8001eb0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000003c 	.word	0x2000003c

08000d8c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <I2C1_ER_IRQHandler+0x10>)
 8000d92:	f001 f9fa 	bl	800218a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000003c 	.word	0x2000003c

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <SystemInit+0x28>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <SystemInit+0x28>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SystemInit+0x28>)
 8000db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dba:	609a      	str	r2, [r3, #8]
#endif
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <MX_USART2_UART_Init+0x50>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_USART2_UART_Init+0x4c>)
 8000e04:	f004 f99a 	bl	800513c <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e0e:	f7ff fedb 	bl	8000bc8 <Error_Handler>
  }

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000118 	.word	0x20000118
 8000e1c:	40004400 	.word	0x40004400

08000e20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d12b      	bne.n	8000e9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_UART_MspInit+0x8c>)
 8000e96:	f000 fa17 	bl	80012c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004400 	.word	0x40004400
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000

08000eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000eb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eb6:	e003      	b.n	8000ec0 <LoopCopyDataInit>

08000eb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ebc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ebe:	3104      	adds	r1, #4

08000ec0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ec4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ec6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ec8:	d3f6      	bcc.n	8000eb8 <CopyDataInit>
  ldr  r2, =_sbss
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ecc:	e002      	b.n	8000ed4 <LoopFillZerobss>

08000ece <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ece:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ed0:	f842 3b04 	str.w	r3, [r2], #4

08000ed4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ed6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ed8:	d3f9      	bcc.n	8000ece <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eda:	f7ff ff61 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ede:	f004 fda1 	bl	8005a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff fddb 	bl	8000a9c <main>
  bx  lr    
 8000ee6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ee8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000eec:	08005c6c 	.word	0x08005c6c
  ldr  r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ef4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000ef8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000efc:	2000015c 	.word	0x2000015c

08000f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f92b 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fec8 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f972 	bl	8001250 <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f84:	f000 f920 	bl	80011c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000158 	.word	0x20000158

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000158 	.word	0x20000158

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b07      	cmp	r3, #7
 8001194:	d00f      	beq.n	80011b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b06      	cmp	r3, #6
 800119a:	d00c      	beq.n	80011b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b05      	cmp	r3, #5
 80011a0:	d009      	beq.n	80011b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d006      	beq.n	80011b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d003      	beq.n	80011b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011ae:	2192      	movs	r1, #146	; 0x92
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80011b2:	f7ff fd10 	bl	8000bd6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff16 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	08005aac 	.word	0x08005aac

080011c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d903      	bls.n	80011e8 <HAL_NVIC_SetPriority+0x20>
 80011e0:	21aa      	movs	r1, #170	; 0xaa
 80011e2:	480e      	ldr	r0, [pc, #56]	; (800121c <HAL_NVIC_SetPriority+0x54>)
 80011e4:	f7ff fcf7 	bl	8000bd6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	d903      	bls.n	80011f6 <HAL_NVIC_SetPriority+0x2e>
 80011ee:	21ab      	movs	r1, #171	; 0xab
 80011f0:	480a      	ldr	r0, [pc, #40]	; (800121c <HAL_NVIC_SetPriority+0x54>)
 80011f2:	f7ff fcf0 	bl	8000bd6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f6:	f7ff ff1b 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	6978      	ldr	r0, [r7, #20]
 8001202:	f7ff ff6b 	bl	80010dc <NVIC_EncodePriority>
 8001206:	4602      	mov	r2, r0
 8001208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff3a 	bl	8001088 <__NVIC_SetPriority>
}
 8001214:	bf00      	nop
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	08005aac 	.word	0x08005aac

08001220 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	da03      	bge.n	800123a <HAL_NVIC_EnableIRQ+0x1a>
 8001232:	21be      	movs	r1, #190	; 0xbe
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <HAL_NVIC_EnableIRQ+0x2c>)
 8001236:	f7ff fcce 	bl	8000bd6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff04 	bl	800104c <__NVIC_EnableIRQ>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	08005aac 	.word	0x08005aac

08001250 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff73 	bl	8001144 <SysTick_Config>
 800125e:	4603      	mov	r3, r0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d004      	beq.n	8001286 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2280      	movs	r2, #128	; 0x80
 8001280:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00c      	b.n	80012a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2205      	movs	r2, #5
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ba:	b2db      	uxtb	r3, r3
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a3b      	ldr	r2, [pc, #236]	; (80013d0 <HAL_GPIO_Init+0x108>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d017      	beq.n	8001316 <HAL_GPIO_Init+0x4e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a3a      	ldr	r2, [pc, #232]	; (80013d4 <HAL_GPIO_Init+0x10c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x4e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a39      	ldr	r2, [pc, #228]	; (80013d8 <HAL_GPIO_Init+0x110>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00f      	beq.n	8001316 <HAL_GPIO_Init+0x4e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a38      	ldr	r2, [pc, #224]	; (80013dc <HAL_GPIO_Init+0x114>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00b      	beq.n	8001316 <HAL_GPIO_Init+0x4e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a37      	ldr	r2, [pc, #220]	; (80013e0 <HAL_GPIO_Init+0x118>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x4e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a36      	ldr	r2, [pc, #216]	; (80013e4 <HAL_GPIO_Init+0x11c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x4e>
 800130e:	21b3      	movs	r1, #179	; 0xb3
 8001310:	4835      	ldr	r0, [pc, #212]	; (80013e8 <HAL_GPIO_Init+0x120>)
 8001312:	f7ff fc60 	bl	8000bd6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_GPIO_Init+0x64>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	0c1b      	lsrs	r3, r3, #16
 8001326:	041b      	lsls	r3, r3, #16
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x6c>
 800132c:	21b4      	movs	r1, #180	; 0xb4
 800132e:	482e      	ldr	r0, [pc, #184]	; (80013e8 <HAL_GPIO_Init+0x120>)
 8001330:	f7ff fc51 	bl	8000bd6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d035      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d031      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b11      	cmp	r3, #17
 800134a:	d02d      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d029      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b12      	cmp	r3, #18
 800135a:	d025      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <HAL_GPIO_Init+0x124>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d020      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <HAL_GPIO_Init+0x128>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d01b      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <HAL_GPIO_Init+0x12c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d016      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <HAL_GPIO_Init+0x130>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d011      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <HAL_GPIO_Init+0x134>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00c      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_GPIO_Init+0x138>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d007      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0xe0>
 80013a0:	21b5      	movs	r1, #181	; 0xb5
 80013a2:	4811      	ldr	r0, [pc, #68]	; (80013e8 <HAL_GPIO_Init+0x120>)
 80013a4:	f7ff fc17 	bl	8000bd6 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00b      	beq.n	80013c8 <HAL_GPIO_Init+0x100>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d007      	beq.n	80013c8 <HAL_GPIO_Init+0x100>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x100>
 80013c0:	21b6      	movs	r1, #182	; 0xb6
 80013c2:	4809      	ldr	r0, [pc, #36]	; (80013e8 <HAL_GPIO_Init+0x120>)
 80013c4:	f7ff fc07 	bl	8000bd6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	e211      	b.n	80017f2 <HAL_GPIO_Init+0x52a>
 80013ce:	bf00      	nop
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40021c00 	.word	0x40021c00
 80013e8:	08005ae8 	.word	0x08005ae8
 80013ec:	10110000 	.word	0x10110000
 80013f0:	10210000 	.word	0x10210000
 80013f4:	10310000 	.word	0x10310000
 80013f8:	10120000 	.word	0x10120000
 80013fc:	10220000 	.word	0x10220000
 8001400:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	429a      	cmp	r2, r3
 800141e:	f040 81e5 	bne.w	80017ec <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d00b      	beq.n	8001442 <HAL_GPIO_Init+0x17a>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001436:	2b11      	cmp	r3, #17
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b12      	cmp	r3, #18
 8001440:	d144      	bne.n	80014cc <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00f      	beq.n	800146a <HAL_GPIO_Init+0x1a2>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d00b      	beq.n	800146a <HAL_GPIO_Init+0x1a2>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d007      	beq.n	800146a <HAL_GPIO_Init+0x1a2>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x1a2>
 8001462:	21c8      	movs	r1, #200	; 0xc8
 8001464:	489f      	ldr	r0, [pc, #636]	; (80016e4 <HAL_GPIO_Init+0x41c>)
 8001466:	f7ff fbb6 	bl	8000bd6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d004      	beq.n	800150e <HAL_GPIO_Init+0x246>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b12      	cmp	r3, #18
 800150a:	f040 80a0 	bne.w	800164e <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d077      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b09      	cmp	r3, #9
 800151c:	d073      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d06f      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d06b      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d067      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d063      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d05f      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d05b      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d057      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d053      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d04f      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b04      	cmp	r3, #4
 800156c:	d04b      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b04      	cmp	r3, #4
 8001574:	d047      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	2b04      	cmp	r3, #4
 800157c:	d043      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b05      	cmp	r3, #5
 8001584:	d03f      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	2b05      	cmp	r3, #5
 800158c:	d03b      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	2b05      	cmp	r3, #5
 8001594:	d037      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b06      	cmp	r3, #6
 800159c:	d033      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d02f      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d02b      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d027      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	2b07      	cmp	r3, #7
 80015bc:	d023      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b07      	cmp	r3, #7
 80015c4:	d01f      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b07      	cmp	r3, #7
 80015cc:	d01b      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d017      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b0a      	cmp	r3, #10
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	2b09      	cmp	r3, #9
 80015e4:	d00f      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2b09      	cmp	r3, #9
 80015ec:	d00b      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	2b0f      	cmp	r3, #15
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x33e>
 80015fe:	21e0      	movs	r1, #224	; 0xe0
 8001600:	4838      	ldr	r0, [pc, #224]	; (80016e4 <HAL_GPIO_Init+0x41c>)
 8001602:	f7ff fae8 	bl	8000bd6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	220f      	movs	r2, #15
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	08da      	lsrs	r2, r3, #3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3208      	adds	r2, #8
 8001648:	69b9      	ldr	r1, [r7, #24]
 800164a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0203 	and.w	r2, r3, #3
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 80ae 	beq.w	80017ec <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_GPIO_Init+0x420>)
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <HAL_GPIO_Init+0x420>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	6453      	str	r3, [r2, #68]	; 0x44
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_GPIO_Init+0x420>)
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ac:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <HAL_GPIO_Init+0x424>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	220f      	movs	r2, #15
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_GPIO_Init+0x428>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d025      	beq.n	8001724 <HAL_GPIO_Init+0x45c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <HAL_GPIO_Init+0x42c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d01f      	beq.n	8001720 <HAL_GPIO_Init+0x458>
 80016e0:	e00a      	b.n	80016f8 <HAL_GPIO_Init+0x430>
 80016e2:	bf00      	nop
 80016e4:	08005ae8 	.word	0x08005ae8
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40013800 	.word	0x40013800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020400 	.word	0x40020400
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a42      	ldr	r2, [pc, #264]	; (8001804 <HAL_GPIO_Init+0x53c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d00d      	beq.n	800171c <HAL_GPIO_Init+0x454>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a41      	ldr	r2, [pc, #260]	; (8001808 <HAL_GPIO_Init+0x540>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d007      	beq.n	8001718 <HAL_GPIO_Init+0x450>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a40      	ldr	r2, [pc, #256]	; (800180c <HAL_GPIO_Init+0x544>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d101      	bne.n	8001714 <HAL_GPIO_Init+0x44c>
 8001710:	2304      	movs	r3, #4
 8001712:	e008      	b.n	8001726 <HAL_GPIO_Init+0x45e>
 8001714:	2307      	movs	r3, #7
 8001716:	e006      	b.n	8001726 <HAL_GPIO_Init+0x45e>
 8001718:	2303      	movs	r3, #3
 800171a:	e004      	b.n	8001726 <HAL_GPIO_Init+0x45e>
 800171c:	2302      	movs	r3, #2
 800171e:	e002      	b.n	8001726 <HAL_GPIO_Init+0x45e>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_GPIO_Init+0x45e>
 8001724:	2300      	movs	r3, #0
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	4093      	lsls	r3, r2
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001736:	4936      	ldr	r1, [pc, #216]	; (8001810 <HAL_GPIO_Init+0x548>)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001744:	4b33      	ldr	r3, [pc, #204]	; (8001814 <HAL_GPIO_Init+0x54c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001768:	4a2a      	ldr	r2, [pc, #168]	; (8001814 <HAL_GPIO_Init+0x54c>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800176e:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_GPIO_Init+0x54c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001792:	4a20      	ldr	r2, [pc, #128]	; (8001814 <HAL_GPIO_Init+0x54c>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_GPIO_Init+0x54c>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017bc:	4a15      	ldr	r2, [pc, #84]	; (8001814 <HAL_GPIO_Init+0x54c>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_GPIO_Init+0x54c>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_GPIO_Init+0x54c>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	3301      	adds	r3, #1
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	f67f ae05 	bls.w	8001404 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 80017fa:	bf00      	nop
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40020800 	.word	0x40020800
 8001808:	40020c00 	.word	0x40020c00
 800180c:	40021000 	.word	0x40021000
 8001810:	40013800 	.word	0x40013800
 8001814:	40013c00 	.word	0x40013c00

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001828:	887b      	ldrh	r3, [r7, #2]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <HAL_GPIO_WritePin+0x20>
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <HAL_GPIO_WritePin+0x2a>
 8001838:	f240 119f 	movw	r1, #415	; 0x19f
 800183c:	480e      	ldr	r0, [pc, #56]	; (8001878 <HAL_GPIO_WritePin+0x60>)
 800183e:	f7ff f9ca 	bl	8000bd6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001842:	787b      	ldrb	r3, [r7, #1]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_WritePin+0x40>
 8001848:	787b      	ldrb	r3, [r7, #1]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d004      	beq.n	8001858 <HAL_GPIO_WritePin+0x40>
 800184e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001852:	4809      	ldr	r0, [pc, #36]	; (8001878 <HAL_GPIO_WritePin+0x60>)
 8001854:	f7ff f9bf 	bl	8000bd6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001864:	e003      	b.n	800186e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	041a      	lsls	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	619a      	str	r2, [r3, #24]
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	08005ae8 	.word	0x08005ae8

0800187c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e1b1      	b.n	8001bf2 <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4aa2      	ldr	r2, [pc, #648]	; (8001b1c <HAL_I2C_Init+0x2a0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00e      	beq.n	80018b6 <HAL_I2C_Init+0x3a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4aa0      	ldr	r2, [pc, #640]	; (8001b20 <HAL_I2C_Init+0x2a4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d009      	beq.n	80018b6 <HAL_I2C_Init+0x3a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a9f      	ldr	r2, [pc, #636]	; (8001b24 <HAL_I2C_Init+0x2a8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d004      	beq.n	80018b6 <HAL_I2C_Init+0x3a>
 80018ac:	f240 11bf 	movw	r1, #447	; 0x1bf
 80018b0:	489d      	ldr	r0, [pc, #628]	; (8001b28 <HAL_I2C_Init+0x2ac>)
 80018b2:	f7ff f990 	bl	8000bd6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d004      	beq.n	80018c8 <HAL_I2C_Init+0x4c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a9a      	ldr	r2, [pc, #616]	; (8001b2c <HAL_I2C_Init+0x2b0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d904      	bls.n	80018d2 <HAL_I2C_Init+0x56>
 80018c8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80018cc:	4896      	ldr	r0, [pc, #600]	; (8001b28 <HAL_I2C_Init+0x2ac>)
 80018ce:	f7ff f982 	bl	8000bd6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_I2C_Init+0x72>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018e2:	d004      	beq.n	80018ee <HAL_I2C_Init+0x72>
 80018e4:	f240 11c1 	movw	r1, #449	; 0x1c1
 80018e8:	488f      	ldr	r0, [pc, #572]	; (8001b28 <HAL_I2C_Init+0x2ac>)
 80018ea:	f7ff f974 	bl	8000bd6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <HAL_I2C_Init+0x8c>
 80018fe:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001902:	4889      	ldr	r0, [pc, #548]	; (8001b28 <HAL_I2C_Init+0x2ac>)
 8001904:	f7ff f967 	bl	8000bd6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001910:	d009      	beq.n	8001926 <HAL_I2C_Init+0xaa>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800191a:	d004      	beq.n	8001926 <HAL_I2C_Init+0xaa>
 800191c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001920:	4881      	ldr	r0, [pc, #516]	; (8001b28 <HAL_I2C_Init+0x2ac>)
 8001922:	f7ff f958 	bl	8000bd6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d008      	beq.n	8001940 <HAL_I2C_Init+0xc4>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d004      	beq.n	8001940 <HAL_I2C_Init+0xc4>
 8001936:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800193a:	487b      	ldr	r0, [pc, #492]	; (8001b28 <HAL_I2C_Init+0x2ac>)
 800193c:	f7ff f94b 	bl	8000bd6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <HAL_I2C_Init+0xda>
 800194c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001950:	4875      	ldr	r0, [pc, #468]	; (8001b28 <HAL_I2C_Init+0x2ac>)
 8001952:	f7ff f940 	bl	8000bd6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d008      	beq.n	8001970 <HAL_I2C_Init+0xf4>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	2b40      	cmp	r3, #64	; 0x40
 8001964:	d004      	beq.n	8001970 <HAL_I2C_Init+0xf4>
 8001966:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800196a:	486f      	ldr	r0, [pc, #444]	; (8001b28 <HAL_I2C_Init+0x2ac>)
 800196c:	f7ff f933 	bl	8000bd6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_I2C_Init+0x10e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	2b80      	cmp	r3, #128	; 0x80
 800197e:	d004      	beq.n	800198a <HAL_I2C_Init+0x10e>
 8001980:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001984:	4868      	ldr	r0, [pc, #416]	; (8001b28 <HAL_I2C_Init+0x2ac>)
 8001986:	f7ff f926 	bl	8000bd6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7fe fe3a 	bl	8000618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2224      	movs	r2, #36	; 0x24
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019dc:	f002 fc98 	bl	8004310 <HAL_RCC_GetPCLK1Freq>
 80019e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_I2C_Init+0x2b4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d807      	bhi.n	80019fc <HAL_I2C_Init+0x180>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a51      	ldr	r2, [pc, #324]	; (8001b34 <HAL_I2C_Init+0x2b8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	bf94      	ite	ls
 80019f4:	2301      	movls	r3, #1
 80019f6:	2300      	movhi	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	e006      	b.n	8001a0a <HAL_I2C_Init+0x18e>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4a4e      	ldr	r2, [pc, #312]	; (8001b38 <HAL_I2C_Init+0x2bc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	bf94      	ite	ls
 8001a04:	2301      	movls	r3, #1
 8001a06:	2300      	movhi	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0ef      	b.n	8001bf2 <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4a49      	ldr	r2, [pc, #292]	; (8001b3c <HAL_I2C_Init+0x2c0>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9b      	lsrs	r3, r3, #18
 8001a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a3b      	ldr	r2, [pc, #236]	; (8001b30 <HAL_I2C_Init+0x2b4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d802      	bhi.n	8001a4c <HAL_I2C_Init+0x1d0>
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	e009      	b.n	8001a60 <HAL_I2C_Init+0x1e4>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	4a3a      	ldr	r2, [pc, #232]	; (8001b40 <HAL_I2C_Init+0x2c4>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	3301      	adds	r3, #1
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	430b      	orrs	r3, r1
 8001a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	492d      	ldr	r1, [pc, #180]	; (8001b30 <HAL_I2C_Init+0x2b4>)
 8001a7c:	428b      	cmp	r3, r1
 8001a7e:	d80d      	bhi.n	8001a9c <HAL_I2C_Init+0x220>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1e59      	subs	r1, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	bf38      	it	cc
 8001a98:	2304      	movcc	r3, #4
 8001a9a:	e063      	b.n	8001b64 <HAL_I2C_Init+0x2e8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d111      	bne.n	8001ac8 <HAL_I2C_Init+0x24c>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1e58      	subs	r0, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	440b      	add	r3, r1
 8001ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	e012      	b.n	8001aee <HAL_I2C_Init+0x272>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1e58      	subs	r0, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	0099      	lsls	r1, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf0c      	ite	eq
 8001ae8:	2301      	moveq	r3, #1
 8001aea:	2300      	movne	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_I2C_Init+0x27a>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e036      	b.n	8001b64 <HAL_I2C_Init+0x2e8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d122      	bne.n	8001b44 <HAL_I2C_Init+0x2c8>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1e58      	subs	r0, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6859      	ldr	r1, [r3, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	440b      	add	r3, r1
 8001b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b1a:	e023      	b.n	8001b64 <HAL_I2C_Init+0x2e8>
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	40005800 	.word	0x40005800
 8001b24:	40005c00 	.word	0x40005c00
 8001b28:	08005b24 	.word	0x08005b24
 8001b2c:	00061a80 	.word	0x00061a80
 8001b30:	000186a0 	.word	0x000186a0
 8001b34:	001e847f 	.word	0x001e847f
 8001b38:	003d08ff 	.word	0x003d08ff
 8001b3c:	431bde83 	.word	0x431bde83
 8001b40:	10624dd3 	.word	0x10624dd3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1e58      	subs	r0, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	0099      	lsls	r1, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	6809      	ldr	r1, [r1, #0]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6911      	ldr	r1, [r2, #16]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68d2      	ldr	r2, [r2, #12]
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop

08001bfc <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d01b      	beq.n	8001c4a <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d018      	beq.n	8001c4a <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d015      	beq.n	8001c4a <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d012      	beq.n	8001c4a <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	d00f      	beq.n	8001c4a <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b10      	cmp	r3, #16
 8001c2e:	d00c      	beq.n	8001c4a <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001c36:	d008      	beq.n	8001c4a <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001c3e:	d004      	beq.n	8001c4a <HAL_I2C_Slave_Seq_Transmit_IT+0x4e>
 8001c40:	f640 71cd 	movw	r1, #4045	; 0xfcd
 8001c44:	4835      	ldr	r0, [pc, #212]	; (8001d1c <HAL_I2C_Slave_Seq_Transmit_IT+0x120>)
 8001c46:	f7fe ffc6 	bl	8000bd6 <assert_failed>

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001c56:	2b28      	cmp	r3, #40	; 0x28
 8001c58:	d15b      	bne.n	8001d12 <HAL_I2C_Slave_Seq_Transmit_IT+0x116>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_I2C_Slave_Seq_Transmit_IT+0x6a>
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_I2C_Slave_Seq_Transmit_IT+0x6e>
    {
      return  HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e054      	b.n	8001d14 <HAL_I2C_Slave_Seq_Transmit_IT+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_I2C_Slave_Seq_Transmit_IT+0x7c>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e04d      	b.n	8001d14 <HAL_I2C_Slave_Seq_Transmit_IT+0x118>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d007      	beq.n	8001c9e <HAL_I2C_Slave_Seq_Transmit_IT+0xa2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2229      	movs	r2, #41	; 0x29
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	88fa      	ldrh	r2, [r7, #6]
 8001cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001d0c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_I2C_Slave_Seq_Transmit_IT+0x118>
  }
  else
  {
    return HAL_BUSY;
 8001d12:	2302      	movs	r3, #2
  }
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	08005b24 	.word	0x08005b24

08001d20 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d01b      	beq.n	8001d6e <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d018      	beq.n	8001d6e <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d015      	beq.n	8001d6e <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d012      	beq.n	8001d6e <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d00f      	beq.n	8001d6e <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d00c      	beq.n	8001d6e <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001d5a:	d008      	beq.n	8001d6e <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d62:	d004      	beq.n	8001d6e <HAL_I2C_Slave_Seq_Receive_IT+0x4e>
 8001d64:	f241 01ac 	movw	r1, #4268	; 0x10ac
 8001d68:	4835      	ldr	r0, [pc, #212]	; (8001e40 <HAL_I2C_Slave_Seq_Receive_IT+0x120>)
 8001d6a:	f7fe ff34 	bl	8000bd6 <assert_failed>

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001d7a:	2b28      	cmp	r3, #40	; 0x28
 8001d7c:	d15b      	bne.n	8001e36 <HAL_I2C_Slave_Seq_Receive_IT+0x116>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_I2C_Slave_Seq_Receive_IT+0x6a>
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_I2C_Slave_Seq_Receive_IT+0x6e>
    {
      return  HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e054      	b.n	8001e38 <HAL_I2C_Slave_Seq_Receive_IT+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_I2C_Slave_Seq_Receive_IT+0x7c>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e04d      	b.n	8001e38 <HAL_I2C_Slave_Seq_Receive_IT+0x118>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d007      	beq.n	8001dc2 <HAL_I2C_Slave_Seq_Receive_IT+0xa2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	222a      	movs	r2, #42	; 0x2a
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	88fa      	ldrh	r2, [r7, #6]
 8001df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001e30:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_I2C_Slave_Seq_Receive_IT+0x118>
  }
  else
  {
    return HAL_BUSY;
 8001e36:	2302      	movs	r3, #2
  }
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	08005b24 	.word	0x08005b24

08001e44 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d124      	bne.n	8001ea2 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2228      	movs	r2, #40	; 0x28
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d007      	beq.n	8001e7e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0201 	orr.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e8c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001e9c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ed0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	d003      	beq.n	8001ee8 <HAL_I2C_EV_IRQHandler+0x38>
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	2b40      	cmp	r3, #64	; 0x40
 8001ee4:	f040 80bd 	bne.w	8002062 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10d      	bne.n	8001f1e <HAL_I2C_EV_IRQHandler+0x6e>
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001f08:	d003      	beq.n	8001f12 <HAL_I2C_EV_IRQHandler+0x62>
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_EV_IRQHandler+0x66>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_I2C_EV_IRQHandler+0x68>
 8001f16:	2300      	movs	r3, #0
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	f000 812e 	beq.w	800217a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00c      	beq.n	8001f42 <HAL_I2C_EV_IRQHandler+0x92>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	0a5b      	lsrs	r3, r3, #9
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f001 fc3d 	bl	80037b4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fd4a 	bl	80029d4 <I2C_Master_SB>
 8001f40:	e08e      	b.n	8002060 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_I2C_EV_IRQHandler+0xb2>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	0a5b      	lsrs	r3, r3, #9
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fdc0 	bl	8002ae0 <I2C_Master_ADD10>
 8001f60:	e07e      	b.n	8002060 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <HAL_I2C_EV_IRQHandler+0xd2>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	0a5b      	lsrs	r3, r3, #9
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fdda 	bl	8002b34 <I2C_Master_ADDR>
 8001f80:	e06e      	b.n	8002060 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d037      	beq.n	8001ffe <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f9c:	f000 80ef 	beq.w	800217e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	09db      	lsrs	r3, r3, #7
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00f      	beq.n	8001fcc <HAL_I2C_EV_IRQHandler+0x11c>
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	0a9b      	lsrs	r3, r3, #10
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <HAL_I2C_EV_IRQHandler+0x11c>
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d103      	bne.n	8001fcc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f9d7 	bl	8002378 <I2C_MasterTransmit_TXE>
 8001fca:	e049      	b.n	8002060 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80d2 	beq.w	800217e <HAL_I2C_EV_IRQHandler+0x2ce>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	0a5b      	lsrs	r3, r3, #9
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80cb 	beq.w	800217e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	d103      	bne.n	8001ff6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fa5e 	bl	80024b0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ff4:	e0c3      	b.n	800217e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fac2 	bl	8002580 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ffc:	e0bf      	b.n	800217e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800200c:	f000 80b7 	beq.w	800217e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	099b      	lsrs	r3, r3, #6
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00f      	beq.n	800203c <HAL_I2C_EV_IRQHandler+0x18c>
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	0a9b      	lsrs	r3, r3, #10
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <HAL_I2C_EV_IRQHandler+0x18c>
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d103      	bne.n	800203c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fb32 	bl	800269e <I2C_MasterReceive_RXNE>
 800203a:	e011      	b.n	8002060 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 809a 	beq.w	800217e <HAL_I2C_EV_IRQHandler+0x2ce>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	0a5b      	lsrs	r3, r3, #9
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8093 	beq.w	800217e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fbd1 	bl	8002800 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800205e:	e08e      	b.n	800217e <HAL_I2C_EV_IRQHandler+0x2ce>
 8002060:	e08d      	b.n	800217e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d004      	beq.n	8002074 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e007      	b.n	8002084 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d012      	beq.n	80020b6 <HAL_I2C_EV_IRQHandler+0x206>
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	0a5b      	lsrs	r3, r3, #9
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00c      	beq.n	80020b6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80020ac:	69b9      	ldr	r1, [r7, #24]
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 ff8f 	bl	8002fd2 <I2C_Slave_ADDR>
 80020b4:	e066      	b.n	8002184 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_I2C_EV_IRQHandler+0x226>
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	0a5b      	lsrs	r3, r3, #9
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 ffc4 	bl	800305c <I2C_Slave_STOPF>
 80020d4:	e056      	b.n	8002184 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020d6:	7bbb      	ldrb	r3, [r7, #14]
 80020d8:	2b21      	cmp	r3, #33	; 0x21
 80020da:	d002      	beq.n	80020e2 <HAL_I2C_EV_IRQHandler+0x232>
 80020dc:	7bbb      	ldrb	r3, [r7, #14]
 80020de:	2b29      	cmp	r3, #41	; 0x29
 80020e0:	d125      	bne.n	800212e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	09db      	lsrs	r3, r3, #7
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00f      	beq.n	800210e <HAL_I2C_EV_IRQHandler+0x25e>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	0a9b      	lsrs	r3, r3, #10
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_I2C_EV_IRQHandler+0x25e>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d103      	bne.n	800210e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fea5 	bl	8002e56 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800210c:	e039      	b.n	8002182 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d033      	beq.n	8002182 <HAL_I2C_EV_IRQHandler+0x2d2>
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	0a5b      	lsrs	r3, r3, #9
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d02d      	beq.n	8002182 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fed2 	bl	8002ed0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800212c:	e029      	b.n	8002182 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00f      	beq.n	800215a <HAL_I2C_EV_IRQHandler+0x2aa>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	0a9b      	lsrs	r3, r3, #10
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_I2C_EV_IRQHandler+0x2aa>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fedd 	bl	8002f12 <I2C_SlaveReceive_RXNE>
 8002158:	e014      	b.n	8002184 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00e      	beq.n	8002184 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	0a5b      	lsrs	r3, r3, #9
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d008      	beq.n	8002184 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 ff0b 	bl	8002f8e <I2C_SlaveReceive_BTF>
 8002178:	e004      	b.n	8002184 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800217a:	bf00      	nop
 800217c:	e002      	b.n	8002184 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800217e:	bf00      	nop
 8002180:	e000      	b.n	8002184 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002182:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b08a      	sub	sp, #40	; 0x28
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00e      	beq.n	80021d8 <HAL_I2C_ER_IRQHandler+0x4e>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021d6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	0a5b      	lsrs	r3, r3, #9
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00e      	beq.n	8002202 <HAL_I2C_ER_IRQHandler+0x78>
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002200:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	0a9b      	lsrs	r3, r3, #10
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d03f      	beq.n	800228e <HAL_I2C_ER_IRQHandler+0x104>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d039      	beq.n	800228e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800221a:	7efb      	ldrb	r3, [r7, #27]
 800221c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002222:	b29b      	uxth	r3, r3
 8002224:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002234:	7ebb      	ldrb	r3, [r7, #26]
 8002236:	2b20      	cmp	r3, #32
 8002238:	d112      	bne.n	8002260 <HAL_I2C_ER_IRQHandler+0xd6>
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10f      	bne.n	8002260 <HAL_I2C_ER_IRQHandler+0xd6>
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	2b21      	cmp	r3, #33	; 0x21
 8002244:	d008      	beq.n	8002258 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	2b29      	cmp	r3, #41	; 0x29
 800224a:	d005      	beq.n	8002258 <HAL_I2C_ER_IRQHandler+0xce>
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	2b28      	cmp	r3, #40	; 0x28
 8002250:	d106      	bne.n	8002260 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b21      	cmp	r3, #33	; 0x21
 8002256:	d103      	bne.n	8002260 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f001 f82f 	bl	80032bc <I2C_Slave_AF>
 800225e:	e016      	b.n	800228e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002268:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002272:	7efb      	ldrb	r3, [r7, #27]
 8002274:	2b10      	cmp	r3, #16
 8002276:	d002      	beq.n	800227e <HAL_I2C_ER_IRQHandler+0xf4>
 8002278:	7efb      	ldrb	r3, [r7, #27]
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	d107      	bne.n	800228e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	0adb      	lsrs	r3, r3, #11
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00e      	beq.n	80022b8 <HAL_I2C_ER_IRQHandler+0x12e>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	f043 0308 	orr.w	r3, r3, #8
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80022b6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f001 f866 	bl	800339c <I2C_ITError>
  }
}
 80022d0:	bf00      	nop
 80022d2:	3728      	adds	r7, #40	; 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002386:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800238e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	2b00      	cmp	r3, #0
 800239c:	d150      	bne.n	8002440 <I2C_MasterTransmit_TXE+0xc8>
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b21      	cmp	r3, #33	; 0x21
 80023a2:	d14d      	bne.n	8002440 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d01d      	beq.n	80023e6 <I2C_MasterTransmit_TXE+0x6e>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d01a      	beq.n	80023e6 <I2C_MasterTransmit_TXE+0x6e>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023b6:	d016      	beq.n	80023e6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023c6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2211      	movs	r2, #17
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ff7a 	bl	80022d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023e4:	e060      	b.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023f4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002404:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	d107      	bne.n	8002430 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff7d 	bl	8002328 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800242e:	e03b      	b.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff4d 	bl	80022d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800243e:	e033      	b.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b21      	cmp	r3, #33	; 0x21
 8002444:	d005      	beq.n	8002452 <I2C_MasterTransmit_TXE+0xda>
 8002446:	7bbb      	ldrb	r3, [r7, #14]
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d12d      	bne.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b22      	cmp	r3, #34	; 0x22
 8002450:	d12a      	bne.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d108      	bne.n	800246e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800246c:	e01c      	b.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	d103      	bne.n	8002482 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f880 	bl	8002580 <I2C_MemoryTransmit_TXE_BTF>
}
 8002480:	e012      	b.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024a6:	e7ff      	b.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b21      	cmp	r3, #33	; 0x21
 80024c8:	d156      	bne.n	8002578 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d012      	beq.n	80024fa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80024f8:	e03e      	b.n	8002578 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d01d      	beq.n	800253c <I2C_MasterTransmit_BTF+0x8c>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b20      	cmp	r3, #32
 8002504:	d01a      	beq.n	800253c <I2C_MasterTransmit_BTF+0x8c>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800250c:	d016      	beq.n	800253c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800251c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2211      	movs	r2, #17
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fecf 	bl	80022d8 <HAL_I2C_MasterTxCpltCallback>
}
 800253a:	e01d      	b.n	8002578 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800254a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff feb0 	bl	80022d8 <HAL_I2C_MasterTxCpltCallback>
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11d      	bne.n	80025d4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259c:	2b01      	cmp	r3, #1
 800259e:	d10b      	bne.n	80025b8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b0:	1c9a      	adds	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80025b6:	e06e      	b.n	8002696 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025bc:	b29b      	uxth	r3, r3
 80025be:	121b      	asrs	r3, r3, #8
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80025d2:	e060      	b.n	8002696 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d10b      	bne.n	80025f4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80025f2:	e050      	b.n	8002696 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d14c      	bne.n	8002696 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b22      	cmp	r3, #34	; 0x22
 8002600:	d108      	bne.n	8002614 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002610:	601a      	str	r2, [r3, #0]
}
 8002612:	e040      	b.n	8002696 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d015      	beq.n	800264a <I2C_MemoryTransmit_TXE_BTF+0xca>
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b21      	cmp	r3, #33	; 0x21
 8002622:	d112      	bne.n	800264a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002648:	e025      	b.n	8002696 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d120      	bne.n	8002696 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b21      	cmp	r3, #33	; 0x21
 8002658:	d11d      	bne.n	8002696 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002668:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002678:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff fe49 	bl	8002328 <HAL_I2C_MemTxCpltCallback>
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b22      	cmp	r3, #34	; 0x22
 80026b0:	f040 80a2 	bne.w	80027f8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d921      	bls.n	8002706 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	f040 8082 	bne.w	80027f8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002702:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002704:	e078      	b.n	80027f8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	2b02      	cmp	r3, #2
 800270c:	d074      	beq.n	80027f8 <I2C_MasterReceive_RXNE+0x15a>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d002      	beq.n	800271a <I2C_MasterReceive_RXNE+0x7c>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d16e      	bne.n	80027f8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f001 f818 	bl	8003750 <I2C_WaitOnSTOPRequestThroughIT>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d142      	bne.n	80027ac <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002734:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002744:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d10a      	bne.n	8002796 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff fdd4 	bl	800233c <HAL_I2C_MemRxCpltCallback>
}
 8002794:	e030      	b.n	80027f8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2212      	movs	r2, #18
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff fda1 	bl	80022ec <HAL_I2C_MasterRxCpltCallback>
}
 80027aa:	e025      	b.n	80027f8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2220      	movs	r2, #32
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff fdac 	bl	8002350 <HAL_I2C_ErrorCallback>
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b04      	cmp	r3, #4
 8002816:	d11b      	bne.n	8002850 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002826:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800284e:	e0bd      	b.n	80029cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b03      	cmp	r3, #3
 8002858:	d129      	bne.n	80028ae <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002868:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d00a      	beq.n	8002886 <I2C_MasterReceive_BTF+0x86>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d007      	beq.n	8002886 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002884:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028ac:	e08e      	b.n	80029cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d176      	bne.n	80029a6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d002      	beq.n	80028c4 <I2C_MasterReceive_BTF+0xc4>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b10      	cmp	r3, #16
 80028c2:	d108      	bne.n	80028d6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e019      	b.n	800290a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d002      	beq.n	80028e2 <I2C_MasterReceive_BTF+0xe2>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d108      	bne.n	80028f4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e00a      	b.n	800290a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	d007      	beq.n	800290a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002908:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002964:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d10a      	bne.n	8002990 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff fcd7 	bl	800233c <HAL_I2C_MemRxCpltCallback>
}
 800298e:	e01d      	b.n	80029cc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2212      	movs	r2, #18
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff fca4 	bl	80022ec <HAL_I2C_MasterRxCpltCallback>
}
 80029a4:	e012      	b.n	80029cc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d117      	bne.n	8002a18 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a00:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002a02:	e067      	b.n	8002ad4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	611a      	str	r2, [r3, #16]
}
 8002a16:	e05d      	b.n	8002ad4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a20:	d133      	bne.n	8002a8a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b21      	cmp	r3, #33	; 0x21
 8002a2c:	d109      	bne.n	8002a42 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a3e:	611a      	str	r2, [r3, #16]
 8002a40:	e008      	b.n	8002a54 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d004      	beq.n	8002a66 <I2C_Master_SB+0x92>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d108      	bne.n	8002a78 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d032      	beq.n	8002ad4 <I2C_Master_SB+0x100>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d02d      	beq.n	8002ad4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a86:	605a      	str	r2, [r3, #4]
}
 8002a88:	e024      	b.n	8002ad4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10e      	bne.n	8002ab0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	11db      	asrs	r3, r3, #7
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f003 0306 	and.w	r3, r3, #6
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f063 030f 	orn	r3, r3, #15
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	611a      	str	r2, [r3, #16]
}
 8002aae:	e011      	b.n	8002ad4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10d      	bne.n	8002ad4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	11db      	asrs	r3, r3, #7
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f003 0306 	and.w	r3, r3, #6
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f063 030e 	orn	r3, r3, #14
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	611a      	str	r2, [r3, #16]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d103      	bne.n	8002b04 <I2C_Master_ADD10+0x24>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d011      	beq.n	8002b28 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d104      	bne.n	8002b18 <I2C_Master_ADD10+0x38>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b26:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b091      	sub	sp, #68	; 0x44
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b22      	cmp	r3, #34	; 0x22
 8002b5c:	f040 8169 	bne.w	8002e32 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10f      	bne.n	8002b88 <I2C_Master_ADDR+0x54>
 8002b68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d10b      	bne.n	8002b88 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b70:	2300      	movs	r3, #0
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	633b      	str	r3, [r7, #48]	; 0x30
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	e160      	b.n	8002e4a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d11d      	bne.n	8002bcc <I2C_Master_ADDR+0x98>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b98:	d118      	bne.n	8002bcc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bbe:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	651a      	str	r2, [r3, #80]	; 0x50
 8002bca:	e13e      	b.n	8002e4a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d113      	bne.n	8002bfe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e115      	b.n	8002e2a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	f040 808a 	bne.w	8002d1e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c10:	d137      	bne.n	8002c82 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c20:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c30:	d113      	bne.n	8002c5a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c40:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	e0e7      	b.n	8002e2a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	623b      	str	r3, [r7, #32]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	623b      	str	r3, [r7, #32]
 8002c6e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e0d3      	b.n	8002e2a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d02e      	beq.n	8002ce6 <I2C_Master_ADDR+0x1b2>
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d02b      	beq.n	8002ce6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c90:	2b12      	cmp	r3, #18
 8002c92:	d102      	bne.n	8002c9a <I2C_Master_ADDR+0x166>
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d125      	bne.n	8002ce6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d00e      	beq.n	8002cbe <I2C_Master_ADDR+0x18a>
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d00b      	beq.n	8002cbe <I2C_Master_ADDR+0x18a>
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d008      	beq.n	8002cbe <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e007      	b.n	8002cce <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ccc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	e0a1      	b.n	8002e2a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e085      	b.n	8002e2a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d14d      	bne.n	8002dc4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d016      	beq.n	8002d5c <I2C_Master_ADDR+0x228>
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d013      	beq.n	8002d5c <I2C_Master_ADDR+0x228>
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d010      	beq.n	8002d5c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d48:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e007      	b.n	8002d6c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d6a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7a:	d117      	bne.n	8002dac <I2C_Master_ADDR+0x278>
 8002d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d82:	d00b      	beq.n	8002d9c <I2C_Master_ADDR+0x268>
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d008      	beq.n	8002d9c <I2C_Master_ADDR+0x268>
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d005      	beq.n	8002d9c <I2C_Master_ADDR+0x268>
 8002d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d002      	beq.n	8002d9c <I2C_Master_ADDR+0x268>
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d107      	bne.n	8002dac <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002daa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	e032      	b.n	8002e2a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dd2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de2:	d117      	bne.n	8002e14 <I2C_Master_ADDR+0x2e0>
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dea:	d00b      	beq.n	8002e04 <I2C_Master_ADDR+0x2d0>
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d008      	beq.n	8002e04 <I2C_Master_ADDR+0x2d0>
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d005      	beq.n	8002e04 <I2C_Master_ADDR+0x2d0>
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	d002      	beq.n	8002e04 <I2C_Master_ADDR+0x2d0>
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d107      	bne.n	8002e14 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002e30:	e00b      	b.n	8002e4a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	e7ff      	b.n	8002e4a <I2C_Master_ADDR+0x316>
 8002e4a:	bf00      	nop
 8002e4c:	3744      	adds	r7, #68	; 0x44
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d02b      	beq.n	8002ec8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d114      	bne.n	8002ec8 <I2C_SlaveTransmit_TXE+0x72>
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b29      	cmp	r3, #41	; 0x29
 8002ea2:	d111      	bne.n	8002ec8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2221      	movs	r2, #33	; 0x21
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2228      	movs	r2, #40	; 0x28
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fa1c 	bl	8002300 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ec8:	bf00      	nop
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d011      	beq.n	8002f06 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d02c      	beq.n	8002f86 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d114      	bne.n	8002f86 <I2C_SlaveReceive_RXNE+0x74>
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f60:	d111      	bne.n	8002f86 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2222      	movs	r2, #34	; 0x22
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2228      	movs	r2, #40	; 0x28
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff f9c7 	bl	8002314 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d012      	beq.n	8002fc6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fec:	2b28      	cmp	r3, #40	; 0x28
 8002fee:	d127      	bne.n	8003040 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	089b      	lsrs	r3, r3, #2
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	09db      	lsrs	r3, r3, #7
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d103      	bne.n	8003024 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	81bb      	strh	r3, [r7, #12]
 8003022:	e002      	b.n	800302a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003032:	89ba      	ldrh	r2, [r7, #12]
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fd fc6d 	bl	8000918 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800303e:	e008      	b.n	8003052 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0202 	mvn.w	r2, #2
 8003048:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800307a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800307c:	2300      	movs	r3, #0
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b8:	d172      	bne.n	80031a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	2b22      	cmp	r3, #34	; 0x22
 80030be:	d002      	beq.n	80030c6 <I2C_Slave_STOPF+0x6a>
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b2a      	cmp	r3, #42	; 0x2a
 80030c4:	d135      	bne.n	8003132 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f043 0204 	orr.w	r2, r3, #4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe f8d4 	bl	80012ac <HAL_DMA_GetState>
 8003104:	4603      	mov	r3, r0
 8003106:	2b01      	cmp	r3, #1
 8003108:	d049      	beq.n	800319e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	4a69      	ldr	r2, [pc, #420]	; (80032b4 <I2C_Slave_STOPF+0x258>)
 8003110:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe f8a6 	bl	8001268 <HAL_DMA_Abort_IT>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d03d      	beq.n	800319e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800312c:	4610      	mov	r0, r2
 800312e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003130:	e035      	b.n	800319e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003164:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe f89e 	bl	80012ac <HAL_DMA_GetState>
 8003170:	4603      	mov	r3, r0
 8003172:	2b01      	cmp	r3, #1
 8003174:	d014      	beq.n	80031a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	4a4e      	ldr	r2, [pc, #312]	; (80032b4 <I2C_Slave_STOPF+0x258>)
 800317c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe f870 	bl	8001268 <HAL_DMA_Abort_IT>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003198:	4610      	mov	r0, r2
 800319a:	4798      	blx	r3
 800319c:	e000      	b.n	80031a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800319e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d03e      	beq.n	8003228 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d112      	bne.n	80031de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d112      	bne.n	8003212 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f8b3 	bl	800339c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003236:	e039      	b.n	80032ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b2a      	cmp	r3, #42	; 0x2a
 800323c:	d109      	bne.n	8003252 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2228      	movs	r2, #40	; 0x28
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff f861 	bl	8002314 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b28      	cmp	r3, #40	; 0x28
 800325c:	d111      	bne.n	8003282 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <I2C_Slave_STOPF+0x25c>)
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd fbb4 	bl	80009e8 <HAL_I2C_ListenCpltCallback>
}
 8003280:	e014      	b.n	80032ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	2b22      	cmp	r3, #34	; 0x22
 8003288:	d002      	beq.n	8003290 <I2C_Slave_STOPF+0x234>
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b22      	cmp	r3, #34	; 0x22
 800328e:	d10d      	bne.n	80032ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff f834 	bl	8002314 <HAL_I2C_SlaveRxCpltCallback>
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	08003601 	.word	0x08003601
 80032b8:	ffff0000 	.word	0xffff0000

080032bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d002      	beq.n	80032de <I2C_Slave_AF+0x22>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d129      	bne.n	8003332 <I2C_Slave_AF+0x76>
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	2b28      	cmp	r3, #40	; 0x28
 80032e2:	d126      	bne.n	8003332 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a2c      	ldr	r2, [pc, #176]	; (8003398 <I2C_Slave_AF+0xdc>)
 80032e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003302:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003312:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd fb5c 	bl	80009e8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003330:	e02e      	b.n	8003390 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b21      	cmp	r3, #33	; 0x21
 8003336:	d126      	bne.n	8003386 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a17      	ldr	r2, [pc, #92]	; (8003398 <I2C_Slave_AF+0xdc>)
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2221      	movs	r2, #33	; 0x21
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003362:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800336c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe ffbe 	bl	8002300 <HAL_I2C_SlaveTxCpltCallback>
}
 8003384:	e004      	b.n	8003390 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800338e:	615a      	str	r2, [r3, #20]
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	ffff0000 	.word	0xffff0000

0800339c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033b4:	7bbb      	ldrb	r3, [r7, #14]
 80033b6:	2b10      	cmp	r3, #16
 80033b8:	d002      	beq.n	80033c0 <I2C_ITError+0x24>
 80033ba:	7bbb      	ldrb	r3, [r7, #14]
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d10a      	bne.n	80033d6 <I2C_ITError+0x3a>
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b22      	cmp	r3, #34	; 0x22
 80033c4:	d107      	bne.n	80033d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033dc:	2b28      	cmp	r3, #40	; 0x28
 80033de:	d107      	bne.n	80033f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2228      	movs	r2, #40	; 0x28
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80033ee:	e015      	b.n	800341c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033fe:	d00a      	beq.n	8003416 <I2C_ITError+0x7a>
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b60      	cmp	r3, #96	; 0x60
 8003404:	d007      	beq.n	8003416 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800342a:	d162      	bne.n	80034f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800343a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d020      	beq.n	800348c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344e:	4a6a      	ldr	r2, [pc, #424]	; (80035f8 <I2C_ITError+0x25c>)
 8003450:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd ff06 	bl	8001268 <HAL_DMA_Abort_IT>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 8089 	beq.w	8003576 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003486:	4610      	mov	r0, r2
 8003488:	4798      	blx	r3
 800348a:	e074      	b.n	8003576 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	4a59      	ldr	r2, [pc, #356]	; (80035f8 <I2C_ITError+0x25c>)
 8003492:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd fee5 	bl	8001268 <HAL_DMA_Abort_IT>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d068      	beq.n	8003576 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d10b      	bne.n	80034ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034ec:	4610      	mov	r0, r2
 80034ee:	4798      	blx	r3
 80034f0:	e041      	b.n	8003576 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b60      	cmp	r3, #96	; 0x60
 80034fc:	d125      	bne.n	800354a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d10b      	bne.n	8003532 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fe ff0e 	bl	8002364 <HAL_I2C_AbortCpltCallback>
 8003548:	e015      	b.n	8003576 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d10b      	bne.n	8003570 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fe feed 	bl	8002350 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10e      	bne.n	80035a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003596:	2b00      	cmp	r3, #0
 8003598:	d104      	bne.n	80035a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d113      	bne.n	80035f0 <I2C_ITError+0x254>
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b28      	cmp	r3, #40	; 0x28
 80035cc:	d110      	bne.n	80035f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <I2C_ITError+0x260>)
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd f9fc 	bl	80009e8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	08003601 	.word	0x08003601
 80035fc:	ffff0000 	.word	0xffff0000

08003600 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800361a:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <I2C_DMAAbort+0x148>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	08db      	lsrs	r3, r3, #3
 8003620:	4a4a      	ldr	r2, [pc, #296]	; (800374c <I2C_DMAAbort+0x14c>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0a1a      	lsrs	r2, r3, #8
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	00da      	lsls	r2, r3, #3
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f043 0220 	orr.w	r2, r3, #32
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003646:	e00a      	b.n	800365e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3b01      	subs	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d0ea      	beq.n	8003634 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366a:	2200      	movs	r2, #0
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	2200      	movs	r2, #0
 800367c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2200      	movs	r2, #0
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a0:	2200      	movs	r2, #0
 80036a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	2200      	movs	r2, #0
 80036b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b60      	cmp	r3, #96	; 0x60
 80036ce:	d10e      	bne.n	80036ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2200      	movs	r2, #0
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f7fe fe3c 	bl	8002364 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036ec:	e027      	b.n	800373e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036f4:	2b28      	cmp	r3, #40	; 0x28
 80036f6:	d117      	bne.n	8003728 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003716:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2228      	movs	r2, #40	; 0x28
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003726:	e007      	b.n	8003738 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003738:	6978      	ldr	r0, [r7, #20]
 800373a:	f7fe fe09 	bl	8002350 <HAL_I2C_ErrorCallback>
}
 800373e:	bf00      	nop
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000000 	.word	0x20000000
 800374c:	14f8b589 	.word	0x14f8b589

08003750 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800375c:	4b13      	ldr	r3, [pc, #76]	; (80037ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	08db      	lsrs	r3, r3, #3
 8003762:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	0a1a      	lsrs	r2, r3, #8
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	3b01      	subs	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e008      	b.n	80037a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379c:	d0e9      	beq.n	8003772 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	20000000 	.word	0x20000000
 80037b0:	14f8b589 	.word	0x14f8b589

080037b4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80037c4:	d103      	bne.n	80037ce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80037cc:	e007      	b.n	80037de <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80037d6:	d102      	bne.n	80037de <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2208      	movs	r2, #8
 80037dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e30d      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b0f      	cmp	r3, #15
 8003804:	d903      	bls.n	800380e <HAL_RCC_OscConfig+0x22>
 8003806:	21e8      	movs	r1, #232	; 0xe8
 8003808:	48a3      	ldr	r0, [pc, #652]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 800380a:	f7fd f9e4 	bl	8000bd6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8088 	beq.w	800392c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <HAL_RCC_OscConfig+0x54>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382c:	d008      	beq.n	8003840 <HAL_RCC_OscConfig+0x54>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003836:	d003      	beq.n	8003840 <HAL_RCC_OscConfig+0x54>
 8003838:	21ed      	movs	r1, #237	; 0xed
 800383a:	4897      	ldr	r0, [pc, #604]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	f7fd f9cb 	bl	8000bd6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003840:	4b96      	ldr	r3, [pc, #600]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b04      	cmp	r3, #4
 800384a:	d00c      	beq.n	8003866 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384c:	4b93      	ldr	r3, [pc, #588]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003854:	2b08      	cmp	r3, #8
 8003856:	d112      	bne.n	800387e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003858:	4b90      	ldr	r3, [pc, #576]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003864:	d10b      	bne.n	800387e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003866:	4b8d      	ldr	r3, [pc, #564]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d05b      	beq.n	800392a <HAL_RCC_OscConfig+0x13e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d157      	bne.n	800392a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e2cd      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0xaa>
 8003888:	4b84      	ldr	r3, [pc, #528]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a83      	ldr	r2, [pc, #524]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e01d      	b.n	80038d2 <HAL_RCC_OscConfig+0xe6>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389e:	d10c      	bne.n	80038ba <HAL_RCC_OscConfig+0xce>
 80038a0:	4b7e      	ldr	r3, [pc, #504]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a7d      	ldr	r2, [pc, #500]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80038a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b7b      	ldr	r3, [pc, #492]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a7a      	ldr	r2, [pc, #488]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80038b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	e00b      	b.n	80038d2 <HAL_RCC_OscConfig+0xe6>
 80038ba:	4b78      	ldr	r3, [pc, #480]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a77      	ldr	r2, [pc, #476]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80038c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b75      	ldr	r3, [pc, #468]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a74      	ldr	r2, [pc, #464]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80038cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d013      	beq.n	8003902 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038da:	f7fd fb79 	bl	8000fd0 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e2:	f7fd fb75 	bl	8000fd0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b64      	cmp	r3, #100	; 0x64
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e292      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f4:	4b69      	ldr	r3, [pc, #420]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0xf6>
 8003900:	e014      	b.n	800392c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7fd fb65 	bl	8000fd0 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800390a:	f7fd fb61 	bl	8000fd0 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b64      	cmp	r3, #100	; 0x64
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e27e      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391c:	4b5f      	ldr	r3, [pc, #380]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f0      	bne.n	800390a <HAL_RCC_OscConfig+0x11e>
 8003928:	e000      	b.n	800392c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d079      	beq.n	8003a2c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_OscConfig+0x166>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d004      	beq.n	8003952 <HAL_RCC_OscConfig+0x166>
 8003948:	f240 111f 	movw	r1, #287	; 0x11f
 800394c:	4852      	ldr	r0, [pc, #328]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 800394e:	f7fd f942 	bl	8000bd6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b1f      	cmp	r3, #31
 8003958:	d904      	bls.n	8003964 <HAL_RCC_OscConfig+0x178>
 800395a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800395e:	484e      	ldr	r0, [pc, #312]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	f7fd f939 	bl	8000bd6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003964:	4b4d      	ldr	r3, [pc, #308]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00b      	beq.n	8003988 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003970:	4b4a      	ldr	r3, [pc, #296]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003978:	2b08      	cmp	r3, #8
 800397a:	d11c      	bne.n	80039b6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800397c:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d116      	bne.n	80039b6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003988:	4b44      	ldr	r3, [pc, #272]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_OscConfig+0x1b4>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e23c      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a0:	4b3e      	ldr	r3, [pc, #248]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	493b      	ldr	r1, [pc, #236]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b4:	e03a      	b.n	8003a2c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d020      	beq.n	8003a00 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039be:	4b38      	ldr	r3, [pc, #224]	; (8003aa0 <HAL_RCC_OscConfig+0x2b4>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fd fb04 	bl	8000fd0 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fd fb00 	bl	8000fd0 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e21d      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ea:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4928      	ldr	r1, [pc, #160]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]
 80039fe:	e015      	b.n	8003a2c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a00:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <HAL_RCC_OscConfig+0x2b4>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fd fae3 	bl	8000fd0 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a0e:	f7fd fadf 	bl	8000fd0 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e1fc      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a20:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d046      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCC_OscConfig+0x266>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d004      	beq.n	8003a52 <HAL_RCC_OscConfig+0x266>
 8003a48:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003a4c:	4812      	ldr	r0, [pc, #72]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003a4e:	f7fd f8c2 	bl	8000bd6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d016      	beq.n	8003a88 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_RCC_OscConfig+0x2b8>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fd fab6 	bl	8000fd0 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a68:	f7fd fab2 	bl	8000fd0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e1cf      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x27c>
 8003a86:	e01e      	b.n	8003ac6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_RCC_OscConfig+0x2b8>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7fd fa9f 	bl	8000fd0 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	e011      	b.n	8003aba <HAL_RCC_OscConfig+0x2ce>
 8003a96:	bf00      	nop
 8003a98:	08005b5c 	.word	0x08005b5c
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	42470000 	.word	0x42470000
 8003aa4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa8:	f7fd fa92 	bl	8000fd0 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e1af      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aba:	4b97      	ldr	r3, [pc, #604]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80a8 	beq.w	8003c24 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00c      	beq.n	8003afa <HAL_RCC_OscConfig+0x30e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d008      	beq.n	8003afa <HAL_RCC_OscConfig+0x30e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b05      	cmp	r3, #5
 8003aee:	d004      	beq.n	8003afa <HAL_RCC_OscConfig+0x30e>
 8003af0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003af4:	4889      	ldr	r0, [pc, #548]	; (8003d1c <HAL_RCC_OscConfig+0x530>)
 8003af6:	f7fd f86e 	bl	8000bd6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afa:	4b87      	ldr	r3, [pc, #540]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10f      	bne.n	8003b26 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	4b83      	ldr	r3, [pc, #524]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	4a82      	ldr	r2, [pc, #520]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b14:	6413      	str	r3, [r2, #64]	; 0x40
 8003b16:	4b80      	ldr	r3, [pc, #512]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	4b7e      	ldr	r3, [pc, #504]	; (8003d20 <HAL_RCC_OscConfig+0x534>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d118      	bne.n	8003b64 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b32:	4b7b      	ldr	r3, [pc, #492]	; (8003d20 <HAL_RCC_OscConfig+0x534>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7a      	ldr	r2, [pc, #488]	; (8003d20 <HAL_RCC_OscConfig+0x534>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3e:	f7fd fa47 	bl	8000fd0 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7fd fa43 	bl	8000fd0 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e160      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	4b71      	ldr	r3, [pc, #452]	; (8003d20 <HAL_RCC_OscConfig+0x534>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x38e>
 8003b6c:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	4a69      	ldr	r2, [pc, #420]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
 8003b78:	e01c      	b.n	8003bb4 <HAL_RCC_OscConfig+0x3c8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b05      	cmp	r3, #5
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x3b0>
 8003b82:	4b65      	ldr	r3, [pc, #404]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	4a64      	ldr	r2, [pc, #400]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8e:	4b62      	ldr	r3, [pc, #392]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	4a61      	ldr	r2, [pc, #388]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCC_OscConfig+0x3c8>
 8003b9c:	4b5e      	ldr	r3, [pc, #376]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba0:	4a5d      	ldr	r2, [pc, #372]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba8:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bac:	4a5a      	ldr	r2, [pc, #360]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003bae:	f023 0304 	bic.w	r3, r3, #4
 8003bb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d015      	beq.n	8003be8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fd fa08 	bl	8000fd0 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc2:	e00a      	b.n	8003bda <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc4:	f7fd fa04 	bl	8000fd0 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e11f      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bda:	4b4f      	ldr	r3, [pc, #316]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0ee      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x3d8>
 8003be6:	e014      	b.n	8003c12 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be8:	f7fd f9f2 	bl	8000fd0 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf0:	f7fd f9ee 	bl	8000fd0 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e109      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c06:	4b44      	ldr	r3, [pc, #272]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1ee      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d105      	bne.n	8003c24 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c18:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	4a3e      	ldr	r2, [pc, #248]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00c      	beq.n	8003c46 <HAL_RCC_OscConfig+0x45a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d008      	beq.n	8003c46 <HAL_RCC_OscConfig+0x45a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d004      	beq.n	8003c46 <HAL_RCC_OscConfig+0x45a>
 8003c3c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003c40:	4836      	ldr	r0, [pc, #216]	; (8003d1c <HAL_RCC_OscConfig+0x530>)
 8003c42:	f7fc ffc8 	bl	8000bd6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80e4 	beq.w	8003e18 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c50:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_RCC_OscConfig+0x52c>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	f000 80ae 	beq.w	8003dba <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	f040 8092 	bne.w	8003d8c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <HAL_RCC_OscConfig+0x498>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c78:	d004      	beq.n	8003c84 <HAL_RCC_OscConfig+0x498>
 8003c7a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003c7e:	4827      	ldr	r0, [pc, #156]	; (8003d1c <HAL_RCC_OscConfig+0x530>)
 8003c80:	f7fc ffa9 	bl	8000bd6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	2b3f      	cmp	r3, #63	; 0x3f
 8003c8a:	d904      	bls.n	8003c96 <HAL_RCC_OscConfig+0x4aa>
 8003c8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003c90:	4822      	ldr	r0, [pc, #136]	; (8003d1c <HAL_RCC_OscConfig+0x530>)
 8003c92:	f7fc ffa0 	bl	8000bd6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	2bbf      	cmp	r3, #191	; 0xbf
 8003c9c:	d904      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x4bc>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003ca6:	d904      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x4c6>
 8003ca8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003cac:	481b      	ldr	r0, [pc, #108]	; (8003d1c <HAL_RCC_OscConfig+0x530>)
 8003cae:	f7fc ff92 	bl	8000bd6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d010      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4f0>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d00c      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4f0>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d008      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4f0>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d004      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4f0>
 8003cd2:	f240 11db 	movw	r1, #475	; 0x1db
 8003cd6:	4811      	ldr	r0, [pc, #68]	; (8003d1c <HAL_RCC_OscConfig+0x530>)
 8003cd8:	f7fc ff7d 	bl	8000bd6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d903      	bls.n	8003cec <HAL_RCC_OscConfig+0x500>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	2b0f      	cmp	r3, #15
 8003cea:	d904      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x50a>
 8003cec:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003cf0:	480a      	ldr	r0, [pc, #40]	; (8003d1c <HAL_RCC_OscConfig+0x530>)
 8003cf2:	f7fc ff70 	bl	8000bd6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_OscConfig+0x538>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfc:	f7fd f968 	bl	8000fd0 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d02:	e011      	b.n	8003d28 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fd f964 	bl	8000fd0 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d90a      	bls.n	8003d28 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e081      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	08005b5c 	.word	0x08005b5c
 8003d20:	40007000 	.word	0x40007000
 8003d24:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d28:	4b3e      	ldr	r3, [pc, #248]	; (8003e24 <HAL_RCC_OscConfig+0x638>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e7      	bne.n	8003d04 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	019b      	lsls	r3, r3, #6
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	041b      	lsls	r3, r3, #16
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	061b      	lsls	r3, r3, #24
 8003d58:	4932      	ldr	r1, [pc, #200]	; (8003e24 <HAL_RCC_OscConfig+0x638>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d5e:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <HAL_RCC_OscConfig+0x63c>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fd f934 	bl	8000fd0 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fd f930 	bl	8000fd0 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e04d      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7e:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <HAL_RCC_OscConfig+0x638>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x580>
 8003d8a:	e045      	b.n	8003e18 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8c:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <HAL_RCC_OscConfig+0x63c>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d92:	f7fd f91d 	bl	8000fd0 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fd f919 	bl	8000fd0 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e036      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCC_OscConfig+0x638>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f0      	bne.n	8003d9a <HAL_RCC_OscConfig+0x5ae>
 8003db8:	e02e      	b.n	8003e18 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e029      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dc6:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <HAL_RCC_OscConfig+0x638>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d11c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d115      	bne.n	8003e14 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dee:	4013      	ands	r3, r2
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d10d      	bne.n	8003e14 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d106      	bne.n	8003e14 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	42470060 	.word	0x42470060

08003e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e174      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x24>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b0f      	cmp	r3, #15
 8003e4e:	d904      	bls.n	8003e5a <HAL_RCC_ClockConfig+0x2e>
 8003e50:	f240 2151 	movw	r1, #593	; 0x251
 8003e54:	487b      	ldr	r0, [pc, #492]	; (8004044 <HAL_RCC_ClockConfig+0x218>)
 8003e56:	f7fc febe 	bl	8000bd6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d019      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d016      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d013      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d010      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d00d      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b06      	cmp	r3, #6
 8003e82:	d007      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b07      	cmp	r3, #7
 8003e88:	d004      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
 8003e8a:	f240 2152 	movw	r1, #594	; 0x252
 8003e8e:	486d      	ldr	r0, [pc, #436]	; (8004044 <HAL_RCC_ClockConfig+0x218>)
 8003e90:	f7fc fea1 	bl	8000bd6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e94:	4b6c      	ldr	r3, [pc, #432]	; (8004048 <HAL_RCC_ClockConfig+0x21c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d90c      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b69      	ldr	r3, [pc, #420]	; (8004048 <HAL_RCC_ClockConfig+0x21c>)
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b67      	ldr	r3, [pc, #412]	; (8004048 <HAL_RCC_ClockConfig+0x21c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e136      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d049      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed4:	4b5d      	ldr	r3, [pc, #372]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a5c      	ldr	r2, [pc, #368]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eec:	4b57      	ldr	r3, [pc, #348]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a56      	ldr	r2, [pc, #344]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d024      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d020      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b90      	cmp	r3, #144	; 0x90
 8003f0e:	d01c      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2ba0      	cmp	r3, #160	; 0xa0
 8003f16:	d018      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2bb0      	cmp	r3, #176	; 0xb0
 8003f1e:	d014      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2bc0      	cmp	r3, #192	; 0xc0
 8003f26:	d010      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2bd0      	cmp	r3, #208	; 0xd0
 8003f2e:	d00c      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2be0      	cmp	r3, #224	; 0xe0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2bf0      	cmp	r3, #240	; 0xf0
 8003f3e:	d004      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x11e>
 8003f40:	f240 2175 	movw	r1, #629	; 0x275
 8003f44:	483f      	ldr	r0, [pc, #252]	; (8004044 <HAL_RCC_ClockConfig+0x218>)
 8003f46:	f7fc fe46 	bl	8000bd6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4a:	4b40      	ldr	r3, [pc, #256]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	493d      	ldr	r1, [pc, #244]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d059      	beq.n	800401c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d010      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d00c      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d004      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
 8003f88:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8003f8c:	482d      	ldr	r0, [pc, #180]	; (8004044 <HAL_RCC_ClockConfig+0x218>)
 8003f8e:	f7fc fe22 	bl	8000bd6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d119      	bne.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e0bf      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	4b24      	ldr	r3, [pc, #144]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0af      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fca:	4b20      	ldr	r3, [pc, #128]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e0a7      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fda:	4b1c      	ldr	r3, [pc, #112]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4919      	ldr	r1, [pc, #100]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fec:	f7fc fff0 	bl	8000fd0 <HAL_GetTick>
 8003ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff4:	f7fc ffec 	bl	8000fd0 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e08f      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <HAL_RCC_ClockConfig+0x220>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 020c 	and.w	r2, r3, #12
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	429a      	cmp	r2, r3
 800401a:	d1eb      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <HAL_RCC_ClockConfig+0x21c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d212      	bcs.n	8004050 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b07      	ldr	r3, [pc, #28]	; (8004048 <HAL_RCC_ClockConfig+0x21c>)
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_ClockConfig+0x21c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d007      	beq.n	8004050 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e072      	b.n	800412a <HAL_RCC_ClockConfig+0x2fe>
 8004044:	08005b5c 	.word	0x08005b5c
 8004048:	40023c00 	.word	0x40023c00
 800404c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d025      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d018      	beq.n	8004096 <HAL_RCC_ClockConfig+0x26a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406c:	d013      	beq.n	8004096 <HAL_RCC_ClockConfig+0x26a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004076:	d00e      	beq.n	8004096 <HAL_RCC_ClockConfig+0x26a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004080:	d009      	beq.n	8004096 <HAL_RCC_ClockConfig+0x26a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800408a:	d004      	beq.n	8004096 <HAL_RCC_ClockConfig+0x26a>
 800408c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8004090:	4828      	ldr	r0, [pc, #160]	; (8004134 <HAL_RCC_ClockConfig+0x308>)
 8004092:	f7fc fda0 	bl	8000bd6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004096:	4b28      	ldr	r3, [pc, #160]	; (8004138 <HAL_RCC_ClockConfig+0x30c>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	4925      	ldr	r1, [pc, #148]	; (8004138 <HAL_RCC_ClockConfig+0x30c>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d026      	beq.n	8004102 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d018      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2c2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c4:	d013      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2c2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040ce:	d00e      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2c2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80040d8:	d009      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2c2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80040e2:	d004      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2c2>
 80040e4:	f240 21c1 	movw	r1, #705	; 0x2c1
 80040e8:	4812      	ldr	r0, [pc, #72]	; (8004134 <HAL_RCC_ClockConfig+0x308>)
 80040ea:	f7fc fd74 	bl	8000bd6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <HAL_RCC_ClockConfig+0x30c>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	490e      	ldr	r1, [pc, #56]	; (8004138 <HAL_RCC_ClockConfig+0x30c>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004102:	f000 f821 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8004106:	4601      	mov	r1, r0
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_RCC_ClockConfig+0x30c>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	4a0a      	ldr	r2, [pc, #40]	; (800413c <HAL_RCC_ClockConfig+0x310>)
 8004114:	5cd3      	ldrb	r3, [r2, r3]
 8004116:	fa21 f303 	lsr.w	r3, r1, r3
 800411a:	4a09      	ldr	r2, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x314>)
 800411c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_RCC_ClockConfig+0x318>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc ff10 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	08005b5c 	.word	0x08005b5c
 8004138:	40023800 	.word	0x40023800
 800413c:	08005c44 	.word	0x08005c44
 8004140:	20000000 	.word	0x20000000
 8004144:	20000004 	.word	0x20000004

08004148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	2300      	movs	r3, #0
 8004158:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800415e:	4b63      	ldr	r3, [pc, #396]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b04      	cmp	r3, #4
 8004168:	d007      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0x32>
 800416a:	2b08      	cmp	r3, #8
 800416c:	d008      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x38>
 800416e:	2b00      	cmp	r3, #0
 8004170:	f040 80b4 	bne.w	80042dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004174:	4b5e      	ldr	r3, [pc, #376]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004176:	60bb      	str	r3, [r7, #8]
       break;
 8004178:	e0b3      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800417a:	4b5e      	ldr	r3, [pc, #376]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800417c:	60bb      	str	r3, [r7, #8]
      break;
 800417e:	e0b0      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004180:	4b5a      	ldr	r3, [pc, #360]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004188:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800418a:	4b58      	ldr	r3, [pc, #352]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d04a      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004196:	4b55      	ldr	r3, [pc, #340]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	099b      	lsrs	r3, r3, #6
 800419c:	f04f 0400 	mov.w	r4, #0
 80041a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	ea03 0501 	and.w	r5, r3, r1
 80041ac:	ea04 0602 	and.w	r6, r4, r2
 80041b0:	4629      	mov	r1, r5
 80041b2:	4632      	mov	r2, r6
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	f04f 0400 	mov.w	r4, #0
 80041bc:	0154      	lsls	r4, r2, #5
 80041be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041c2:	014b      	lsls	r3, r1, #5
 80041c4:	4619      	mov	r1, r3
 80041c6:	4622      	mov	r2, r4
 80041c8:	1b49      	subs	r1, r1, r5
 80041ca:	eb62 0206 	sbc.w	r2, r2, r6
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	f04f 0400 	mov.w	r4, #0
 80041d6:	0194      	lsls	r4, r2, #6
 80041d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041dc:	018b      	lsls	r3, r1, #6
 80041de:	1a5b      	subs	r3, r3, r1
 80041e0:	eb64 0402 	sbc.w	r4, r4, r2
 80041e4:	f04f 0100 	mov.w	r1, #0
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	00e2      	lsls	r2, r4, #3
 80041ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041f2:	00d9      	lsls	r1, r3, #3
 80041f4:	460b      	mov	r3, r1
 80041f6:	4614      	mov	r4, r2
 80041f8:	195b      	adds	r3, r3, r5
 80041fa:	eb44 0406 	adc.w	r4, r4, r6
 80041fe:	f04f 0100 	mov.w	r1, #0
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	0262      	lsls	r2, r4, #9
 8004208:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800420c:	0259      	lsls	r1, r3, #9
 800420e:	460b      	mov	r3, r1
 8004210:	4614      	mov	r4, r2
 8004212:	4618      	mov	r0, r3
 8004214:	4621      	mov	r1, r4
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f04f 0400 	mov.w	r4, #0
 800421c:	461a      	mov	r2, r3
 800421e:	4623      	mov	r3, r4
 8004220:	f7fb ffda 	bl	80001d8 <__aeabi_uldivmod>
 8004224:	4603      	mov	r3, r0
 8004226:	460c      	mov	r4, r1
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e049      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422c:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	099b      	lsrs	r3, r3, #6
 8004232:	f04f 0400 	mov.w	r4, #0
 8004236:	f240 11ff 	movw	r1, #511	; 0x1ff
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	ea03 0501 	and.w	r5, r3, r1
 8004242:	ea04 0602 	and.w	r6, r4, r2
 8004246:	4629      	mov	r1, r5
 8004248:	4632      	mov	r2, r6
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	f04f 0400 	mov.w	r4, #0
 8004252:	0154      	lsls	r4, r2, #5
 8004254:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004258:	014b      	lsls	r3, r1, #5
 800425a:	4619      	mov	r1, r3
 800425c:	4622      	mov	r2, r4
 800425e:	1b49      	subs	r1, r1, r5
 8004260:	eb62 0206 	sbc.w	r2, r2, r6
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	f04f 0400 	mov.w	r4, #0
 800426c:	0194      	lsls	r4, r2, #6
 800426e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004272:	018b      	lsls	r3, r1, #6
 8004274:	1a5b      	subs	r3, r3, r1
 8004276:	eb64 0402 	sbc.w	r4, r4, r2
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	00e2      	lsls	r2, r4, #3
 8004284:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004288:	00d9      	lsls	r1, r3, #3
 800428a:	460b      	mov	r3, r1
 800428c:	4614      	mov	r4, r2
 800428e:	195b      	adds	r3, r3, r5
 8004290:	eb44 0406 	adc.w	r4, r4, r6
 8004294:	f04f 0100 	mov.w	r1, #0
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	02a2      	lsls	r2, r4, #10
 800429e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042a2:	0299      	lsls	r1, r3, #10
 80042a4:	460b      	mov	r3, r1
 80042a6:	4614      	mov	r4, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	4621      	mov	r1, r4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f04f 0400 	mov.w	r4, #0
 80042b2:	461a      	mov	r2, r3
 80042b4:	4623      	mov	r3, r4
 80042b6:	f7fb ff8f 	bl	80001d8 <__aeabi_uldivmod>
 80042ba:	4603      	mov	r3, r0
 80042bc:	460c      	mov	r4, r1
 80042be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	3301      	adds	r3, #1
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	60bb      	str	r3, [r7, #8]
      break;
 80042da:	e002      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042de:	60bb      	str	r3, [r7, #8]
      break;
 80042e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e2:	68bb      	ldr	r3, [r7, #8]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	00f42400 	.word	0x00f42400
 80042f4:	007a1200 	.word	0x007a1200

080042f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <HAL_RCC_GetHCLKFreq+0x14>)
 80042fe:	681b      	ldr	r3, [r3, #0]
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000000 	.word	0x20000000

08004310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004314:	f7ff fff0 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 8004318:	4601      	mov	r1, r0
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	0a9b      	lsrs	r3, r3, #10
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	4a03      	ldr	r2, [pc, #12]	; (8004334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004326:	5cd3      	ldrb	r3, [r2, r3]
 8004328:	fa21 f303 	lsr.w	r3, r1, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40023800 	.word	0x40023800
 8004334:	08005c54 	.word	0x08005c54

08004338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800433c:	f7ff ffdc 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 8004340:	4601      	mov	r1, r0
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	0b5b      	lsrs	r3, r3, #13
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	4a03      	ldr	r2, [pc, #12]	; (800435c <HAL_RCC_GetPCLK2Freq+0x24>)
 800434e:	5cd3      	ldrb	r3, [r2, r3]
 8004350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40023800 	.word	0x40023800
 800435c:	08005c54 	.word	0x08005c54

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b0f      	cmp	r3, #15
 800437e:	d904      	bls.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004380:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8004384:	489d      	ldr	r0, [pc, #628]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004386:	f7fc fc26 	bl	8000bd6 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d105      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d060      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d903      	bls.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2b07      	cmp	r3, #7
 80043b0:	d904      	bls.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80043b2:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 80043b6:	4891      	ldr	r0, [pc, #580]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80043b8:	f7fc fc0d 	bl	8000bd6 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2bbf      	cmp	r3, #191	; 0xbf
 80043c2:	d904      	bls.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80043cc:	d904      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80043ce:	f640 11e1 	movw	r1, #2529	; 0x9e1
 80043d2:	488a      	ldr	r0, [pc, #552]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80043d4:	f7fc fbff 	bl	8000bd6 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d903      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b3f      	cmp	r3, #63	; 0x3f
 80043e6:	d904      	bls.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
 80043e8:	f640 11e3 	movw	r1, #2531	; 0x9e3
 80043ec:	4883      	ldr	r0, [pc, #524]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80043ee:	f7fc fbf2 	bl	8000bd6 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043f2:	4b83      	ldr	r3, [pc, #524]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043f8:	f7fc fdea 	bl	8000fd0 <HAL_GetTick>
 80043fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004400:	f7fc fde6 	bl	8000fd0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e1ae      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004412:	4b7c      	ldr	r3, [pc, #496]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	019b      	lsls	r3, r3, #6
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	071b      	lsls	r3, r3, #28
 8004430:	4974      	ldr	r1, [pc, #464]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004438:	4b71      	ldr	r3, [pc, #452]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800443e:	f7fc fdc7 	bl	8000fd0 <HAL_GetTick>
 8004442:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004446:	f7fc fdc3 	bl	8000fd0 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e18b      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004458:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8174 	beq.w	800475a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800447a:	f000 80a6 	beq.w	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004486:	f000 80a0 	beq.w	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	4a5e      	ldr	r2, [pc, #376]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	f000 809a 	beq.w	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	4a5c      	ldr	r2, [pc, #368]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800449c:	4293      	cmp	r3, r2
 800449e:	f000 8094 	beq.w	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	4a5a      	ldr	r2, [pc, #360]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	f000 808e 	beq.w	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	4a58      	ldr	r2, [pc, #352]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	f000 8088 	beq.w	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	4a56      	ldr	r2, [pc, #344]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	f000 8082 	beq.w	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	4a54      	ldr	r2, [pc, #336]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d07c      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	4a52      	ldr	r2, [pc, #328]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d077      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	4a51      	ldr	r2, [pc, #324]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d072      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	4a4f      	ldr	r2, [pc, #316]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d06d      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	4a4e      	ldr	r2, [pc, #312]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d068      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	4a4c      	ldr	r2, [pc, #304]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d063      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	4a4b      	ldr	r2, [pc, #300]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d05e      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	4a49      	ldr	r2, [pc, #292]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d059      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	4a48      	ldr	r2, [pc, #288]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d054      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	4a46      	ldr	r2, [pc, #280]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d04f      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	4a45      	ldr	r2, [pc, #276]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d04a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	4a43      	ldr	r2, [pc, #268]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d045      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	4a42      	ldr	r2, [pc, #264]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d040      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	4a40      	ldr	r2, [pc, #256]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d03b      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	4a3f      	ldr	r2, [pc, #252]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d036      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	4a3d      	ldr	r2, [pc, #244]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d031      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	4a3c      	ldr	r2, [pc, #240]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d02c      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	4a3a      	ldr	r2, [pc, #232]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d027      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	4a39      	ldr	r2, [pc, #228]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d022      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	4a37      	ldr	r2, [pc, #220]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01d      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	4a36      	ldr	r2, [pc, #216]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d018      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	4a34      	ldr	r2, [pc, #208]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	4a33      	ldr	r2, [pc, #204]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	4a31      	ldr	r2, [pc, #196]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	4a30      	ldr	r2, [pc, #192]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80045c0:	f640 2112 	movw	r1, #2578	; 0xa12
 80045c4:	480d      	ldr	r0, [pc, #52]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80045c6:	f7fc fb06 	bl	8000bd6 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80045d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d8:	6413      	str	r3, [r2, #64]	; 0x40
 80045da:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045e6:	4b26      	ldr	r3, [pc, #152]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a25      	ldr	r2, [pc, #148]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045f2:	f7fc fced 	bl	8000fd0 <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045f8:	e04d      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80045fa:	bf00      	nop
 80045fc:	08005b94 	.word	0x08005b94
 8004600:	42470068 	.word	0x42470068
 8004604:	40023800 	.word	0x40023800
 8004608:	00020300 	.word	0x00020300
 800460c:	00030300 	.word	0x00030300
 8004610:	00040300 	.word	0x00040300
 8004614:	00050300 	.word	0x00050300
 8004618:	00060300 	.word	0x00060300
 800461c:	00070300 	.word	0x00070300
 8004620:	00080300 	.word	0x00080300
 8004624:	00090300 	.word	0x00090300
 8004628:	000a0300 	.word	0x000a0300
 800462c:	000b0300 	.word	0x000b0300
 8004630:	000c0300 	.word	0x000c0300
 8004634:	000d0300 	.word	0x000d0300
 8004638:	000e0300 	.word	0x000e0300
 800463c:	000f0300 	.word	0x000f0300
 8004640:	00100300 	.word	0x00100300
 8004644:	00110300 	.word	0x00110300
 8004648:	00120300 	.word	0x00120300
 800464c:	00130300 	.word	0x00130300
 8004650:	00140300 	.word	0x00140300
 8004654:	00150300 	.word	0x00150300
 8004658:	00160300 	.word	0x00160300
 800465c:	00170300 	.word	0x00170300
 8004660:	00180300 	.word	0x00180300
 8004664:	00190300 	.word	0x00190300
 8004668:	001a0300 	.word	0x001a0300
 800466c:	001b0300 	.word	0x001b0300
 8004670:	001c0300 	.word	0x001c0300
 8004674:	001d0300 	.word	0x001d0300
 8004678:	001e0300 	.word	0x001e0300
 800467c:	001f0300 	.word	0x001f0300
 8004680:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004684:	f7fc fca4 	bl	8000fd0 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e06c      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004696:	4b38      	ldr	r3, [pc, #224]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046a2:	4b36      	ldr	r3, [pc, #216]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046aa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d02f      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d028      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046c0:	4b2e      	ldr	r3, [pc, #184]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ca:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046d0:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046d6:	4a29      	ldr	r2, [pc, #164]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046dc:	4b27      	ldr	r3, [pc, #156]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d114      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046e8:	f7fc fc72 	bl	8000fd0 <HAL_GetTick>
 80046ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ee:	e00a      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f0:	f7fc fc6e 	bl	8000fd0 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e034      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004706:	4b1d      	ldr	r3, [pc, #116]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0ee      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471e:	d10d      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004720:	4b16      	ldr	r3, [pc, #88]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004734:	4911      	ldr	r1, [pc, #68]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
 800473a:	e005      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4a0e      	ldr	r2, [pc, #56]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004742:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004746:	6093      	str	r3, [r2, #8]
 8004748:	4b0c      	ldr	r3, [pc, #48]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800474a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004754:	4909      	ldr	r1, [pc, #36]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004756:	4313      	orrs	r3, r2
 8004758:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	7d1a      	ldrb	r2, [r3, #20]
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800476c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40007000 	.word	0x40007000
 800477c:	40023800 	.word	0x40023800
 8004780:	42470e40 	.word	0x42470e40
 8004784:	424711e0 	.word	0x424711e0

08004788 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e0d6      	b.n	8004948 <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b40      	cmp	r3, #64	; 0x40
 80047a0:	d007      	beq.n	80047b2 <HAL_RTC_Init+0x2a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_RTC_Init+0x2a>
 80047aa:	21ff      	movs	r1, #255	; 0xff
 80047ac:	4868      	ldr	r0, [pc, #416]	; (8004950 <HAL_RTC_Init+0x1c8>)
 80047ae:	f7fc fa12 	bl	8000bd6 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b7f      	cmp	r3, #127	; 0x7f
 80047b8:	d904      	bls.n	80047c4 <HAL_RTC_Init+0x3c>
 80047ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047be:	4864      	ldr	r0, [pc, #400]	; (8004950 <HAL_RTC_Init+0x1c8>)
 80047c0:	f7fc fa09 	bl	8000bd6 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047cc:	d304      	bcc.n	80047d8 <HAL_RTC_Init+0x50>
 80047ce:	f240 1101 	movw	r1, #257	; 0x101
 80047d2:	485f      	ldr	r0, [pc, #380]	; (8004950 <HAL_RTC_Init+0x1c8>)
 80047d4:	f7fc f9ff 	bl	8000bd6 <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d013      	beq.n	8004808 <HAL_RTC_Init+0x80>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047e8:	d00e      	beq.n	8004808 <HAL_RTC_Init+0x80>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f2:	d009      	beq.n	8004808 <HAL_RTC_Init+0x80>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047fc:	d004      	beq.n	8004808 <HAL_RTC_Init+0x80>
 80047fe:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004802:	4853      	ldr	r0, [pc, #332]	; (8004950 <HAL_RTC_Init+0x1c8>)
 8004804:	f7fc f9e7 	bl	8000bd6 <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <HAL_RTC_Init+0x9c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004818:	d004      	beq.n	8004824 <HAL_RTC_Init+0x9c>
 800481a:	f240 1103 	movw	r1, #259	; 0x103
 800481e:	484c      	ldr	r0, [pc, #304]	; (8004950 <HAL_RTC_Init+0x1c8>)
 8004820:	f7fc f9d9 	bl	8000bd6 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_RTC_Init+0xb8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004834:	d004      	beq.n	8004840 <HAL_RTC_Init+0xb8>
 8004836:	f44f 7182 	mov.w	r1, #260	; 0x104
 800483a:	4845      	ldr	r0, [pc, #276]	; (8004950 <HAL_RTC_Init+0x1c8>)
 800483c:	f7fc f9cb 	bl	8000bd6 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	7f5b      	ldrb	r3, [r3, #29]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7fc fa25 	bl	8000ca0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	22ca      	movs	r2, #202	; 0xca
 8004862:	625a      	str	r2, [r3, #36]	; 0x24
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2253      	movs	r2, #83	; 0x53
 800486a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fbfd 	bl	800506c <RTC_EnterInitMode>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	22ff      	movs	r2, #255	; 0xff
 800487e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2204      	movs	r2, #4
 8004884:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e05e      	b.n	8004948 <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800489c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6899      	ldr	r1, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68d2      	ldr	r2, [r2, #12]
 80048c4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6919      	ldr	r1, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	041a      	lsls	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10e      	bne.n	8004916 <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fb8f 	bl	800501c <HAL_RTC_WaitForSynchro>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	22ff      	movs	r2, #255	; 0xff
 800490a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2204      	movs	r2, #4
 8004910:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e018      	b.n	8004948 <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	22ff      	movs	r2, #255	; 0xff
 800493e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004946:	2300      	movs	r3, #0
  }
}
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	08005bd0 	.word	0x08005bd0

08004954 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004954:	b590      	push	{r4, r7, lr}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <HAL_RTC_SetTime+0x26>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d004      	beq.n	800497a <HAL_RTC_SetTime+0x26>
 8004970:	f240 21da 	movw	r1, #730	; 0x2da
 8004974:	48a4      	ldr	r0, [pc, #656]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 8004976:	f7fc f92e 	bl	8000bd6 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004982:	d00d      	beq.n	80049a0 <HAL_RTC_SetTime+0x4c>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498c:	d008      	beq.n	80049a0 <HAL_RTC_SetTime+0x4c>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d004      	beq.n	80049a0 <HAL_RTC_SetTime+0x4c>
 8004996:	f240 21db 	movw	r1, #731	; 0x2db
 800499a:	489b      	ldr	r0, [pc, #620]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 800499c:	f7fc f91b 	bl	8000bd6 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d009      	beq.n	80049bc <HAL_RTC_SetTime+0x68>
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049b0:	d004      	beq.n	80049bc <HAL_RTC_SetTime+0x68>
 80049b2:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 80049b6:	4894      	ldr	r0, [pc, #592]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 80049b8:	f7fc f90d 	bl	8000bd6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	7f1b      	ldrb	r3, [r3, #28]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_RTC_SetTime+0x74>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e12c      	b.n	8004c22 <HAL_RTC_SetTime+0x2ce>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2202      	movs	r2, #2
 80049d2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d15c      	bne.n	8004a94 <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01a      	beq.n	8004a1e <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_RTC_SetTime+0xa4>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b0c      	cmp	r3, #12
 80049f6:	d904      	bls.n	8004a02 <HAL_RTC_SetTime+0xae>
 80049f8:	f240 21e7 	movw	r1, #743	; 0x2e7
 80049fc:	4882      	ldr	r0, [pc, #520]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 80049fe:	f7fc f8ea 	bl	8000bd6 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	78db      	ldrb	r3, [r3, #3]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d015      	beq.n	8004a36 <HAL_RTC_SetTime+0xe2>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	78db      	ldrb	r3, [r3, #3]
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d011      	beq.n	8004a36 <HAL_RTC_SetTime+0xe2>
 8004a12:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 8004a16:	487c      	ldr	r0, [pc, #496]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 8004a18:	f7fc f8dd 	bl	8000bd6 <assert_failed>
 8004a1c:	e00b      	b.n	8004a36 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2200      	movs	r2, #0
 8004a22:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b17      	cmp	r3, #23
 8004a2a:	d904      	bls.n	8004a36 <HAL_RTC_SetTime+0xe2>
 8004a2c:	f240 21ed 	movw	r1, #749	; 0x2ed
 8004a30:	4875      	ldr	r0, [pc, #468]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 8004a32:	f7fc f8d0 	bl	8000bd6 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	785b      	ldrb	r3, [r3, #1]
 8004a3a:	2b3b      	cmp	r3, #59	; 0x3b
 8004a3c:	d904      	bls.n	8004a48 <HAL_RTC_SetTime+0xf4>
 8004a3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004a42:	4871      	ldr	r0, [pc, #452]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 8004a44:	f7fc f8c7 	bl	8000bd6 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	789b      	ldrb	r3, [r3, #2]
 8004a4c:	2b3b      	cmp	r3, #59	; 0x3b
 8004a4e:	d904      	bls.n	8004a5a <HAL_RTC_SetTime+0x106>
 8004a50:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8004a54:	486c      	ldr	r0, [pc, #432]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 8004a56:	f7fc f8be 	bl	8000bd6 <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fb30 	bl	80050c4 <RTC_ByteToBcd2>
 8004a64:	4603      	mov	r3, r0
 8004a66:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	785b      	ldrb	r3, [r3, #1]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fb29 	bl	80050c4 <RTC_ByteToBcd2>
 8004a72:	4603      	mov	r3, r0
 8004a74:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a76:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	789b      	ldrb	r3, [r3, #2]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fb21 	bl	80050c4 <RTC_ByteToBcd2>
 8004a82:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a84:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	78db      	ldrb	r3, [r3, #3]
 8004a8c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e062      	b.n	8004b5a <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d022      	beq.n	8004ae8 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fb2a 	bl	8005100 <RTC_Bcd2ToByte>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_RTC_SetTime+0x16e>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fb22 	bl	8005100 <RTC_Bcd2ToByte>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b0c      	cmp	r3, #12
 8004ac0:	d904      	bls.n	8004acc <HAL_RTC_SetTime+0x178>
 8004ac2:	f240 21fb 	movw	r1, #763	; 0x2fb
 8004ac6:	4850      	ldr	r0, [pc, #320]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 8004ac8:	f7fc f885 	bl	8000bd6 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	78db      	ldrb	r3, [r3, #3]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d019      	beq.n	8004b08 <HAL_RTC_SetTime+0x1b4>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	78db      	ldrb	r3, [r3, #3]
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d015      	beq.n	8004b08 <HAL_RTC_SetTime+0x1b4>
 8004adc:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8004ae0:	4849      	ldr	r0, [pc, #292]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 8004ae2:	f7fc f878 	bl	8000bd6 <assert_failed>
 8004ae6:	e00f      	b.n	8004b08 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2200      	movs	r2, #0
 8004aec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fb04 	bl	8005100 <RTC_Bcd2ToByte>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b17      	cmp	r3, #23
 8004afc:	d904      	bls.n	8004b08 <HAL_RTC_SetTime+0x1b4>
 8004afe:	f240 3101 	movw	r1, #769	; 0x301
 8004b02:	4841      	ldr	r0, [pc, #260]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 8004b04:	f7fc f867 	bl	8000bd6 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	785b      	ldrb	r3, [r3, #1]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 faf7 	bl	8005100 <RTC_Bcd2ToByte>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b3b      	cmp	r3, #59	; 0x3b
 8004b16:	d904      	bls.n	8004b22 <HAL_RTC_SetTime+0x1ce>
 8004b18:	f240 3103 	movw	r1, #771	; 0x303
 8004b1c:	483a      	ldr	r0, [pc, #232]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 8004b1e:	f7fc f85a 	bl	8000bd6 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	789b      	ldrb	r3, [r3, #2]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 faea 	bl	8005100 <RTC_Bcd2ToByte>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b3b      	cmp	r3, #59	; 0x3b
 8004b30:	d904      	bls.n	8004b3c <HAL_RTC_SetTime+0x1e8>
 8004b32:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004b36:	4834      	ldr	r0, [pc, #208]	; (8004c08 <HAL_RTC_SetTime+0x2b4>)
 8004b38:	f7fc f84d 	bl	8000bd6 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	785b      	ldrb	r3, [r3, #1]
 8004b46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004b48:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004b4e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	78db      	ldrb	r3, [r3, #3]
 8004b54:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	22ca      	movs	r2, #202	; 0xca
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2253      	movs	r2, #83	; 0x53
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fa7e 	bl	800506c <RTC_EnterInitMode>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	22ff      	movs	r2, #255	; 0xff
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2204      	movs	r2, #4
 8004b82:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e049      	b.n	8004c22 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004b98:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004b9c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6899      	ldr	r1, [r3, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bd4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d113      	bne.n	8004c0c <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fa19 	bl	800501c <HAL_RTC_WaitForSynchro>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00d      	beq.n	8004c0c <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	22ff      	movs	r2, #255	; 0xff
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e00c      	b.n	8004c22 <HAL_RTC_SetTime+0x2ce>
 8004c08:	08005bd0 	.word	0x08005bd0
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	22ff      	movs	r2, #255	; 0xff
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004c20:	2300      	movs	r3, #0
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd90      	pop	{r4, r7, pc}
 8004c2a:	bf00      	nop

08004c2c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <HAL_RTC_GetTime+0x26>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d004      	beq.n	8004c52 <HAL_RTC_GetTime+0x26>
 8004c48:	f240 315d 	movw	r1, #861	; 0x35d
 8004c4c:	482c      	ldr	r0, [pc, #176]	; (8004d00 <HAL_RTC_GetTime+0xd4>)
 8004c4e:	f7fb ffc2 	bl	8000bd6 <assert_failed>

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004c74:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c78:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	0c1b      	lsrs	r3, r3, #16
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	0a1b      	lsrs	r3, r3, #8
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d11a      	bne.n	8004cf4 <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fa1c 	bl	8005100 <RTC_Bcd2ToByte>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	785b      	ldrb	r3, [r3, #1]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fa13 	bl	8005100 <RTC_Bcd2ToByte>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	789b      	ldrb	r3, [r3, #2]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fa0a 	bl	8005100 <RTC_Bcd2ToByte>
 8004cec:	4603      	mov	r3, r0
 8004cee:	461a      	mov	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	08005bd0 	.word	0x08005bd0

08004d04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_RTC_SetDate+0x26>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d004      	beq.n	8004d2a <HAL_RTC_SetDate+0x26>
 8004d20:	f240 318a 	movw	r1, #906	; 0x38a
 8004d24:	488e      	ldr	r0, [pc, #568]	; (8004f60 <HAL_RTC_SetDate+0x25c>)
 8004d26:	f7fb ff56 	bl	8000bd6 <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	7f1b      	ldrb	r3, [r3, #28]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_RTC_SetDate+0x32>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e10f      	b.n	8004f56 <HAL_RTC_SetDate+0x252>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10e      	bne.n	8004d66 <HAL_RTC_SetDate+0x62>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	785b      	ldrb	r3, [r3, #1]
 8004d58:	f023 0310 	bic.w	r3, r3, #16
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	330a      	adds	r3, #10
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d01c      	beq.n	8004da8 <HAL_RTC_SetDate+0xa4>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d018      	beq.n	8004da8 <HAL_RTC_SetDate+0xa4>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d014      	beq.n	8004da8 <HAL_RTC_SetDate+0xa4>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d010      	beq.n	8004da8 <HAL_RTC_SetDate+0xa4>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	d00c      	beq.n	8004da8 <HAL_RTC_SetDate+0xa4>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b06      	cmp	r3, #6
 8004d94:	d008      	beq.n	8004da8 <HAL_RTC_SetDate+0xa4>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b07      	cmp	r3, #7
 8004d9c:	d004      	beq.n	8004da8 <HAL_RTC_SetDate+0xa4>
 8004d9e:	f240 3196 	movw	r1, #918	; 0x396
 8004da2:	486f      	ldr	r0, [pc, #444]	; (8004f60 <HAL_RTC_SetDate+0x25c>)
 8004da4:	f7fb ff17 	bl	8000bd6 <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d13f      	bne.n	8004e2e <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	78db      	ldrb	r3, [r3, #3]
 8004db2:	2b63      	cmp	r3, #99	; 0x63
 8004db4:	d904      	bls.n	8004dc0 <HAL_RTC_SetDate+0xbc>
 8004db6:	f240 319a 	movw	r1, #922	; 0x39a
 8004dba:	4869      	ldr	r0, [pc, #420]	; (8004f60 <HAL_RTC_SetDate+0x25c>)
 8004dbc:	f7fb ff0b 	bl	8000bd6 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_RTC_SetDate+0xcc>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	2b0c      	cmp	r3, #12
 8004dce:	d904      	bls.n	8004dda <HAL_RTC_SetDate+0xd6>
 8004dd0:	f240 319b 	movw	r1, #923	; 0x39b
 8004dd4:	4862      	ldr	r0, [pc, #392]	; (8004f60 <HAL_RTC_SetDate+0x25c>)
 8004dd6:	f7fb fefe 	bl	8000bd6 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	789b      	ldrb	r3, [r3, #2]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_RTC_SetDate+0xe6>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	789b      	ldrb	r3, [r3, #2]
 8004de6:	2b1f      	cmp	r3, #31
 8004de8:	d904      	bls.n	8004df4 <HAL_RTC_SetDate+0xf0>
 8004dea:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004dee:	485c      	ldr	r0, [pc, #368]	; (8004f60 <HAL_RTC_SetDate+0x25c>)
 8004df0:	f7fb fef1 	bl	8000bd6 <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	78db      	ldrb	r3, [r3, #3]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f963 	bl	80050c4 <RTC_ByteToBcd2>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 f95c 	bl	80050c4 <RTC_ByteToBcd2>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e10:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	789b      	ldrb	r3, [r3, #2]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 f954 	bl	80050c4 <RTC_ByteToBcd2>
 8004e1c:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004e1e:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e045      	b.n	8004eba <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	78db      	ldrb	r3, [r3, #3]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f964 	bl	8005100 <RTC_Bcd2ToByte>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b63      	cmp	r3, #99	; 0x63
 8004e3c:	d904      	bls.n	8004e48 <HAL_RTC_SetDate+0x144>
 8004e3e:	f240 31a5 	movw	r1, #933	; 0x3a5
 8004e42:	4847      	ldr	r0, [pc, #284]	; (8004f60 <HAL_RTC_SetDate+0x25c>)
 8004e44:	f7fb fec7 	bl	8000bd6 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	785b      	ldrb	r3, [r3, #1]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 f957 	bl	8005100 <RTC_Bcd2ToByte>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <HAL_RTC_SetDate+0x164>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f94f 	bl	8005100 <RTC_Bcd2ToByte>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b0c      	cmp	r3, #12
 8004e66:	d904      	bls.n	8004e72 <HAL_RTC_SetDate+0x16e>
 8004e68:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004e6c:	483c      	ldr	r0, [pc, #240]	; (8004f60 <HAL_RTC_SetDate+0x25c>)
 8004e6e:	f7fb feb2 	bl	8000bd6 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	789b      	ldrb	r3, [r3, #2]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f942 	bl	8005100 <RTC_Bcd2ToByte>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <HAL_RTC_SetDate+0x18e>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	789b      	ldrb	r3, [r3, #2]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f93a 	bl	8005100 <RTC_Bcd2ToByte>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b1f      	cmp	r3, #31
 8004e90:	d904      	bls.n	8004e9c <HAL_RTC_SetDate+0x198>
 8004e92:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004e96:	4832      	ldr	r0, [pc, #200]	; (8004f60 <HAL_RTC_SetDate+0x25c>)
 8004e98:	f7fb fe9d 	bl	8000bd6 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	78db      	ldrb	r3, [r3, #3]
 8004ea0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ea8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004eae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	22ca      	movs	r2, #202	; 0xca
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2253      	movs	r2, #83	; 0x53
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f8ce 	bl	800506c <RTC_EnterInitMode>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	22ff      	movs	r2, #255	; 0xff
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e033      	b.n	8004f56 <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ef8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004efc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f0c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d111      	bne.n	8004f40 <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f87d 	bl	800501c <HAL_RTC_WaitForSynchro>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00b      	beq.n	8004f40 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	22ff      	movs	r2, #255	; 0xff
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2204      	movs	r2, #4
 8004f34:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e00a      	b.n	8004f56 <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	22ff      	movs	r2, #255	; 0xff
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
  }
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd90      	pop	{r4, r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	08005bd0 	.word	0x08005bd0

08004f64 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <HAL_RTC_GetDate+0x26>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d004      	beq.n	8004f8a <HAL_RTC_GetDate+0x26>
 8004f80:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8004f84:	4824      	ldr	r0, [pc, #144]	; (8005018 <HAL_RTC_GetDate+0xb4>)
 8004f86:	f7fb fe26 	bl	8000bd6 <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f98:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	0a1b      	lsrs	r3, r3, #8
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	0b5b      	lsrs	r3, r3, #13
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d11a      	bne.n	800500e <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	78db      	ldrb	r3, [r3, #3]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 f88f 	bl	8005100 <RTC_Bcd2ToByte>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f886 	bl	8005100 <RTC_Bcd2ToByte>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	789b      	ldrb	r3, [r3, #2]
 8005000:	4618      	mov	r0, r3
 8005002:	f000 f87d 	bl	8005100 <RTC_Bcd2ToByte>
 8005006:	4603      	mov	r3, r0
 8005008:	461a      	mov	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	08005bd0 	.word	0x08005bd0

0800501c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005036:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005038:	f7fb ffca 	bl	8000fd0 <HAL_GetTick>
 800503c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800503e:	e009      	b.n	8005054 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005040:	f7fb ffc6 	bl	8000fd0 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800504e:	d901      	bls.n	8005054 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e007      	b.n	8005064 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0ee      	beq.n	8005040 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d119      	bne.n	80050ba <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800508e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005090:	f7fb ff9e 	bl	8000fd0 <HAL_GetTick>
 8005094:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005096:	e009      	b.n	80050ac <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005098:	f7fb ff9a 	bl	8000fd0 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050a6:	d901      	bls.n	80050ac <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e007      	b.n	80050bc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0ee      	beq.n	8005098 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80050d2:	e005      	b.n	80050e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3301      	adds	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	3b0a      	subs	r3, #10
 80050de:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	2b09      	cmp	r3, #9
 80050e4:	d8f6      	bhi.n	80050d4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	b2db      	uxtb	r3, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	b2db      	uxtb	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	b2da      	uxtb	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	4413      	add	r3, r2
 800512e:	b2db      	uxtb	r3, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e0a0      	b.n	8005290 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d02c      	beq.n	80051b0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a4f      	ldr	r2, [pc, #316]	; (8005298 <HAL_UART_Init+0x15c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00e      	beq.n	800517e <HAL_UART_Init+0x42>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a4d      	ldr	r2, [pc, #308]	; (800529c <HAL_UART_Init+0x160>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d009      	beq.n	800517e <HAL_UART_Init+0x42>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a4c      	ldr	r2, [pc, #304]	; (80052a0 <HAL_UART_Init+0x164>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d004      	beq.n	800517e <HAL_UART_Init+0x42>
 8005174:	f240 114b 	movw	r1, #331	; 0x14b
 8005178:	484a      	ldr	r0, [pc, #296]	; (80052a4 <HAL_UART_Init+0x168>)
 800517a:	f7fb fd2c 	bl	8000bd6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d028      	beq.n	80051d8 <HAL_UART_Init+0x9c>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800518e:	d023      	beq.n	80051d8 <HAL_UART_Init+0x9c>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005198:	d01e      	beq.n	80051d8 <HAL_UART_Init+0x9c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051a2:	d019      	beq.n	80051d8 <HAL_UART_Init+0x9c>
 80051a4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80051a8:	483e      	ldr	r0, [pc, #248]	; (80052a4 <HAL_UART_Init+0x168>)
 80051aa:	f7fb fd14 	bl	8000bd6 <assert_failed>
 80051ae:	e013      	b.n	80051d8 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a38      	ldr	r2, [pc, #224]	; (8005298 <HAL_UART_Init+0x15c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00e      	beq.n	80051d8 <HAL_UART_Init+0x9c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a37      	ldr	r2, [pc, #220]	; (800529c <HAL_UART_Init+0x160>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d009      	beq.n	80051d8 <HAL_UART_Init+0x9c>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a35      	ldr	r2, [pc, #212]	; (80052a0 <HAL_UART_Init+0x164>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <HAL_UART_Init+0x9c>
 80051ce:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80051d2:	4834      	ldr	r0, [pc, #208]	; (80052a4 <HAL_UART_Init+0x168>)
 80051d4:	f7fb fcff 	bl	8000bd6 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <HAL_UART_Init+0xb8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e8:	d004      	beq.n	80051f4 <HAL_UART_Init+0xb8>
 80051ea:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80051ee:	482d      	ldr	r0, [pc, #180]	; (80052a4 <HAL_UART_Init+0x168>)
 80051f0:	f7fb fcf1 	bl	8000bd6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d009      	beq.n	8005210 <HAL_UART_Init+0xd4>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005204:	d004      	beq.n	8005210 <HAL_UART_Init+0xd4>
 8005206:	f240 1153 	movw	r1, #339	; 0x153
 800520a:	4826      	ldr	r0, [pc, #152]	; (80052a4 <HAL_UART_Init+0x168>)
 800520c:	f7fb fce3 	bl	8000bd6 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fb fdfb 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2224      	movs	r2, #36	; 0x24
 800522e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005240:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f830 	bl	80052a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005256:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005266:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005276:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40011000 	.word	0x40011000
 800529c:	40004400 	.word	0x40004400
 80052a0:	40011400 	.word	0x40011400
 80052a4:	08005c08 	.word	0x08005c08

080052a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	4a9a      	ldr	r2, [pc, #616]	; (8005520 <UART_SetConfig+0x278>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d904      	bls.n	80052c6 <UART_SetConfig+0x1e>
 80052bc:	f640 31fb 	movw	r1, #3067	; 0xbfb
 80052c0:	4898      	ldr	r0, [pc, #608]	; (8005524 <UART_SetConfig+0x27c>)
 80052c2:	f7fb fc88 	bl	8000bd6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d009      	beq.n	80052e2 <UART_SetConfig+0x3a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d6:	d004      	beq.n	80052e2 <UART_SetConfig+0x3a>
 80052d8:	f640 31fc 	movw	r1, #3068	; 0xbfc
 80052dc:	4891      	ldr	r0, [pc, #580]	; (8005524 <UART_SetConfig+0x27c>)
 80052de:	f7fb fc7a 	bl	8000bd6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00e      	beq.n	8005308 <UART_SetConfig+0x60>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f2:	d009      	beq.n	8005308 <UART_SetConfig+0x60>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80052fc:	d004      	beq.n	8005308 <UART_SetConfig+0x60>
 80052fe:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8005302:	4888      	ldr	r0, [pc, #544]	; (8005524 <UART_SetConfig+0x27c>)
 8005304:	f7fb fc67 	bl	8000bd6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8005310:	4013      	ands	r3, r2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <UART_SetConfig+0x76>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d104      	bne.n	8005328 <UART_SetConfig+0x80>
 800531e:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8005322:	4880      	ldr	r0, [pc, #512]	; (8005524 <UART_SetConfig+0x27c>)
 8005324:	f7fb fc57 	bl	8000bd6 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005360:	f023 030c 	bic.w	r3, r3, #12
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	68f9      	ldr	r1, [r7, #12]
 800536a:	430b      	orrs	r3, r1
 800536c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699a      	ldr	r2, [r3, #24]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538c:	f040 818f 	bne.w	80056ae <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a64      	ldr	r2, [pc, #400]	; (8005528 <UART_SetConfig+0x280>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d005      	beq.n	80053a6 <UART_SetConfig+0xfe>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a63      	ldr	r2, [pc, #396]	; (800552c <UART_SetConfig+0x284>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	f040 80c7 	bne.w	8005534 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053a6:	f7fe ffc7 	bl	8004338 <HAL_RCC_GetPCLK2Freq>
 80053aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	461d      	mov	r5, r3
 80053b0:	f04f 0600 	mov.w	r6, #0
 80053b4:	46a8      	mov	r8, r5
 80053b6:	46b1      	mov	r9, r6
 80053b8:	eb18 0308 	adds.w	r3, r8, r8
 80053bc:	eb49 0409 	adc.w	r4, r9, r9
 80053c0:	4698      	mov	r8, r3
 80053c2:	46a1      	mov	r9, r4
 80053c4:	eb18 0805 	adds.w	r8, r8, r5
 80053c8:	eb49 0906 	adc.w	r9, r9, r6
 80053cc:	f04f 0100 	mov.w	r1, #0
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053e0:	4688      	mov	r8, r1
 80053e2:	4691      	mov	r9, r2
 80053e4:	eb18 0005 	adds.w	r0, r8, r5
 80053e8:	eb49 0106 	adc.w	r1, r9, r6
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	461d      	mov	r5, r3
 80053f2:	f04f 0600 	mov.w	r6, #0
 80053f6:	196b      	adds	r3, r5, r5
 80053f8:	eb46 0406 	adc.w	r4, r6, r6
 80053fc:	461a      	mov	r2, r3
 80053fe:	4623      	mov	r3, r4
 8005400:	f7fa feea 	bl	80001d8 <__aeabi_uldivmod>
 8005404:	4603      	mov	r3, r0
 8005406:	460c      	mov	r4, r1
 8005408:	461a      	mov	r2, r3
 800540a:	4b49      	ldr	r3, [pc, #292]	; (8005530 <UART_SetConfig+0x288>)
 800540c:	fba3 2302 	umull	r2, r3, r3, r2
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	461d      	mov	r5, r3
 800541a:	f04f 0600 	mov.w	r6, #0
 800541e:	46a9      	mov	r9, r5
 8005420:	46b2      	mov	sl, r6
 8005422:	eb19 0309 	adds.w	r3, r9, r9
 8005426:	eb4a 040a 	adc.w	r4, sl, sl
 800542a:	4699      	mov	r9, r3
 800542c:	46a2      	mov	sl, r4
 800542e:	eb19 0905 	adds.w	r9, r9, r5
 8005432:	eb4a 0a06 	adc.w	sl, sl, r6
 8005436:	f04f 0100 	mov.w	r1, #0
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005442:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005446:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800544a:	4689      	mov	r9, r1
 800544c:	4692      	mov	sl, r2
 800544e:	eb19 0005 	adds.w	r0, r9, r5
 8005452:	eb4a 0106 	adc.w	r1, sl, r6
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	461d      	mov	r5, r3
 800545c:	f04f 0600 	mov.w	r6, #0
 8005460:	196b      	adds	r3, r5, r5
 8005462:	eb46 0406 	adc.w	r4, r6, r6
 8005466:	461a      	mov	r2, r3
 8005468:	4623      	mov	r3, r4
 800546a:	f7fa feb5 	bl	80001d8 <__aeabi_uldivmod>
 800546e:	4603      	mov	r3, r0
 8005470:	460c      	mov	r4, r1
 8005472:	461a      	mov	r2, r3
 8005474:	4b2e      	ldr	r3, [pc, #184]	; (8005530 <UART_SetConfig+0x288>)
 8005476:	fba3 1302 	umull	r1, r3, r3, r2
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	2164      	movs	r1, #100	; 0x64
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	3332      	adds	r3, #50	; 0x32
 8005488:	4a29      	ldr	r2, [pc, #164]	; (8005530 <UART_SetConfig+0x288>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005496:	4498      	add	r8, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	461d      	mov	r5, r3
 800549c:	f04f 0600 	mov.w	r6, #0
 80054a0:	46a9      	mov	r9, r5
 80054a2:	46b2      	mov	sl, r6
 80054a4:	eb19 0309 	adds.w	r3, r9, r9
 80054a8:	eb4a 040a 	adc.w	r4, sl, sl
 80054ac:	4699      	mov	r9, r3
 80054ae:	46a2      	mov	sl, r4
 80054b0:	eb19 0905 	adds.w	r9, r9, r5
 80054b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80054b8:	f04f 0100 	mov.w	r1, #0
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054cc:	4689      	mov	r9, r1
 80054ce:	4692      	mov	sl, r2
 80054d0:	eb19 0005 	adds.w	r0, r9, r5
 80054d4:	eb4a 0106 	adc.w	r1, sl, r6
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	461d      	mov	r5, r3
 80054de:	f04f 0600 	mov.w	r6, #0
 80054e2:	196b      	adds	r3, r5, r5
 80054e4:	eb46 0406 	adc.w	r4, r6, r6
 80054e8:	461a      	mov	r2, r3
 80054ea:	4623      	mov	r3, r4
 80054ec:	f7fa fe74 	bl	80001d8 <__aeabi_uldivmod>
 80054f0:	4603      	mov	r3, r0
 80054f2:	460c      	mov	r4, r1
 80054f4:	461a      	mov	r2, r3
 80054f6:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <UART_SetConfig+0x288>)
 80054f8:	fba3 1302 	umull	r1, r3, r3, r2
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	2164      	movs	r1, #100	; 0x64
 8005500:	fb01 f303 	mul.w	r3, r1, r3
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	3332      	adds	r3, #50	; 0x32
 800550a:	4a09      	ldr	r2, [pc, #36]	; (8005530 <UART_SetConfig+0x288>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	f003 0207 	and.w	r2, r3, #7
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4442      	add	r2, r8
 800551c:	609a      	str	r2, [r3, #8]
 800551e:	e27a      	b.n	8005a16 <UART_SetConfig+0x76e>
 8005520:	00a037a0 	.word	0x00a037a0
 8005524:	08005c08 	.word	0x08005c08
 8005528:	40011000 	.word	0x40011000
 800552c:	40011400 	.word	0x40011400
 8005530:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005534:	f7fe feec 	bl	8004310 <HAL_RCC_GetPCLK1Freq>
 8005538:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	461d      	mov	r5, r3
 800553e:	f04f 0600 	mov.w	r6, #0
 8005542:	46a8      	mov	r8, r5
 8005544:	46b1      	mov	r9, r6
 8005546:	eb18 0308 	adds.w	r3, r8, r8
 800554a:	eb49 0409 	adc.w	r4, r9, r9
 800554e:	4698      	mov	r8, r3
 8005550:	46a1      	mov	r9, r4
 8005552:	eb18 0805 	adds.w	r8, r8, r5
 8005556:	eb49 0906 	adc.w	r9, r9, r6
 800555a:	f04f 0100 	mov.w	r1, #0
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005566:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800556a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800556e:	4688      	mov	r8, r1
 8005570:	4691      	mov	r9, r2
 8005572:	eb18 0005 	adds.w	r0, r8, r5
 8005576:	eb49 0106 	adc.w	r1, r9, r6
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	461d      	mov	r5, r3
 8005580:	f04f 0600 	mov.w	r6, #0
 8005584:	196b      	adds	r3, r5, r5
 8005586:	eb46 0406 	adc.w	r4, r6, r6
 800558a:	461a      	mov	r2, r3
 800558c:	4623      	mov	r3, r4
 800558e:	f7fa fe23 	bl	80001d8 <__aeabi_uldivmod>
 8005592:	4603      	mov	r3, r0
 8005594:	460c      	mov	r4, r1
 8005596:	461a      	mov	r2, r3
 8005598:	4bb3      	ldr	r3, [pc, #716]	; (8005868 <UART_SetConfig+0x5c0>)
 800559a:	fba3 2302 	umull	r2, r3, r3, r2
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	461d      	mov	r5, r3
 80055a8:	f04f 0600 	mov.w	r6, #0
 80055ac:	46a9      	mov	r9, r5
 80055ae:	46b2      	mov	sl, r6
 80055b0:	eb19 0309 	adds.w	r3, r9, r9
 80055b4:	eb4a 040a 	adc.w	r4, sl, sl
 80055b8:	4699      	mov	r9, r3
 80055ba:	46a2      	mov	sl, r4
 80055bc:	eb19 0905 	adds.w	r9, r9, r5
 80055c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80055c4:	f04f 0100 	mov.w	r1, #0
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055d8:	4689      	mov	r9, r1
 80055da:	4692      	mov	sl, r2
 80055dc:	eb19 0005 	adds.w	r0, r9, r5
 80055e0:	eb4a 0106 	adc.w	r1, sl, r6
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	461d      	mov	r5, r3
 80055ea:	f04f 0600 	mov.w	r6, #0
 80055ee:	196b      	adds	r3, r5, r5
 80055f0:	eb46 0406 	adc.w	r4, r6, r6
 80055f4:	461a      	mov	r2, r3
 80055f6:	4623      	mov	r3, r4
 80055f8:	f7fa fdee 	bl	80001d8 <__aeabi_uldivmod>
 80055fc:	4603      	mov	r3, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	461a      	mov	r2, r3
 8005602:	4b99      	ldr	r3, [pc, #612]	; (8005868 <UART_SetConfig+0x5c0>)
 8005604:	fba3 1302 	umull	r1, r3, r3, r2
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	2164      	movs	r1, #100	; 0x64
 800560c:	fb01 f303 	mul.w	r3, r1, r3
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	3332      	adds	r3, #50	; 0x32
 8005616:	4a94      	ldr	r2, [pc, #592]	; (8005868 <UART_SetConfig+0x5c0>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005624:	4498      	add	r8, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	461d      	mov	r5, r3
 800562a:	f04f 0600 	mov.w	r6, #0
 800562e:	46a9      	mov	r9, r5
 8005630:	46b2      	mov	sl, r6
 8005632:	eb19 0309 	adds.w	r3, r9, r9
 8005636:	eb4a 040a 	adc.w	r4, sl, sl
 800563a:	4699      	mov	r9, r3
 800563c:	46a2      	mov	sl, r4
 800563e:	eb19 0905 	adds.w	r9, r9, r5
 8005642:	eb4a 0a06 	adc.w	sl, sl, r6
 8005646:	f04f 0100 	mov.w	r1, #0
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005652:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005656:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800565a:	4689      	mov	r9, r1
 800565c:	4692      	mov	sl, r2
 800565e:	eb19 0005 	adds.w	r0, r9, r5
 8005662:	eb4a 0106 	adc.w	r1, sl, r6
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	461d      	mov	r5, r3
 800566c:	f04f 0600 	mov.w	r6, #0
 8005670:	196b      	adds	r3, r5, r5
 8005672:	eb46 0406 	adc.w	r4, r6, r6
 8005676:	461a      	mov	r2, r3
 8005678:	4623      	mov	r3, r4
 800567a:	f7fa fdad 	bl	80001d8 <__aeabi_uldivmod>
 800567e:	4603      	mov	r3, r0
 8005680:	460c      	mov	r4, r1
 8005682:	461a      	mov	r2, r3
 8005684:	4b78      	ldr	r3, [pc, #480]	; (8005868 <UART_SetConfig+0x5c0>)
 8005686:	fba3 1302 	umull	r1, r3, r3, r2
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	2164      	movs	r1, #100	; 0x64
 800568e:	fb01 f303 	mul.w	r3, r1, r3
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	3332      	adds	r3, #50	; 0x32
 8005698:	4a73      	ldr	r2, [pc, #460]	; (8005868 <UART_SetConfig+0x5c0>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	f003 0207 	and.w	r2, r3, #7
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4442      	add	r2, r8
 80056aa:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80056ac:	e1b3      	b.n	8005a16 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a6e      	ldr	r2, [pc, #440]	; (800586c <UART_SetConfig+0x5c4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d005      	beq.n	80056c4 <UART_SetConfig+0x41c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a6c      	ldr	r2, [pc, #432]	; (8005870 <UART_SetConfig+0x5c8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	f040 80d8 	bne.w	8005874 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 80056c4:	f7fe fe38 	bl	8004338 <HAL_RCC_GetPCLK2Freq>
 80056c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	469a      	mov	sl, r3
 80056ce:	f04f 0b00 	mov.w	fp, #0
 80056d2:	46d0      	mov	r8, sl
 80056d4:	46d9      	mov	r9, fp
 80056d6:	eb18 0308 	adds.w	r3, r8, r8
 80056da:	eb49 0409 	adc.w	r4, r9, r9
 80056de:	4698      	mov	r8, r3
 80056e0:	46a1      	mov	r9, r4
 80056e2:	eb18 080a 	adds.w	r8, r8, sl
 80056e6:	eb49 090b 	adc.w	r9, r9, fp
 80056ea:	f04f 0100 	mov.w	r1, #0
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056fe:	4688      	mov	r8, r1
 8005700:	4691      	mov	r9, r2
 8005702:	eb1a 0508 	adds.w	r5, sl, r8
 8005706:	eb4b 0609 	adc.w	r6, fp, r9
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4619      	mov	r1, r3
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	f04f 0400 	mov.w	r4, #0
 800571c:	0094      	lsls	r4, r2, #2
 800571e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005722:	008b      	lsls	r3, r1, #2
 8005724:	461a      	mov	r2, r3
 8005726:	4623      	mov	r3, r4
 8005728:	4628      	mov	r0, r5
 800572a:	4631      	mov	r1, r6
 800572c:	f7fa fd54 	bl	80001d8 <__aeabi_uldivmod>
 8005730:	4603      	mov	r3, r0
 8005732:	460c      	mov	r4, r1
 8005734:	461a      	mov	r2, r3
 8005736:	4b4c      	ldr	r3, [pc, #304]	; (8005868 <UART_SetConfig+0x5c0>)
 8005738:	fba3 2302 	umull	r2, r3, r3, r2
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	469b      	mov	fp, r3
 8005746:	f04f 0c00 	mov.w	ip, #0
 800574a:	46d9      	mov	r9, fp
 800574c:	46e2      	mov	sl, ip
 800574e:	eb19 0309 	adds.w	r3, r9, r9
 8005752:	eb4a 040a 	adc.w	r4, sl, sl
 8005756:	4699      	mov	r9, r3
 8005758:	46a2      	mov	sl, r4
 800575a:	eb19 090b 	adds.w	r9, r9, fp
 800575e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005762:	f04f 0100 	mov.w	r1, #0
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800576e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005772:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005776:	4689      	mov	r9, r1
 8005778:	4692      	mov	sl, r2
 800577a:	eb1b 0509 	adds.w	r5, fp, r9
 800577e:	eb4c 060a 	adc.w	r6, ip, sl
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	4619      	mov	r1, r3
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	f04f 0400 	mov.w	r4, #0
 8005794:	0094      	lsls	r4, r2, #2
 8005796:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800579a:	008b      	lsls	r3, r1, #2
 800579c:	461a      	mov	r2, r3
 800579e:	4623      	mov	r3, r4
 80057a0:	4628      	mov	r0, r5
 80057a2:	4631      	mov	r1, r6
 80057a4:	f7fa fd18 	bl	80001d8 <__aeabi_uldivmod>
 80057a8:	4603      	mov	r3, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	461a      	mov	r2, r3
 80057ae:	4b2e      	ldr	r3, [pc, #184]	; (8005868 <UART_SetConfig+0x5c0>)
 80057b0:	fba3 1302 	umull	r1, r3, r3, r2
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	2164      	movs	r1, #100	; 0x64
 80057b8:	fb01 f303 	mul.w	r3, r1, r3
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	3332      	adds	r3, #50	; 0x32
 80057c2:	4a29      	ldr	r2, [pc, #164]	; (8005868 <UART_SetConfig+0x5c0>)
 80057c4:	fba2 2303 	umull	r2, r3, r2, r3
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ce:	4498      	add	r8, r3
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	469b      	mov	fp, r3
 80057d4:	f04f 0c00 	mov.w	ip, #0
 80057d8:	46d9      	mov	r9, fp
 80057da:	46e2      	mov	sl, ip
 80057dc:	eb19 0309 	adds.w	r3, r9, r9
 80057e0:	eb4a 040a 	adc.w	r4, sl, sl
 80057e4:	4699      	mov	r9, r3
 80057e6:	46a2      	mov	sl, r4
 80057e8:	eb19 090b 	adds.w	r9, r9, fp
 80057ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057f0:	f04f 0100 	mov.w	r1, #0
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005800:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005804:	4689      	mov	r9, r1
 8005806:	4692      	mov	sl, r2
 8005808:	eb1b 0509 	adds.w	r5, fp, r9
 800580c:	eb4c 060a 	adc.w	r6, ip, sl
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	4619      	mov	r1, r3
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	f04f 0400 	mov.w	r4, #0
 8005822:	0094      	lsls	r4, r2, #2
 8005824:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005828:	008b      	lsls	r3, r1, #2
 800582a:	461a      	mov	r2, r3
 800582c:	4623      	mov	r3, r4
 800582e:	4628      	mov	r0, r5
 8005830:	4631      	mov	r1, r6
 8005832:	f7fa fcd1 	bl	80001d8 <__aeabi_uldivmod>
 8005836:	4603      	mov	r3, r0
 8005838:	460c      	mov	r4, r1
 800583a:	461a      	mov	r2, r3
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <UART_SetConfig+0x5c0>)
 800583e:	fba3 1302 	umull	r1, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	2164      	movs	r1, #100	; 0x64
 8005846:	fb01 f303 	mul.w	r3, r1, r3
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	3332      	adds	r3, #50	; 0x32
 8005850:	4a05      	ldr	r2, [pc, #20]	; (8005868 <UART_SetConfig+0x5c0>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	f003 020f 	and.w	r2, r3, #15
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4442      	add	r2, r8
 8005862:	609a      	str	r2, [r3, #8]
 8005864:	e0d7      	b.n	8005a16 <UART_SetConfig+0x76e>
 8005866:	bf00      	nop
 8005868:	51eb851f 	.word	0x51eb851f
 800586c:	40011000 	.word	0x40011000
 8005870:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 8005874:	f7fe fd4c 	bl	8004310 <HAL_RCC_GetPCLK1Freq>
 8005878:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	469a      	mov	sl, r3
 800587e:	f04f 0b00 	mov.w	fp, #0
 8005882:	46d0      	mov	r8, sl
 8005884:	46d9      	mov	r9, fp
 8005886:	eb18 0308 	adds.w	r3, r8, r8
 800588a:	eb49 0409 	adc.w	r4, r9, r9
 800588e:	4698      	mov	r8, r3
 8005890:	46a1      	mov	r9, r4
 8005892:	eb18 080a 	adds.w	r8, r8, sl
 8005896:	eb49 090b 	adc.w	r9, r9, fp
 800589a:	f04f 0100 	mov.w	r1, #0
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058ae:	4688      	mov	r8, r1
 80058b0:	4691      	mov	r9, r2
 80058b2:	eb1a 0508 	adds.w	r5, sl, r8
 80058b6:	eb4b 0609 	adc.w	r6, fp, r9
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4619      	mov	r1, r3
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	f04f 0400 	mov.w	r4, #0
 80058cc:	0094      	lsls	r4, r2, #2
 80058ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058d2:	008b      	lsls	r3, r1, #2
 80058d4:	461a      	mov	r2, r3
 80058d6:	4623      	mov	r3, r4
 80058d8:	4628      	mov	r0, r5
 80058da:	4631      	mov	r1, r6
 80058dc:	f7fa fc7c 	bl	80001d8 <__aeabi_uldivmod>
 80058e0:	4603      	mov	r3, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	461a      	mov	r2, r3
 80058e6:	4b4e      	ldr	r3, [pc, #312]	; (8005a20 <UART_SetConfig+0x778>)
 80058e8:	fba3 2302 	umull	r2, r3, r3, r2
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	469b      	mov	fp, r3
 80058f6:	f04f 0c00 	mov.w	ip, #0
 80058fa:	46d9      	mov	r9, fp
 80058fc:	46e2      	mov	sl, ip
 80058fe:	eb19 0309 	adds.w	r3, r9, r9
 8005902:	eb4a 040a 	adc.w	r4, sl, sl
 8005906:	4699      	mov	r9, r3
 8005908:	46a2      	mov	sl, r4
 800590a:	eb19 090b 	adds.w	r9, r9, fp
 800590e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005912:	f04f 0100 	mov.w	r1, #0
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800591e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005922:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005926:	4689      	mov	r9, r1
 8005928:	4692      	mov	sl, r2
 800592a:	eb1b 0509 	adds.w	r5, fp, r9
 800592e:	eb4c 060a 	adc.w	r6, ip, sl
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	4619      	mov	r1, r3
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	f04f 0400 	mov.w	r4, #0
 8005944:	0094      	lsls	r4, r2, #2
 8005946:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800594a:	008b      	lsls	r3, r1, #2
 800594c:	461a      	mov	r2, r3
 800594e:	4623      	mov	r3, r4
 8005950:	4628      	mov	r0, r5
 8005952:	4631      	mov	r1, r6
 8005954:	f7fa fc40 	bl	80001d8 <__aeabi_uldivmod>
 8005958:	4603      	mov	r3, r0
 800595a:	460c      	mov	r4, r1
 800595c:	461a      	mov	r2, r3
 800595e:	4b30      	ldr	r3, [pc, #192]	; (8005a20 <UART_SetConfig+0x778>)
 8005960:	fba3 1302 	umull	r1, r3, r3, r2
 8005964:	095b      	lsrs	r3, r3, #5
 8005966:	2164      	movs	r1, #100	; 0x64
 8005968:	fb01 f303 	mul.w	r3, r1, r3
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	3332      	adds	r3, #50	; 0x32
 8005972:	4a2b      	ldr	r2, [pc, #172]	; (8005a20 <UART_SetConfig+0x778>)
 8005974:	fba2 2303 	umull	r2, r3, r2, r3
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800597e:	4498      	add	r8, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	469b      	mov	fp, r3
 8005984:	f04f 0c00 	mov.w	ip, #0
 8005988:	46d9      	mov	r9, fp
 800598a:	46e2      	mov	sl, ip
 800598c:	eb19 0309 	adds.w	r3, r9, r9
 8005990:	eb4a 040a 	adc.w	r4, sl, sl
 8005994:	4699      	mov	r9, r3
 8005996:	46a2      	mov	sl, r4
 8005998:	eb19 090b 	adds.w	r9, r9, fp
 800599c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059a0:	f04f 0100 	mov.w	r1, #0
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059b4:	4689      	mov	r9, r1
 80059b6:	4692      	mov	sl, r2
 80059b8:	eb1b 0509 	adds.w	r5, fp, r9
 80059bc:	eb4c 060a 	adc.w	r6, ip, sl
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4619      	mov	r1, r3
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	f04f 0400 	mov.w	r4, #0
 80059d2:	0094      	lsls	r4, r2, #2
 80059d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059d8:	008b      	lsls	r3, r1, #2
 80059da:	461a      	mov	r2, r3
 80059dc:	4623      	mov	r3, r4
 80059de:	4628      	mov	r0, r5
 80059e0:	4631      	mov	r1, r6
 80059e2:	f7fa fbf9 	bl	80001d8 <__aeabi_uldivmod>
 80059e6:	4603      	mov	r3, r0
 80059e8:	460c      	mov	r4, r1
 80059ea:	461a      	mov	r2, r3
 80059ec:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <UART_SetConfig+0x778>)
 80059ee:	fba3 1302 	umull	r1, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	2164      	movs	r1, #100	; 0x64
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	3332      	adds	r3, #50	; 0x32
 8005a00:	4a07      	ldr	r2, [pc, #28]	; (8005a20 <UART_SetConfig+0x778>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f003 020f 	and.w	r2, r3, #15
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4442      	add	r2, r8
 8005a12:	609a      	str	r2, [r3, #8]
}
 8005a14:	e7ff      	b.n	8005a16 <UART_SetConfig+0x76e>
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a20:	51eb851f 	.word	0x51eb851f

08005a24 <__libc_init_array>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	4e0d      	ldr	r6, [pc, #52]	; (8005a5c <__libc_init_array+0x38>)
 8005a28:	4c0d      	ldr	r4, [pc, #52]	; (8005a60 <__libc_init_array+0x3c>)
 8005a2a:	1ba4      	subs	r4, r4, r6
 8005a2c:	10a4      	asrs	r4, r4, #2
 8005a2e:	2500      	movs	r5, #0
 8005a30:	42a5      	cmp	r5, r4
 8005a32:	d109      	bne.n	8005a48 <__libc_init_array+0x24>
 8005a34:	4e0b      	ldr	r6, [pc, #44]	; (8005a64 <__libc_init_array+0x40>)
 8005a36:	4c0c      	ldr	r4, [pc, #48]	; (8005a68 <__libc_init_array+0x44>)
 8005a38:	f000 f82c 	bl	8005a94 <_init>
 8005a3c:	1ba4      	subs	r4, r4, r6
 8005a3e:	10a4      	asrs	r4, r4, #2
 8005a40:	2500      	movs	r5, #0
 8005a42:	42a5      	cmp	r5, r4
 8005a44:	d105      	bne.n	8005a52 <__libc_init_array+0x2e>
 8005a46:	bd70      	pop	{r4, r5, r6, pc}
 8005a48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a4c:	4798      	blx	r3
 8005a4e:	3501      	adds	r5, #1
 8005a50:	e7ee      	b.n	8005a30 <__libc_init_array+0xc>
 8005a52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a56:	4798      	blx	r3
 8005a58:	3501      	adds	r5, #1
 8005a5a:	e7f2      	b.n	8005a42 <__libc_init_array+0x1e>
 8005a5c:	08005c64 	.word	0x08005c64
 8005a60:	08005c64 	.word	0x08005c64
 8005a64:	08005c64 	.word	0x08005c64
 8005a68:	08005c68 	.word	0x08005c68

08005a6c <memcpy>:
 8005a6c:	b510      	push	{r4, lr}
 8005a6e:	1e43      	subs	r3, r0, #1
 8005a70:	440a      	add	r2, r1
 8005a72:	4291      	cmp	r1, r2
 8005a74:	d100      	bne.n	8005a78 <memcpy+0xc>
 8005a76:	bd10      	pop	{r4, pc}
 8005a78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a80:	e7f7      	b.n	8005a72 <memcpy+0x6>

08005a82 <memset>:
 8005a82:	4402      	add	r2, r0
 8005a84:	4603      	mov	r3, r0
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d100      	bne.n	8005a8c <memset+0xa>
 8005a8a:	4770      	bx	lr
 8005a8c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a90:	e7f9      	b.n	8005a86 <memset+0x4>
	...

08005a94 <_init>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	bf00      	nop
 8005a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	469e      	mov	lr, r3
 8005a9e:	4770      	bx	lr

08005aa0 <_fini>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	bf00      	nop
 8005aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa6:	bc08      	pop	{r3}
 8005aa8:	469e      	mov	lr, r3
 8005aaa:	4770      	bx	lr
