# Super Power openocd configuration file
# Created on: Dec 18, 2020
# Author: Hector Manuel, Joachim Baumann
#
# This is the configuration file for openocd and the SuperPower UPS.
# It has a few configuration options that can be set below.

# The adapter can be selected by setting the variable _PROBE to the
# respective value. List of supported adapters:
# - ST-LINK: for the SWD pins of the board
# - Raspberry Pi: this option simulates the swd comunication using
#   the GPIO pins
#
# Interface Type: STLINK or RPI
set _PROBE "RPI"

# When you have the Reset pin connected via the respective jumper on
# the SuperPower board, then the hardware reset control can be used.
# If this is not the case, then we try to emulate this using the
# other pins. This is more error-prone but should still work in most
# cases. Set the _USE_RST_PIN to
# - YES for 3 pins (SDA, SCLK and RST): this is the safer option
# - NO for 2 pins (SDA and SCLK): this option doesn't require the
#   use of the reset pin but you can still triger resets via
#   software (using the SWD interface).
#
# Use the Reset Button: NO or YES
set _USE_RST_PIN "YES"

# If the interface type is RPI, then the communication is done by
# bit-banging the GPIO pins directly. Depending on the type of
# Raspberry you are using for the debugging different speed and base
# addresses for the peripherals have to be used. There are two classes:
# - the RPi 1 and the Pi Zero W are in the slow class (value SLOW)
# - all other Raspberries are in the fast class (value FAST)
# Set the variable _RPI_SPEED accordingly. If in doubt set to FAST
#
# RPi speed: SLOW (Pi Zero W, Pi 1) or FAST (Pi 2+)
set _RPI_SPEED "FAST"

# Thread aware debugging
# By default gdb does not know that the debugged program includes an RTOS
# so the program will be jumping from task to task and inside the FreeRTOS
# code, fortunately openocd is thread aware and can be configured to report to GDB
# the running tasks as threads, the use of this functionality requires some
# configurations in the STM32CubeIDE.
# As anything in life thread aware debugging is not free, it brings some
# overhead to the debugging session
# NOTE: BEFORE YOU ENABLE THIS FUNCTIONALITY PLEASE READ THE DEVELOPERS SECTION
# TO UNDERSTAND HOW TO CONFIGURE AND USE THIS FUNCTIONALITY.

# Use thread aware debugging: NO or YES
set _FREERTOS_DBG "YES"

####################################################################
echo "SuperPower"
if [expr [string compare $_PROBE "RPI"] == 0] {
	echo "Raspberry Pi selected as adapter for debugging"
	# source [find interface/my-raspberrypi-native.cfg]
	interface bcm2835gpio

	if [expr [string compare $_RPI_SPEED "SLOW"] == 0] {
		bcm2835gpio_peripheral_base 0x20000000
		bcm2835gpio_speed_coeffs 113714 28
	} else {
		bcm2835gpio_peripheral_base 0x3F000000
		bcm2835gpio_speed_coeffs 146203 36
	}
	# Define the pins for the SWD pins: swclk swdio
	bcm2835gpio_swd_nums 27 17
	transport select "swd"

	if [expr [string compare $_USE_RST_PIN "YES"] == 0] {
		echo "The reset pin will be used"
		# Define the pin for the System Reset (NRST on the STM32)
		bcm2835gpio_srst_num 4

		# JB Remove after Review
		# JB Reset config will be set in the stm32config
		reset_config srst_only srst_push_pull
		# JB Remove after Review
		# JB NRST Delay will be set in the stm32config
		adapter_nsrst_delay 100
		# JB Remove after Review
		# JB I think we don't need this
		adapter_nsrst_assert_width 200
	} else {
		echo "The reset pin will NOT be used"
		reset_config none separate
	}
} elseif [expr [string compare $_PROBE "STLINK"] == 0] {
	echo "st-link selected as adapter for debbuging"
	source [find interface/stlink-v2-1.cfg]
	transport select "hla_swd"
	reset_config srst_only srst_nogate connect_assert_srst
} else {
	echo "Super power: error invalid probe selected, check probe selection: RPI or STLINK are the only options"
	return -code -1
}


bindto 0.0.0.0

# JB Remove after Review
# JB The work area size will be retrieved by the device file, setting it is not necessary
#set WORKAREASIZE 0x8000

set CHIPNAME STM32F411RETx
set BOARDNAME NUCLEO-F411RE

# Enable debug when in low power modes
set ENABLE_LOW_POWER 1

# Stop Watchdog counters when halt
set STOP_WATCHDOG 1

# STlink Debug clock frequency
set CLOCK_FREQ 8000

set CONNECT_UNDER_RESET 1
set CORE_RESET 1

# GDB PORT
set GDB_PORT 3333

# BCTM CPU variables

source [find target/stm32f4x.cfg]

if [expr [string compare $_FREERTOS_DBG "YES"] == 0] {
	echo "FreeRTOS aware debugging enabled"
	$_TARGETNAME configure -rtos FreeRTOS -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
}
# JB set in stm32 configuration
# set _TARGETNAME $CHIPNAME.cpu

init
#targets
reset halt

# procedures used when no reset pin is provided, this "function" is called when GDB begins the attach process
# with this we can ensure that GDB will enconter the MCU in a known state (halted)
proc no_rst_proc {} {
	echo "reseting board"
	cortex_m reset_config sysresetreq
	sleep 10
	#targets
	#reset halt
	#halt
	#reset init
}

proc rst_proc {} {
	reset halt
	#halt
	#reset init
}


if [expr [string compare $_USE_RST_PIN "NO"] == 0] {
	echo "defining software reset"
	$_TARGETNAME configure -event gdb-attach { no_rst_proc }
} else {
	echo "defining reset"
	$_TARGETNAME configure -event gdb-attach { rst_proc }
}
